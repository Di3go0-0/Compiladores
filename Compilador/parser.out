Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSOLUTE
    AMPERSANT
    ASM
    CONSTRUCTOR
    DESTRUCTOR
    DIACRITIC
    DIV
    DOLLAR
    EXCLAMATION
    EXTERNAL
    HASHTAG
    IMPLEMENTATION
    INLINE
    INTERFACE
    INTERRUPT
    LBLOCK
    LSHIFT
    MOD
    OBJECT
    PIPE
    PRIVATE
    RBLOCK
    RSHIFT
    SHL
    SHR
    SQUOTE
    STRING
    UNIT
    USES
    VIRTUAL
    XOR

Grammar

Rule 0     S' -> program
Rule 1     program -> program_heading block DOT
Rule 2     program_heading -> PROGRAM ID program_heading_opt_1 SEMICOLON
Rule 3     program_heading_opt_1 -> LPAREN identifier_list RPAREN
Rule 4     program_heading_opt_1 -> empty
Rule 5     actual_function -> ID
Rule 6     actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN
Rule 7     actual_parameter_list_1 -> COMMA actual_parameter actual_parameter_list_1
Rule 8     actual_parameter_list_1 -> empty
Rule 9     actual_parameter -> actual_value
Rule 10    actual_parameter -> actual_variable
Rule 11    actual_parameter -> actual_function
Rule 12    actual_parameter -> actual_procedure
Rule 13    actual_procedure -> ID
Rule 14    actual_value -> expression
Rule 15    actual_variable -> variable
Rule 16    addition_operator -> PLUS
Rule 17    addition_operator -> MINUS
Rule 18    addition_operator -> OR
Rule 19    array_type -> ARRAY LBRACKET index_type array_type_1 RBRACKET OF element_type
Rule 20    array_type_1 -> COMMA index_type array_type_1
Rule 21    array_type_1 -> empty
Rule 22    array_variable -> variable
Rule 23    assignment_statement -> variable ASSIGN expression
Rule 24    assignment_statement -> ID ASSIGN expression
Rule 25    base_type -> type
Rule 26    block -> declaration_part statement_part
Rule 27    bound_specification -> ID DOT DOT ID COLON ordinal_type_identifier
Rule 28    case_element -> case_label_list COLON statement
Rule 29    case_label_list -> constant case_label_list_1
Rule 30    case_label_list_1 -> COMMA constant case_label_list_1
Rule 31    case_label_list_1 -> empty
Rule 32    case_statement -> CASE expression OF case_element case_statement_1 case_statement_opt END
Rule 33    case_statement_1 -> SEMICOLON case_element case_statement_1
Rule 34    case_statement_1 -> empty
Rule 35    case_statement_opt -> SEMICOLON
Rule 36    case_statement_opt -> empty
Rule 37    component_variable -> indexed_variable
Rule 38    component_variable -> field_designator
Rule 39    component_variable -> file_buffer
Rule 40    compound_statement -> BEGIN statement_sequence END
Rule 41    conditional_statement -> if_statement
Rule 42    conditional_statement -> case_statement
Rule 43    conformant_array_schema -> packed_conformant_array_schema
Rule 44    conformant_array_schema -> unpacked_conformant_array_schema
Rule 45    constant_definition_part -> CONST constant_definition SEMICOLON constant_definition_part_1
Rule 46    constant_definition_part_1 -> constant_definition SEMICOLON constant_definition_part_1
Rule 47    constant_definition_part_1 -> empty
Rule 48    constant_definition -> ID EQUAL constant
Rule 49    constant -> constant_opt_sign ID
Rule 50    constant -> constant_opt_sign number
Rule 51    constant -> CONSTSTRING
Rule 52    constant_opt_sign -> PLUS
Rule 53    constant_opt_sign -> MINUS
Rule 54    constant_opt_sign -> empty
Rule 55    declaration_part -> declaration_part_opt_1 declaration_part_opt_2 declaration_part_opt_3 declaration_part_opt_4
Rule 56    declaration_part_opt_1 -> label_declaration_part
Rule 57    declaration_part_opt_1 -> empty
Rule 58    declaration_part_opt_2 -> constant_definition_part
Rule 59    declaration_part_opt_2 -> empty
Rule 60    declaration_part_opt_3 -> type_definition_part
Rule 61    declaration_part_opt_3 -> empty
Rule 62    declaration_part_opt_4 -> variable_declaration_part
Rule 63    declaration_part_opt_4 -> empty
Rule 64    directive -> FORWARD
Rule 65    element_list -> expression element_list_1
Rule 66    element_list -> empty
Rule 67    element_list_1 -> COMMA expression element_list_1
Rule 68    element_list_1 -> empty
Rule 69    element_type -> type
Rule 70    entire_variable -> ID
Rule 71    enumerated_type -> LPAREN identifier_list RPAREN
Rule 72    expression_list -> expression expression_list_1
Rule 73    expression_list_1 -> COMMA expression expression_list_1
Rule 74    expression_list_1 -> empty
Rule 75    expression -> simple_expression
Rule 76    expression -> simple_expression relational_operator simple_expression
Rule 77    factor -> NUMBER
Rule 78    factor -> CONSTSTRING
Rule 79    factor -> NIL
Rule 80    factor -> ID
Rule 81    factor -> set
Rule 82    factor -> variable
Rule 83    factor -> function_designator
Rule 84    factor -> LPAREN expression RPAREN
Rule 85    factor -> NOT factor
Rule 86    field_designator -> record_variable DOT ID
Rule 87    field_list -> fixed_part field_list_opt_1 field_list_opt_2
Rule 88    field_list -> variant_part field_list_opt_2
Rule 89    field_list -> empty
Rule 90    field_list_opt_1 -> SEMICOLON variant_part
Rule 91    field_list_opt_1 -> empty
Rule 92    field_list_opt_2 -> SEMICOLON
Rule 93    field_list_opt_2 -> empty
Rule 94    field_width -> expression
Rule 95    file_buffer -> file_variable CIRCUMFLEX
Rule 96    file_component_type -> type
Rule 97    file_type -> FILE OF file_component_type
Rule 98    file_variable -> variable
Rule 99    final_expression -> expression
Rule 100   fixed_part -> record_section fixed_part_1
Rule 101   fixed_part_1 -> SEMICOLON record_section fixed_part_1
Rule 102   fixed_part_1 -> empty
Rule 103   for_statement -> FOR ID ASSIGN initial_expression for_statement_opt_1 final_expression DO statement
Rule 104   for_statement_opt_1 -> TO
Rule 105   for_statement_opt_1 -> DOWNTO
Rule 106   formal_parameter_list -> LPAREN formal_parameter_section formal_parameter_list_1 RPAREN
Rule 107   formal_parameter_list_1 -> SEMICOLON formal_parameter_section formal_parameter_list_1
Rule 108   formal_parameter_list_1 -> empty
Rule 109   formal_parameter_section -> value_parameter_section
Rule 110   formal_parameter_section -> variable_parameter_section
Rule 111   formal_parameter_section -> procedure_parameter_section
Rule 112   formal_parameter_section -> function_parameter_section
Rule 113   fraction_length -> expression
Rule 114   function_declaration -> function_heading SEMICOLON function_declaration_1 SEMICOLON
Rule 115   function_declaration_1 -> directive
Rule 116   function_declaration_1 -> block
Rule 117   function_designator -> ID function_designator_opt_1
Rule 118   function_designator_opt_1 -> actual_parameter_list
Rule 119   function_designator_opt_1 -> empty
Rule 120   function_heading -> FUNCTION ID function_heading_opt_1 COLON result_type
Rule 121   function_heading_opt_1 -> formal_parameter_list
Rule 122   function_heading_opt_1 -> empty
Rule 123   function_parameter_section -> function_heading
Rule 124   goto_statement -> GOTO label
Rule 125   identifier_list -> ID identifier_list_1
Rule 126   identifier_list_1 -> COMMA ID identifier_list_1
Rule 127   identifier_list_1 -> empty
Rule 128   if_statement -> IF expression THEN statement if_statement_opt_1
Rule 129   if_statement_opt_1 -> ELSE statement
Rule 130   if_statement_opt_1 -> empty
Rule 131   index_type -> simple_type
Rule 132   indexed_variable -> array_variable LBRACKET expression_list RBRACKET
Rule 133   initial_expression -> expression
Rule 134   integer -> NUMBER
Rule 135   label_declaration_part -> LABEL label label_declaration_part_1 SEMICOLON
Rule 136   label_declaration_part_1 -> SEMICOLON label label_declaration_part_1
Rule 137   label_declaration_part_1 -> empty
Rule 138   label -> NUMBER
Rule 139   lower_bound -> constant
Rule 140   multiplication_operator -> TIMES
Rule 141   multiplication_operator -> DIVIDE
Rule 142   multiplication_operator -> MODULUS
Rule 143   multiplication_operator -> AND
Rule 144   number -> integer
Rule 145   number -> real_number
Rule 146   ordinal_type_identifier -> ID
Rule 147   output_list -> output_value output_list_opt_1
Rule 148   output_list_opt_1 -> COMMA output_value output_list_opt_1
Rule 149   output_list_opt_1 -> empty
Rule 150   output_value -> expression output_value_opt_1
Rule 151   output_value_opt_1 -> SEMICOLON field_width output_value_opt_2
Rule 152   output_value_opt_1 -> empty
Rule 153   output_value_opt_2 -> COLON fraction_length
Rule 154   output_value_opt_2 -> empty
Rule 155   packed_conformant_array_schema -> PACKED ARRAY LBRACKET bound_specification RBRACKET OF ID
Rule 156   parameter_type -> ID
Rule 157   parameter_type -> conformant_array_schema
Rule 158   pointer_type -> CIRCUMFLEX ID
Rule 159   pointer_variable -> variable
Rule 160   procedure_and_function_declaration_part -> procedure_and_function_declaration_part_1
Rule 161   procedure_and_function_declaration_part_1 -> procedure_declaration SEMICOLON procedure_and_function_declaration_part_1
Rule 162   procedure_and_function_declaration_part_1 -> function_declaration SEMICOLON procedure_and_function_declaration_part_1
Rule 163   procedure_and_function_declaration_part_1 -> empty
Rule 164   procedure_declaration -> procedure_heading SEMICOLON procedure_declaration_1
Rule 165   procedure_declaration_1 -> directive
Rule 166   procedure_declaration_1 -> block
Rule 167   procedure_heading -> PROCEDURE ID procedure_heading_opt_1
Rule 168   procedure_heading_opt_1 -> formal_parameter_list
Rule 169   procedure_heading_opt_1 -> empty
Rule 170   procedure_parameter_section -> procedure_heading
Rule 171   procedure_statement -> ID procedure_statement_opt_1
Rule 172   procedure_statement_opt_1 -> actual_parameter_list
Rule 173   procedure_statement_opt_1 -> empty
Rule 174   real_number -> NUMBER
Rule 175   record_section -> identifier_list COLON type
Rule 176   record_type -> RECORD field_list END
Rule 177   record_variable -> variable
Rule 178   referenced_variable -> pointer_variable CIRCUMFLEX
Rule 179   relational_operator -> EQUAL
Rule 180   relational_operator -> DEQUAL
Rule 181   relational_operator -> LESS
Rule 182   relational_operator -> LESSEQUAL
Rule 183   relational_operator -> GREATER
Rule 184   relational_operator -> GREATEREQUAL
Rule 185   relational_operator -> IN
Rule 186   repeat_statement -> REPEAT statement_sequence UNTIL expression
Rule 187   repetitive_statement -> while_statement
Rule 188   repetitive_statement -> repeat_statement
Rule 189   repetitive_statement -> for_statement
Rule 190   result_type -> ID
Rule 191   set_type -> SET OF base_type
Rule 192   set -> LBRACKET element_list RBRACKET
Rule 193   simple_expression -> simple_expression_opt_1 term simple_expression_1
Rule 194   simple_expression_1 -> addition_operator term simple_expression_1
Rule 195   simple_expression_1 -> empty
Rule 196   simple_expression_opt_1 -> PLUS
Rule 197   simple_expression_opt_1 -> MINUS
Rule 198   simple_expression_opt_1 -> empty
Rule 199   simple_statement -> assignment_statement
Rule 200   simple_statement -> procedure_statement
Rule 201   simple_statement -> goto_statement
Rule 202   simple_statement -> empty
Rule 203   simple_type -> subrange_type
Rule 204   simple_type -> enumerated_type
Rule 205   statement_part -> BEGIN statement_sequence END
Rule 206   statement_sequence -> statement statement_sequence_1
Rule 207   statement_sequence_1 -> SEMICOLON statement statement_sequence_1
Rule 208   statement_sequence_1 -> empty
Rule 209   statement -> statement_opt_1 statement_1
Rule 210   statement_1 -> simple_statement
Rule 211   statement_1 -> structured_statement
Rule 212   statement_opt_1 -> LABEL COLON
Rule 213   statement_opt_1 -> empty
Rule 214   structured_statement -> compound_statement
Rule 215   structured_statement -> repetitive_statement
Rule 216   structured_statement -> conditional_statement
Rule 217   structured_statement -> with_statement
Rule 218   structured_type -> structered_type_opt_1 unpacked_structured_type
Rule 219   structered_type_opt_1 -> PACKED
Rule 220   structered_type_opt_1 -> empty
Rule 221   subrange_type -> lower_bound DOT DOT upper_bound
Rule 222   tag_field -> ID COLON
Rule 223   tag_field -> empty
Rule 224   term -> factor term_1
Rule 225   term_1 -> multiplication_operator factor term_1
Rule 226   term_1 -> empty
Rule 227   type_definition_part -> TYPE type_definition SEMICOLON type_definition_part_1
Rule 228   type_definition_part_1 -> type_definition SEMICOLON type_definition_part_1
Rule 229   type_definition_part_1 -> empty
Rule 230   type_definition -> ID EQUAL type
Rule 231   type -> simple_type
Rule 232   type -> structured_type
Rule 233   type -> pointer_type
Rule 234   type -> ID
Rule 235   unpacked_conformant_array_schema -> ARRAY LBRACKET bound_specification unpacked_conformant_array_schema_1 RBRACKET OF unpacked_conformant_array_schema_2
Rule 236   unpacked_conformant_array_schema_1 -> SEMICOLON bound_specification unpacked_conformant_array_schema_1
Rule 237   unpacked_conformant_array_schema_1 -> empty
Rule 238   unpacked_conformant_array_schema_2 -> ID
Rule 239   unpacked_conformant_array_schema_2 -> conformant_array_schema
Rule 240   unpacked_structured_type -> array_type
Rule 241   unpacked_structured_type -> record_type
Rule 242   unpacked_structured_type -> set_type
Rule 243   unpacked_structured_type -> file_type
Rule 244   upper_bound -> constant
Rule 245   value_parameter_section -> identifier_list COLON parameter_type
Rule 246   variable_declaration_part -> VAR variable_declaration SEMICOLON variable_declaration_part_1
Rule 247   variable_declaration_part_1 -> variable_declaration SEMICOLON variable_declaration_part_1
Rule 248   variable_declaration_part_1 -> empty
Rule 249   variable_declaration -> identifier_list COLON type
Rule 250   variable_parameter_section -> VAR identifier_list COLON parameter_type
Rule 251   variable -> entire_variable
Rule 252   variable -> component_variable
Rule 253   variable -> referenced_variable
Rule 254   variant_part -> CASE tag_field ID OF variant variant_part_1
Rule 255   variant_part_1 -> SEMICOLON variant variant_part_1
Rule 256   variant_part_1 -> empty
Rule 257   variant -> case_label_list COLON LPAREN field_list RPAREN
Rule 258   while_statement -> WHILE expression DO statement
Rule 259   with_statement -> WITH record_variable with_statement_1 DO statement
Rule 260   with_statement_1 -> COMMA record_variable with_statement_1
Rule 261   with_statement_1 -> empty
Rule 262   empty -> <empty>

Terminals, with rules where they appear

ABSOLUTE             : 
AMPERSANT            : 
AND                  : 143
ARRAY                : 19 155 235
ASM                  : 
ASSIGN               : 23 24 103
BEGIN                : 40 205
CASE                 : 32 254
CIRCUMFLEX           : 95 158 178
COLON                : 27 28 120 153 175 212 222 245 249 250 257
COMMA                : 7 20 30 67 73 126 148 260
CONST                : 45
CONSTRUCTOR          : 
CONSTSTRING          : 51 78
DEQUAL               : 180
DESTRUCTOR           : 
DIACRITIC            : 
DIV                  : 
DIVIDE               : 141
DO                   : 103 258 259
DOLLAR               : 
DOT                  : 1 27 27 86 221 221
DOWNTO               : 105
ELSE                 : 129
END                  : 32 40 176 205
EQUAL                : 48 179 230
EXCLAMATION          : 
EXTERNAL             : 
FILE                 : 97
FOR                  : 103
FORWARD              : 64
FUNCTION             : 120
GOTO                 : 124
GREATER              : 183
GREATEREQUAL         : 184
HASHTAG              : 
ID                   : 2 5 13 24 27 27 48 49 70 80 86 103 117 120 125 126 146 155 156 158 167 171 190 222 230 234 238 254
IF                   : 128
IMPLEMENTATION       : 
IN                   : 185
INLINE               : 
INTERFACE            : 
INTERRUPT            : 
LABEL                : 135 212
LBLOCK               : 
LBRACKET             : 19 132 155 192 235
LESS                 : 181
LESSEQUAL            : 182
LPAREN               : 3 6 71 84 106 257
LSHIFT               : 
MINUS                : 17 53 197
MOD                  : 
MODULUS              : 142
NIL                  : 79
NOT                  : 85
NUMBER               : 77 134 138 174
OBJECT               : 
OF                   : 19 32 97 155 191 235 254
OR                   : 18
PACKED               : 155 219
PIPE                 : 
PLUS                 : 16 52 196
PRIVATE              : 
PROCEDURE            : 167
PROGRAM              : 2
RBLOCK               : 
RBRACKET             : 19 132 155 192 235
RECORD               : 176
REPEAT               : 186
RPAREN               : 3 6 71 84 106 257
RSHIFT               : 
SEMICOLON            : 2 33 35 45 46 90 92 101 107 114 114 135 136 151 161 162 164 207 227 228 236 246 247 255
SET                  : 191
SHL                  : 
SHR                  : 
SQUOTE               : 
STRING               : 
THEN                 : 128
TIMES                : 140
TO                   : 104
TYPE                 : 227
UNIT                 : 
UNTIL                : 186
USES                 : 
VAR                  : 246 250
VIRTUAL              : 
WHILE                : 258
WITH                 : 259
XOR                  : 
error                : 

Nonterminals, with rules where they appear

actual_function      : 11
actual_parameter     : 6 7
actual_parameter_list : 118 172
actual_parameter_list_1 : 6 7
actual_procedure     : 12
actual_value         : 9
actual_variable      : 10
addition_operator    : 194
array_type           : 240
array_type_1         : 19 20
array_variable       : 132
assignment_statement : 199
base_type            : 191
block                : 1 116 166
bound_specification  : 155 235 236
case_element         : 32 33
case_label_list      : 28 257
case_label_list_1    : 29 30
case_statement       : 42
case_statement_1     : 32 33
case_statement_opt   : 32
component_variable   : 252
compound_statement   : 214
conditional_statement : 216
conformant_array_schema : 157 239
constant             : 29 30 48 139 244
constant_definition  : 45 46
constant_definition_part : 58
constant_definition_part_1 : 45 46
constant_opt_sign    : 49 50
declaration_part     : 26
declaration_part_opt_1 : 55
declaration_part_opt_2 : 55
declaration_part_opt_3 : 55
declaration_part_opt_4 : 55
directive            : 115 165
element_list         : 192
element_list_1       : 65 67
element_type         : 19
empty                : 4 8 21 31 34 36 47 54 57 59 61 63 66 68 74 89 91 93 102 108 119 122 127 130 137 149 152 154 163 169 173 195 198 202 208 213 220 223 226 229 237 248 256 261
entire_variable      : 251
enumerated_type      : 204
expression           : 14 23 24 32 65 67 72 73 84 94 99 113 128 133 150 186 258
expression_list      : 132
expression_list_1    : 72 73
factor               : 85 224 225
field_designator     : 38
field_list           : 176 257
field_list_opt_1     : 87
field_list_opt_2     : 87 88
field_width          : 151
file_buffer          : 39
file_component_type  : 97
file_type            : 243
file_variable        : 95
final_expression     : 103
fixed_part           : 87
fixed_part_1         : 100 101
for_statement        : 189
for_statement_opt_1  : 103
formal_parameter_list : 121 168
formal_parameter_list_1 : 106 107
formal_parameter_section : 106 107
fraction_length      : 153
function_declaration : 162
function_declaration_1 : 114
function_designator  : 83
function_designator_opt_1 : 117
function_heading     : 114 123
function_heading_opt_1 : 120
function_parameter_section : 112
goto_statement       : 201
identifier_list      : 3 71 175 245 249 250
identifier_list_1    : 125 126
if_statement         : 41
if_statement_opt_1   : 128
index_type           : 19 20
indexed_variable     : 37
initial_expression   : 103
integer              : 144
label                : 124 135 136
label_declaration_part : 56
label_declaration_part_1 : 135 136
lower_bound          : 221
multiplication_operator : 225
number               : 50
ordinal_type_identifier : 27
output_list          : 
output_list_opt_1    : 147 148
output_value         : 147 148
output_value_opt_1   : 150
output_value_opt_2   : 151
packed_conformant_array_schema : 43
parameter_type       : 245 250
pointer_type         : 233
pointer_variable     : 178
procedure_and_function_declaration_part : 
procedure_and_function_declaration_part_1 : 160 161 162
procedure_declaration : 161
procedure_declaration_1 : 164
procedure_heading    : 164 170
procedure_heading_opt_1 : 167
procedure_parameter_section : 111
procedure_statement  : 200
procedure_statement_opt_1 : 171
program              : 0
program_heading      : 1
program_heading_opt_1 : 2
real_number          : 145
record_section       : 100 101
record_type          : 241
record_variable      : 86 259 260
referenced_variable  : 253
relational_operator  : 76
repeat_statement     : 188
repetitive_statement : 215
result_type          : 120
set                  : 81
set_type             : 242
simple_expression    : 75 76 76
simple_expression_1  : 193 194
simple_expression_opt_1 : 193
simple_statement     : 210
simple_type          : 131 231
statement            : 28 103 128 129 206 207 258 259
statement_1          : 209
statement_opt_1      : 209
statement_part       : 26
statement_sequence   : 40 186 205
statement_sequence_1 : 206 207
structered_type_opt_1 : 218
structured_statement : 211
structured_type      : 232
subrange_type        : 203
tag_field            : 254
term                 : 193 194
term_1               : 224 225
type                 : 25 69 96 175 230 249
type_definition      : 227 228
type_definition_part : 60
type_definition_part_1 : 227 228
unpacked_conformant_array_schema : 44
unpacked_conformant_array_schema_1 : 235 236
unpacked_conformant_array_schema_2 : 235
unpacked_structured_type : 218
upper_bound          : 221
value_parameter_section : 109
variable             : 15 22 23 82 98 159 177
variable_declaration : 246 247
variable_declaration_part : 62
variable_declaration_part_1 : 246 247
variable_parameter_section : 110
variant              : 254 255
variant_part         : 88 90
variant_part_1       : 254 255
while_statement      : 187
with_statement       : 217
with_statement_1     : 259 260

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_heading block DOT
    (2) program_heading -> . PROGRAM ID program_heading_opt_1 SEMICOLON

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    program_heading                shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> program_heading . block DOT
    (26) block -> . declaration_part statement_part
    (55) declaration_part -> . declaration_part_opt_1 declaration_part_opt_2 declaration_part_opt_3 declaration_part_opt_4
    (56) declaration_part_opt_1 -> . label_declaration_part
    (57) declaration_part_opt_1 -> . empty
    (135) label_declaration_part -> . LABEL label label_declaration_part_1 SEMICOLON
    (262) empty -> .

    LABEL           shift and go to state 9
    CONST           reduce using rule 262 (empty -> .)
    TYPE            reduce using rule 262 (empty -> .)
    VAR             reduce using rule 262 (empty -> .)
    BEGIN           reduce using rule 262 (empty -> .)

    block                          shift and go to state 4
    declaration_part               shift and go to state 5
    declaration_part_opt_1         shift and go to state 6
    label_declaration_part         shift and go to state 7
    empty                          shift and go to state 8

state 3

    (2) program_heading -> PROGRAM . ID program_heading_opt_1 SEMICOLON

    ID              shift and go to state 10


state 4

    (1) program -> program_heading block . DOT

    DOT             shift and go to state 11


state 5

    (26) block -> declaration_part . statement_part
    (205) statement_part -> . BEGIN statement_sequence END

    BEGIN           shift and go to state 13

    statement_part                 shift and go to state 12

state 6

    (55) declaration_part -> declaration_part_opt_1 . declaration_part_opt_2 declaration_part_opt_3 declaration_part_opt_4
    (58) declaration_part_opt_2 -> . constant_definition_part
    (59) declaration_part_opt_2 -> . empty
    (45) constant_definition_part -> . CONST constant_definition SEMICOLON constant_definition_part_1
    (262) empty -> .

    CONST           shift and go to state 17
    TYPE            reduce using rule 262 (empty -> .)
    VAR             reduce using rule 262 (empty -> .)
    BEGIN           reduce using rule 262 (empty -> .)

    declaration_part_opt_2         shift and go to state 14
    constant_definition_part       shift and go to state 15
    empty                          shift and go to state 16

state 7

    (56) declaration_part_opt_1 -> label_declaration_part .

    CONST           reduce using rule 56 (declaration_part_opt_1 -> label_declaration_part .)
    TYPE            reduce using rule 56 (declaration_part_opt_1 -> label_declaration_part .)
    VAR             reduce using rule 56 (declaration_part_opt_1 -> label_declaration_part .)
    BEGIN           reduce using rule 56 (declaration_part_opt_1 -> label_declaration_part .)


state 8

    (57) declaration_part_opt_1 -> empty .

    CONST           reduce using rule 57 (declaration_part_opt_1 -> empty .)
    TYPE            reduce using rule 57 (declaration_part_opt_1 -> empty .)
    VAR             reduce using rule 57 (declaration_part_opt_1 -> empty .)
    BEGIN           reduce using rule 57 (declaration_part_opt_1 -> empty .)


state 9

    (135) label_declaration_part -> LABEL . label label_declaration_part_1 SEMICOLON
    (138) label -> . NUMBER

    NUMBER          shift and go to state 19

    label                          shift and go to state 18

state 10

    (2) program_heading -> PROGRAM ID . program_heading_opt_1 SEMICOLON
    (3) program_heading_opt_1 -> . LPAREN identifier_list RPAREN
    (4) program_heading_opt_1 -> . empty
    (262) empty -> .

    LPAREN          shift and go to state 21
    SEMICOLON       reduce using rule 262 (empty -> .)

    program_heading_opt_1          shift and go to state 20
    empty                          shift and go to state 22

state 11

    (1) program -> program_heading block DOT .

    $end            reduce using rule 1 (program -> program_heading block DOT .)


state 12

    (26) block -> declaration_part statement_part .

    DOT             reduce using rule 26 (block -> declaration_part statement_part .)


state 13

    (205) statement_part -> BEGIN . statement_sequence END
    (206) statement_sequence -> . statement statement_sequence_1
    (209) statement -> . statement_opt_1 statement_1
    (212) statement_opt_1 -> . LABEL COLON
    (213) statement_opt_1 -> . empty
    (262) empty -> .

    LABEL           shift and go to state 26
    ID              reduce using rule 262 (empty -> .)
    GOTO            reduce using rule 262 (empty -> .)
    BEGIN           reduce using rule 262 (empty -> .)
    WITH            reduce using rule 262 (empty -> .)
    WHILE           reduce using rule 262 (empty -> .)
    REPEAT          reduce using rule 262 (empty -> .)
    FOR             reduce using rule 262 (empty -> .)
    IF              reduce using rule 262 (empty -> .)
    CASE            reduce using rule 262 (empty -> .)
    SEMICOLON       reduce using rule 262 (empty -> .)
    END             reduce using rule 262 (empty -> .)

    statement_sequence             shift and go to state 23
    statement                      shift and go to state 24
    statement_opt_1                shift and go to state 25
    empty                          shift and go to state 27

state 14

    (55) declaration_part -> declaration_part_opt_1 declaration_part_opt_2 . declaration_part_opt_3 declaration_part_opt_4
    (60) declaration_part_opt_3 -> . type_definition_part
    (61) declaration_part_opt_3 -> . empty
    (227) type_definition_part -> . TYPE type_definition SEMICOLON type_definition_part_1
    (262) empty -> .

    TYPE            shift and go to state 31
    VAR             reduce using rule 262 (empty -> .)
    BEGIN           reduce using rule 262 (empty -> .)

    declaration_part_opt_3         shift and go to state 28
    type_definition_part           shift and go to state 29
    empty                          shift and go to state 30

state 15

    (58) declaration_part_opt_2 -> constant_definition_part .

    TYPE            reduce using rule 58 (declaration_part_opt_2 -> constant_definition_part .)
    VAR             reduce using rule 58 (declaration_part_opt_2 -> constant_definition_part .)
    BEGIN           reduce using rule 58 (declaration_part_opt_2 -> constant_definition_part .)


state 16

    (59) declaration_part_opt_2 -> empty .

    TYPE            reduce using rule 59 (declaration_part_opt_2 -> empty .)
    VAR             reduce using rule 59 (declaration_part_opt_2 -> empty .)
    BEGIN           reduce using rule 59 (declaration_part_opt_2 -> empty .)


state 17

    (45) constant_definition_part -> CONST . constant_definition SEMICOLON constant_definition_part_1
    (48) constant_definition -> . ID EQUAL constant

    ID              shift and go to state 33

    constant_definition            shift and go to state 32

state 18

    (135) label_declaration_part -> LABEL label . label_declaration_part_1 SEMICOLON
    (136) label_declaration_part_1 -> . SEMICOLON label label_declaration_part_1
    (137) label_declaration_part_1 -> . empty
    (262) empty -> .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 35

  ! SEMICOLON       [ reduce using rule 262 (empty -> .) ]

    label_declaration_part_1       shift and go to state 34
    empty                          shift and go to state 36

state 19

    (138) label -> NUMBER .

    SEMICOLON       reduce using rule 138 (label -> NUMBER .)
    END             reduce using rule 138 (label -> NUMBER .)
    UNTIL           reduce using rule 138 (label -> NUMBER .)
    ELSE            reduce using rule 138 (label -> NUMBER .)


state 20

    (2) program_heading -> PROGRAM ID program_heading_opt_1 . SEMICOLON

    SEMICOLON       shift and go to state 37


state 21

    (3) program_heading_opt_1 -> LPAREN . identifier_list RPAREN
    (125) identifier_list -> . ID identifier_list_1

    ID              shift and go to state 39

    identifier_list                shift and go to state 38

state 22

    (4) program_heading_opt_1 -> empty .

    SEMICOLON       reduce using rule 4 (program_heading_opt_1 -> empty .)


state 23

    (205) statement_part -> BEGIN statement_sequence . END

    END             shift and go to state 40


state 24

    (206) statement_sequence -> statement . statement_sequence_1
    (207) statement_sequence_1 -> . SEMICOLON statement statement_sequence_1
    (208) statement_sequence_1 -> . empty
    (262) empty -> .

    SEMICOLON       shift and go to state 42
    END             reduce using rule 262 (empty -> .)
    UNTIL           reduce using rule 262 (empty -> .)

    statement_sequence_1           shift and go to state 41
    empty                          shift and go to state 43

state 25

    (209) statement -> statement_opt_1 . statement_1
    (210) statement_1 -> . simple_statement
    (211) statement_1 -> . structured_statement
    (199) simple_statement -> . assignment_statement
    (200) simple_statement -> . procedure_statement
    (201) simple_statement -> . goto_statement
    (202) simple_statement -> . empty
    (214) structured_statement -> . compound_statement
    (215) structured_statement -> . repetitive_statement
    (216) structured_statement -> . conditional_statement
    (217) structured_statement -> . with_statement
    (23) assignment_statement -> . variable ASSIGN expression
    (24) assignment_statement -> . ID ASSIGN expression
    (171) procedure_statement -> . ID procedure_statement_opt_1
    (124) goto_statement -> . GOTO label
    (262) empty -> .
    (40) compound_statement -> . BEGIN statement_sequence END
    (187) repetitive_statement -> . while_statement
    (188) repetitive_statement -> . repeat_statement
    (189) repetitive_statement -> . for_statement
    (41) conditional_statement -> . if_statement
    (42) conditional_statement -> . case_statement
    (259) with_statement -> . WITH record_variable with_statement_1 DO statement
    (251) variable -> . entire_variable
    (252) variable -> . component_variable
    (253) variable -> . referenced_variable
    (258) while_statement -> . WHILE expression DO statement
    (186) repeat_statement -> . REPEAT statement_sequence UNTIL expression
    (103) for_statement -> . FOR ID ASSIGN initial_expression for_statement_opt_1 final_expression DO statement
    (128) if_statement -> . IF expression THEN statement if_statement_opt_1
    (32) case_statement -> . CASE expression OF case_element case_statement_1 case_statement_opt END
    (70) entire_variable -> . ID
    (37) component_variable -> . indexed_variable
    (38) component_variable -> . field_designator
    (39) component_variable -> . file_buffer
    (178) referenced_variable -> . pointer_variable CIRCUMFLEX
    (132) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (86) field_designator -> . record_variable DOT ID
    (95) file_buffer -> . file_variable CIRCUMFLEX
    (159) pointer_variable -> . variable
    (22) array_variable -> . variable
    (177) record_variable -> . variable
    (98) file_variable -> . variable

    ID              shift and go to state 56
    GOTO            shift and go to state 57
    SEMICOLON       reduce using rule 262 (empty -> .)
    END             reduce using rule 262 (empty -> .)
    UNTIL           reduce using rule 262 (empty -> .)
    ELSE            reduce using rule 262 (empty -> .)
    BEGIN           shift and go to state 58
    WITH            shift and go to state 64
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    FOR             shift and go to state 71
    IF              shift and go to state 72
    CASE            shift and go to state 73

    statement_1                    shift and go to state 44
    simple_statement               shift and go to state 45
    structured_statement           shift and go to state 46
    assignment_statement           shift and go to state 47
    procedure_statement            shift and go to state 48
    goto_statement                 shift and go to state 49
    empty                          shift and go to state 50
    compound_statement             shift and go to state 51
    repetitive_statement           shift and go to state 52
    conditional_statement          shift and go to state 53
    with_statement                 shift and go to state 54
    variable                       shift and go to state 55
    while_statement                shift and go to state 59
    repeat_statement               shift and go to state 60
    for_statement                  shift and go to state 61
    if_statement                   shift and go to state 62
    case_statement                 shift and go to state 63
    record_variable                shift and go to state 65
    entire_variable                shift and go to state 66
    component_variable             shift and go to state 67
    referenced_variable            shift and go to state 68
    indexed_variable               shift and go to state 74
    field_designator               shift and go to state 75
    file_buffer                    shift and go to state 76
    pointer_variable               shift and go to state 77
    array_variable                 shift and go to state 78
    file_variable                  shift and go to state 79

state 26

    (212) statement_opt_1 -> LABEL . COLON

    COLON           shift and go to state 80


state 27

    (213) statement_opt_1 -> empty .

    ID              reduce using rule 213 (statement_opt_1 -> empty .)
    GOTO            reduce using rule 213 (statement_opt_1 -> empty .)
    BEGIN           reduce using rule 213 (statement_opt_1 -> empty .)
    WITH            reduce using rule 213 (statement_opt_1 -> empty .)
    WHILE           reduce using rule 213 (statement_opt_1 -> empty .)
    REPEAT          reduce using rule 213 (statement_opt_1 -> empty .)
    FOR             reduce using rule 213 (statement_opt_1 -> empty .)
    IF              reduce using rule 213 (statement_opt_1 -> empty .)
    CASE            reduce using rule 213 (statement_opt_1 -> empty .)
    SEMICOLON       reduce using rule 213 (statement_opt_1 -> empty .)
    END             reduce using rule 213 (statement_opt_1 -> empty .)
    UNTIL           reduce using rule 213 (statement_opt_1 -> empty .)
    ELSE            reduce using rule 213 (statement_opt_1 -> empty .)


state 28

    (55) declaration_part -> declaration_part_opt_1 declaration_part_opt_2 declaration_part_opt_3 . declaration_part_opt_4
    (62) declaration_part_opt_4 -> . variable_declaration_part
    (63) declaration_part_opt_4 -> . empty
    (246) variable_declaration_part -> . VAR variable_declaration SEMICOLON variable_declaration_part_1
    (262) empty -> .

    VAR             shift and go to state 84
    BEGIN           reduce using rule 262 (empty -> .)

    declaration_part_opt_4         shift and go to state 81
    variable_declaration_part      shift and go to state 82
    empty                          shift and go to state 83

state 29

    (60) declaration_part_opt_3 -> type_definition_part .

    VAR             reduce using rule 60 (declaration_part_opt_3 -> type_definition_part .)
    BEGIN           reduce using rule 60 (declaration_part_opt_3 -> type_definition_part .)


state 30

    (61) declaration_part_opt_3 -> empty .

    VAR             reduce using rule 61 (declaration_part_opt_3 -> empty .)
    BEGIN           reduce using rule 61 (declaration_part_opt_3 -> empty .)


state 31

    (227) type_definition_part -> TYPE . type_definition SEMICOLON type_definition_part_1
    (230) type_definition -> . ID EQUAL type

    ID              shift and go to state 86

    type_definition                shift and go to state 85

state 32

    (45) constant_definition_part -> CONST constant_definition . SEMICOLON constant_definition_part_1

    SEMICOLON       shift and go to state 87


state 33

    (48) constant_definition -> ID . EQUAL constant

    EQUAL           shift and go to state 88


state 34

    (135) label_declaration_part -> LABEL label label_declaration_part_1 . SEMICOLON

    SEMICOLON       shift and go to state 89


state 35

    (136) label_declaration_part_1 -> SEMICOLON . label label_declaration_part_1
    (138) label -> . NUMBER

    NUMBER          shift and go to state 19

    label                          shift and go to state 90

state 36

    (137) label_declaration_part_1 -> empty .

    SEMICOLON       reduce using rule 137 (label_declaration_part_1 -> empty .)


state 37

    (2) program_heading -> PROGRAM ID program_heading_opt_1 SEMICOLON .

    LABEL           reduce using rule 2 (program_heading -> PROGRAM ID program_heading_opt_1 SEMICOLON .)
    BEGIN           reduce using rule 2 (program_heading -> PROGRAM ID program_heading_opt_1 SEMICOLON .)
    CONST           reduce using rule 2 (program_heading -> PROGRAM ID program_heading_opt_1 SEMICOLON .)
    TYPE            reduce using rule 2 (program_heading -> PROGRAM ID program_heading_opt_1 SEMICOLON .)
    VAR             reduce using rule 2 (program_heading -> PROGRAM ID program_heading_opt_1 SEMICOLON .)


state 38

    (3) program_heading_opt_1 -> LPAREN identifier_list . RPAREN

    RPAREN          shift and go to state 91


state 39

    (125) identifier_list -> ID . identifier_list_1
    (126) identifier_list_1 -> . COMMA ID identifier_list_1
    (127) identifier_list_1 -> . empty
    (262) empty -> .

    COMMA           shift and go to state 93
    RPAREN          reduce using rule 262 (empty -> .)
    COLON           reduce using rule 262 (empty -> .)

    identifier_list_1              shift and go to state 92
    empty                          shift and go to state 94

state 40

    (205) statement_part -> BEGIN statement_sequence END .

    DOT             reduce using rule 205 (statement_part -> BEGIN statement_sequence END .)


state 41

    (206) statement_sequence -> statement statement_sequence_1 .

    END             reduce using rule 206 (statement_sequence -> statement statement_sequence_1 .)
    UNTIL           reduce using rule 206 (statement_sequence -> statement statement_sequence_1 .)


state 42

    (207) statement_sequence_1 -> SEMICOLON . statement statement_sequence_1
    (209) statement -> . statement_opt_1 statement_1
    (212) statement_opt_1 -> . LABEL COLON
    (213) statement_opt_1 -> . empty
    (262) empty -> .

    LABEL           shift and go to state 26
    ID              reduce using rule 262 (empty -> .)
    GOTO            reduce using rule 262 (empty -> .)
    BEGIN           reduce using rule 262 (empty -> .)
    WITH            reduce using rule 262 (empty -> .)
    WHILE           reduce using rule 262 (empty -> .)
    REPEAT          reduce using rule 262 (empty -> .)
    FOR             reduce using rule 262 (empty -> .)
    IF              reduce using rule 262 (empty -> .)
    CASE            reduce using rule 262 (empty -> .)
    SEMICOLON       reduce using rule 262 (empty -> .)
    END             reduce using rule 262 (empty -> .)
    UNTIL           reduce using rule 262 (empty -> .)

    statement                      shift and go to state 95
    statement_opt_1                shift and go to state 25
    empty                          shift and go to state 27

state 43

    (208) statement_sequence_1 -> empty .

    END             reduce using rule 208 (statement_sequence_1 -> empty .)
    UNTIL           reduce using rule 208 (statement_sequence_1 -> empty .)


state 44

    (209) statement -> statement_opt_1 statement_1 .

    SEMICOLON       reduce using rule 209 (statement -> statement_opt_1 statement_1 .)
    END             reduce using rule 209 (statement -> statement_opt_1 statement_1 .)
    UNTIL           reduce using rule 209 (statement -> statement_opt_1 statement_1 .)
    ELSE            reduce using rule 209 (statement -> statement_opt_1 statement_1 .)


state 45

    (210) statement_1 -> simple_statement .

    SEMICOLON       reduce using rule 210 (statement_1 -> simple_statement .)
    END             reduce using rule 210 (statement_1 -> simple_statement .)
    UNTIL           reduce using rule 210 (statement_1 -> simple_statement .)
    ELSE            reduce using rule 210 (statement_1 -> simple_statement .)


state 46

    (211) statement_1 -> structured_statement .

    SEMICOLON       reduce using rule 211 (statement_1 -> structured_statement .)
    END             reduce using rule 211 (statement_1 -> structured_statement .)
    UNTIL           reduce using rule 211 (statement_1 -> structured_statement .)
    ELSE            reduce using rule 211 (statement_1 -> structured_statement .)


state 47

    (199) simple_statement -> assignment_statement .

    SEMICOLON       reduce using rule 199 (simple_statement -> assignment_statement .)
    END             reduce using rule 199 (simple_statement -> assignment_statement .)
    UNTIL           reduce using rule 199 (simple_statement -> assignment_statement .)
    ELSE            reduce using rule 199 (simple_statement -> assignment_statement .)


state 48

    (200) simple_statement -> procedure_statement .

    SEMICOLON       reduce using rule 200 (simple_statement -> procedure_statement .)
    END             reduce using rule 200 (simple_statement -> procedure_statement .)
    UNTIL           reduce using rule 200 (simple_statement -> procedure_statement .)
    ELSE            reduce using rule 200 (simple_statement -> procedure_statement .)


state 49

    (201) simple_statement -> goto_statement .

    SEMICOLON       reduce using rule 201 (simple_statement -> goto_statement .)
    END             reduce using rule 201 (simple_statement -> goto_statement .)
    UNTIL           reduce using rule 201 (simple_statement -> goto_statement .)
    ELSE            reduce using rule 201 (simple_statement -> goto_statement .)


state 50

    (202) simple_statement -> empty .

    SEMICOLON       reduce using rule 202 (simple_statement -> empty .)
    END             reduce using rule 202 (simple_statement -> empty .)
    UNTIL           reduce using rule 202 (simple_statement -> empty .)
    ELSE            reduce using rule 202 (simple_statement -> empty .)


state 51

    (214) structured_statement -> compound_statement .

    SEMICOLON       reduce using rule 214 (structured_statement -> compound_statement .)
    END             reduce using rule 214 (structured_statement -> compound_statement .)
    UNTIL           reduce using rule 214 (structured_statement -> compound_statement .)
    ELSE            reduce using rule 214 (structured_statement -> compound_statement .)


state 52

    (215) structured_statement -> repetitive_statement .

    SEMICOLON       reduce using rule 215 (structured_statement -> repetitive_statement .)
    END             reduce using rule 215 (structured_statement -> repetitive_statement .)
    UNTIL           reduce using rule 215 (structured_statement -> repetitive_statement .)
    ELSE            reduce using rule 215 (structured_statement -> repetitive_statement .)


state 53

    (216) structured_statement -> conditional_statement .

    SEMICOLON       reduce using rule 216 (structured_statement -> conditional_statement .)
    END             reduce using rule 216 (structured_statement -> conditional_statement .)
    UNTIL           reduce using rule 216 (structured_statement -> conditional_statement .)
    ELSE            reduce using rule 216 (structured_statement -> conditional_statement .)


state 54

    (217) structured_statement -> with_statement .

    SEMICOLON       reduce using rule 217 (structured_statement -> with_statement .)
    END             reduce using rule 217 (structured_statement -> with_statement .)
    UNTIL           reduce using rule 217 (structured_statement -> with_statement .)
    ELSE            reduce using rule 217 (structured_statement -> with_statement .)


state 55

    (23) assignment_statement -> variable . ASSIGN expression
    (159) pointer_variable -> variable .
    (22) array_variable -> variable .
    (177) record_variable -> variable .
    (98) file_variable -> variable .

  ! reduce/reduce conflict for CIRCUMFLEX resolved using rule 98 (file_variable -> variable .)
    ASSIGN          shift and go to state 96
    LBRACKET        reduce using rule 22 (array_variable -> variable .)
    DOT             reduce using rule 177 (record_variable -> variable .)
    CIRCUMFLEX      reduce using rule 98 (file_variable -> variable .)

  ! CIRCUMFLEX      [ reduce using rule 159 (pointer_variable -> variable .) ]


state 56

    (24) assignment_statement -> ID . ASSIGN expression
    (171) procedure_statement -> ID . procedure_statement_opt_1
    (70) entire_variable -> ID .
    (172) procedure_statement_opt_1 -> . actual_parameter_list
    (173) procedure_statement_opt_1 -> . empty
    (6) actual_parameter_list -> . LPAREN actual_parameter actual_parameter_list_1 RPAREN
    (262) empty -> .

  ! shift/reduce conflict for ASSIGN resolved as shift
    ASSIGN          shift and go to state 97
    CIRCUMFLEX      reduce using rule 70 (entire_variable -> ID .)
    LBRACKET        reduce using rule 70 (entire_variable -> ID .)
    DOT             reduce using rule 70 (entire_variable -> ID .)
    LPAREN          shift and go to state 101
    SEMICOLON       reduce using rule 262 (empty -> .)
    END             reduce using rule 262 (empty -> .)
    UNTIL           reduce using rule 262 (empty -> .)
    ELSE            reduce using rule 262 (empty -> .)

  ! ASSIGN          [ reduce using rule 70 (entire_variable -> ID .) ]

    procedure_statement_opt_1      shift and go to state 98
    actual_parameter_list          shift and go to state 99
    empty                          shift and go to state 100

state 57

    (124) goto_statement -> GOTO . label
    (138) label -> . NUMBER

    NUMBER          shift and go to state 19

    label                          shift and go to state 102

state 58

    (40) compound_statement -> BEGIN . statement_sequence END
    (206) statement_sequence -> . statement statement_sequence_1
    (209) statement -> . statement_opt_1 statement_1
    (212) statement_opt_1 -> . LABEL COLON
    (213) statement_opt_1 -> . empty
    (262) empty -> .

    LABEL           shift and go to state 26
    ID              reduce using rule 262 (empty -> .)
    GOTO            reduce using rule 262 (empty -> .)
    BEGIN           reduce using rule 262 (empty -> .)
    WITH            reduce using rule 262 (empty -> .)
    WHILE           reduce using rule 262 (empty -> .)
    REPEAT          reduce using rule 262 (empty -> .)
    FOR             reduce using rule 262 (empty -> .)
    IF              reduce using rule 262 (empty -> .)
    CASE            reduce using rule 262 (empty -> .)
    SEMICOLON       reduce using rule 262 (empty -> .)
    END             reduce using rule 262 (empty -> .)

    statement_sequence             shift and go to state 103
    statement                      shift and go to state 24
    statement_opt_1                shift and go to state 25
    empty                          shift and go to state 27

state 59

    (187) repetitive_statement -> while_statement .

    SEMICOLON       reduce using rule 187 (repetitive_statement -> while_statement .)
    END             reduce using rule 187 (repetitive_statement -> while_statement .)
    UNTIL           reduce using rule 187 (repetitive_statement -> while_statement .)
    ELSE            reduce using rule 187 (repetitive_statement -> while_statement .)


state 60

    (188) repetitive_statement -> repeat_statement .

    SEMICOLON       reduce using rule 188 (repetitive_statement -> repeat_statement .)
    END             reduce using rule 188 (repetitive_statement -> repeat_statement .)
    UNTIL           reduce using rule 188 (repetitive_statement -> repeat_statement .)
    ELSE            reduce using rule 188 (repetitive_statement -> repeat_statement .)


state 61

    (189) repetitive_statement -> for_statement .

    SEMICOLON       reduce using rule 189 (repetitive_statement -> for_statement .)
    END             reduce using rule 189 (repetitive_statement -> for_statement .)
    UNTIL           reduce using rule 189 (repetitive_statement -> for_statement .)
    ELSE            reduce using rule 189 (repetitive_statement -> for_statement .)


state 62

    (41) conditional_statement -> if_statement .

    SEMICOLON       reduce using rule 41 (conditional_statement -> if_statement .)
    END             reduce using rule 41 (conditional_statement -> if_statement .)
    UNTIL           reduce using rule 41 (conditional_statement -> if_statement .)
    ELSE            reduce using rule 41 (conditional_statement -> if_statement .)


state 63

    (42) conditional_statement -> case_statement .

    SEMICOLON       reduce using rule 42 (conditional_statement -> case_statement .)
    END             reduce using rule 42 (conditional_statement -> case_statement .)
    UNTIL           reduce using rule 42 (conditional_statement -> case_statement .)
    ELSE            reduce using rule 42 (conditional_statement -> case_statement .)


state 64

    (259) with_statement -> WITH . record_variable with_statement_1 DO statement
    (177) record_variable -> . variable
    (251) variable -> . entire_variable
    (252) variable -> . component_variable
    (253) variable -> . referenced_variable
    (70) entire_variable -> . ID
    (37) component_variable -> . indexed_variable
    (38) component_variable -> . field_designator
    (39) component_variable -> . file_buffer
    (178) referenced_variable -> . pointer_variable CIRCUMFLEX
    (132) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (86) field_designator -> . record_variable DOT ID
    (95) file_buffer -> . file_variable CIRCUMFLEX
    (159) pointer_variable -> . variable
    (22) array_variable -> . variable
    (98) file_variable -> . variable

    ID              shift and go to state 106

    record_variable                shift and go to state 104
    variable                       shift and go to state 105
    entire_variable                shift and go to state 66
    component_variable             shift and go to state 67
    referenced_variable            shift and go to state 68
    indexed_variable               shift and go to state 74
    field_designator               shift and go to state 75
    file_buffer                    shift and go to state 76
    pointer_variable               shift and go to state 77
    array_variable                 shift and go to state 78
    file_variable                  shift and go to state 79

state 65

    (86) field_designator -> record_variable . DOT ID

    DOT             shift and go to state 107


state 66

    (251) variable -> entire_variable .

    ASSIGN          reduce using rule 251 (variable -> entire_variable .)
    CIRCUMFLEX      reduce using rule 251 (variable -> entire_variable .)
    LBRACKET        reduce using rule 251 (variable -> entire_variable .)
    DOT             reduce using rule 251 (variable -> entire_variable .)
    COMMA           reduce using rule 251 (variable -> entire_variable .)
    DO              reduce using rule 251 (variable -> entire_variable .)
    RPAREN          reduce using rule 251 (variable -> entire_variable .)
    TIMES           reduce using rule 251 (variable -> entire_variable .)
    DIVIDE          reduce using rule 251 (variable -> entire_variable .)
    MODULUS         reduce using rule 251 (variable -> entire_variable .)
    AND             reduce using rule 251 (variable -> entire_variable .)
    PLUS            reduce using rule 251 (variable -> entire_variable .)
    MINUS           reduce using rule 251 (variable -> entire_variable .)
    OR              reduce using rule 251 (variable -> entire_variable .)
    EQUAL           reduce using rule 251 (variable -> entire_variable .)
    DEQUAL          reduce using rule 251 (variable -> entire_variable .)
    LESS            reduce using rule 251 (variable -> entire_variable .)
    LESSEQUAL       reduce using rule 251 (variable -> entire_variable .)
    GREATER         reduce using rule 251 (variable -> entire_variable .)
    GREATEREQUAL    reduce using rule 251 (variable -> entire_variable .)
    IN              reduce using rule 251 (variable -> entire_variable .)
    THEN            reduce using rule 251 (variable -> entire_variable .)
    OF              reduce using rule 251 (variable -> entire_variable .)
    SEMICOLON       reduce using rule 251 (variable -> entire_variable .)
    END             reduce using rule 251 (variable -> entire_variable .)
    UNTIL           reduce using rule 251 (variable -> entire_variable .)
    ELSE            reduce using rule 251 (variable -> entire_variable .)
    RBRACKET        reduce using rule 251 (variable -> entire_variable .)
    TO              reduce using rule 251 (variable -> entire_variable .)
    DOWNTO          reduce using rule 251 (variable -> entire_variable .)


state 67

    (252) variable -> component_variable .

    ASSIGN          reduce using rule 252 (variable -> component_variable .)
    CIRCUMFLEX      reduce using rule 252 (variable -> component_variable .)
    LBRACKET        reduce using rule 252 (variable -> component_variable .)
    DOT             reduce using rule 252 (variable -> component_variable .)
    COMMA           reduce using rule 252 (variable -> component_variable .)
    DO              reduce using rule 252 (variable -> component_variable .)
    RPAREN          reduce using rule 252 (variable -> component_variable .)
    TIMES           reduce using rule 252 (variable -> component_variable .)
    DIVIDE          reduce using rule 252 (variable -> component_variable .)
    MODULUS         reduce using rule 252 (variable -> component_variable .)
    AND             reduce using rule 252 (variable -> component_variable .)
    PLUS            reduce using rule 252 (variable -> component_variable .)
    MINUS           reduce using rule 252 (variable -> component_variable .)
    OR              reduce using rule 252 (variable -> component_variable .)
    EQUAL           reduce using rule 252 (variable -> component_variable .)
    DEQUAL          reduce using rule 252 (variable -> component_variable .)
    LESS            reduce using rule 252 (variable -> component_variable .)
    LESSEQUAL       reduce using rule 252 (variable -> component_variable .)
    GREATER         reduce using rule 252 (variable -> component_variable .)
    GREATEREQUAL    reduce using rule 252 (variable -> component_variable .)
    IN              reduce using rule 252 (variable -> component_variable .)
    THEN            reduce using rule 252 (variable -> component_variable .)
    OF              reduce using rule 252 (variable -> component_variable .)
    SEMICOLON       reduce using rule 252 (variable -> component_variable .)
    END             reduce using rule 252 (variable -> component_variable .)
    UNTIL           reduce using rule 252 (variable -> component_variable .)
    ELSE            reduce using rule 252 (variable -> component_variable .)
    RBRACKET        reduce using rule 252 (variable -> component_variable .)
    TO              reduce using rule 252 (variable -> component_variable .)
    DOWNTO          reduce using rule 252 (variable -> component_variable .)


state 68

    (253) variable -> referenced_variable .

    ASSIGN          reduce using rule 253 (variable -> referenced_variable .)
    CIRCUMFLEX      reduce using rule 253 (variable -> referenced_variable .)
    LBRACKET        reduce using rule 253 (variable -> referenced_variable .)
    DOT             reduce using rule 253 (variable -> referenced_variable .)
    COMMA           reduce using rule 253 (variable -> referenced_variable .)
    DO              reduce using rule 253 (variable -> referenced_variable .)
    RPAREN          reduce using rule 253 (variable -> referenced_variable .)
    TIMES           reduce using rule 253 (variable -> referenced_variable .)
    DIVIDE          reduce using rule 253 (variable -> referenced_variable .)
    MODULUS         reduce using rule 253 (variable -> referenced_variable .)
    AND             reduce using rule 253 (variable -> referenced_variable .)
    PLUS            reduce using rule 253 (variable -> referenced_variable .)
    MINUS           reduce using rule 253 (variable -> referenced_variable .)
    OR              reduce using rule 253 (variable -> referenced_variable .)
    EQUAL           reduce using rule 253 (variable -> referenced_variable .)
    DEQUAL          reduce using rule 253 (variable -> referenced_variable .)
    LESS            reduce using rule 253 (variable -> referenced_variable .)
    LESSEQUAL       reduce using rule 253 (variable -> referenced_variable .)
    GREATER         reduce using rule 253 (variable -> referenced_variable .)
    GREATEREQUAL    reduce using rule 253 (variable -> referenced_variable .)
    IN              reduce using rule 253 (variable -> referenced_variable .)
    THEN            reduce using rule 253 (variable -> referenced_variable .)
    OF              reduce using rule 253 (variable -> referenced_variable .)
    SEMICOLON       reduce using rule 253 (variable -> referenced_variable .)
    END             reduce using rule 253 (variable -> referenced_variable .)
    UNTIL           reduce using rule 253 (variable -> referenced_variable .)
    ELSE            reduce using rule 253 (variable -> referenced_variable .)
    RBRACKET        reduce using rule 253 (variable -> referenced_variable .)
    TO              reduce using rule 253 (variable -> referenced_variable .)
    DOWNTO          reduce using rule 253 (variable -> referenced_variable .)


state 69

    (258) while_statement -> WHILE . expression DO statement
    (75) expression -> . simple_expression
    (76) expression -> . simple_expression relational_operator simple_expression
    (193) simple_expression -> . simple_expression_opt_1 term simple_expression_1
    (196) simple_expression_opt_1 -> . PLUS
    (197) simple_expression_opt_1 -> . MINUS
    (198) simple_expression_opt_1 -> . empty
    (262) empty -> .

    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NUMBER          reduce using rule 262 (empty -> .)
    CONSTSTRING     reduce using rule 262 (empty -> .)
    NIL             reduce using rule 262 (empty -> .)
    ID              reduce using rule 262 (empty -> .)
    LPAREN          reduce using rule 262 (empty -> .)
    NOT             reduce using rule 262 (empty -> .)
    LBRACKET        reduce using rule 262 (empty -> .)

    expression                     shift and go to state 108
    simple_expression              shift and go to state 109
    simple_expression_opt_1        shift and go to state 110
    empty                          shift and go to state 113

state 70

    (186) repeat_statement -> REPEAT . statement_sequence UNTIL expression
    (206) statement_sequence -> . statement statement_sequence_1
    (209) statement -> . statement_opt_1 statement_1
    (212) statement_opt_1 -> . LABEL COLON
    (213) statement_opt_1 -> . empty
    (262) empty -> .

    LABEL           shift and go to state 26
    ID              reduce using rule 262 (empty -> .)
    GOTO            reduce using rule 262 (empty -> .)
    BEGIN           reduce using rule 262 (empty -> .)
    WITH            reduce using rule 262 (empty -> .)
    WHILE           reduce using rule 262 (empty -> .)
    REPEAT          reduce using rule 262 (empty -> .)
    FOR             reduce using rule 262 (empty -> .)
    IF              reduce using rule 262 (empty -> .)
    CASE            reduce using rule 262 (empty -> .)
    SEMICOLON       reduce using rule 262 (empty -> .)
    UNTIL           reduce using rule 262 (empty -> .)

    statement_sequence             shift and go to state 114
    statement                      shift and go to state 24
    statement_opt_1                shift and go to state 25
    empty                          shift and go to state 27

state 71

    (103) for_statement -> FOR . ID ASSIGN initial_expression for_statement_opt_1 final_expression DO statement

    ID              shift and go to state 115


state 72

    (128) if_statement -> IF . expression THEN statement if_statement_opt_1
    (75) expression -> . simple_expression
    (76) expression -> . simple_expression relational_operator simple_expression
    (193) simple_expression -> . simple_expression_opt_1 term simple_expression_1
    (196) simple_expression_opt_1 -> . PLUS
    (197) simple_expression_opt_1 -> . MINUS
    (198) simple_expression_opt_1 -> . empty
    (262) empty -> .

    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NUMBER          reduce using rule 262 (empty -> .)
    CONSTSTRING     reduce using rule 262 (empty -> .)
    NIL             reduce using rule 262 (empty -> .)
    ID              reduce using rule 262 (empty -> .)
    LPAREN          reduce using rule 262 (empty -> .)
    NOT             reduce using rule 262 (empty -> .)
    LBRACKET        reduce using rule 262 (empty -> .)

    expression                     shift and go to state 116
    simple_expression              shift and go to state 109
    simple_expression_opt_1        shift and go to state 110
    empty                          shift and go to state 113

state 73

    (32) case_statement -> CASE . expression OF case_element case_statement_1 case_statement_opt END
    (75) expression -> . simple_expression
    (76) expression -> . simple_expression relational_operator simple_expression
    (193) simple_expression -> . simple_expression_opt_1 term simple_expression_1
    (196) simple_expression_opt_1 -> . PLUS
    (197) simple_expression_opt_1 -> . MINUS
    (198) simple_expression_opt_1 -> . empty
    (262) empty -> .

    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NUMBER          reduce using rule 262 (empty -> .)
    CONSTSTRING     reduce using rule 262 (empty -> .)
    NIL             reduce using rule 262 (empty -> .)
    ID              reduce using rule 262 (empty -> .)
    LPAREN          reduce using rule 262 (empty -> .)
    NOT             reduce using rule 262 (empty -> .)
    LBRACKET        reduce using rule 262 (empty -> .)

    expression                     shift and go to state 117
    simple_expression              shift and go to state 109
    simple_expression_opt_1        shift and go to state 110
    empty                          shift and go to state 113

state 74

    (37) component_variable -> indexed_variable .

    ASSIGN          reduce using rule 37 (component_variable -> indexed_variable .)
    CIRCUMFLEX      reduce using rule 37 (component_variable -> indexed_variable .)
    LBRACKET        reduce using rule 37 (component_variable -> indexed_variable .)
    DOT             reduce using rule 37 (component_variable -> indexed_variable .)
    COMMA           reduce using rule 37 (component_variable -> indexed_variable .)
    DO              reduce using rule 37 (component_variable -> indexed_variable .)
    RPAREN          reduce using rule 37 (component_variable -> indexed_variable .)
    TIMES           reduce using rule 37 (component_variable -> indexed_variable .)
    DIVIDE          reduce using rule 37 (component_variable -> indexed_variable .)
    MODULUS         reduce using rule 37 (component_variable -> indexed_variable .)
    AND             reduce using rule 37 (component_variable -> indexed_variable .)
    PLUS            reduce using rule 37 (component_variable -> indexed_variable .)
    MINUS           reduce using rule 37 (component_variable -> indexed_variable .)
    OR              reduce using rule 37 (component_variable -> indexed_variable .)
    EQUAL           reduce using rule 37 (component_variable -> indexed_variable .)
    DEQUAL          reduce using rule 37 (component_variable -> indexed_variable .)
    LESS            reduce using rule 37 (component_variable -> indexed_variable .)
    LESSEQUAL       reduce using rule 37 (component_variable -> indexed_variable .)
    GREATER         reduce using rule 37 (component_variable -> indexed_variable .)
    GREATEREQUAL    reduce using rule 37 (component_variable -> indexed_variable .)
    IN              reduce using rule 37 (component_variable -> indexed_variable .)
    THEN            reduce using rule 37 (component_variable -> indexed_variable .)
    OF              reduce using rule 37 (component_variable -> indexed_variable .)
    SEMICOLON       reduce using rule 37 (component_variable -> indexed_variable .)
    END             reduce using rule 37 (component_variable -> indexed_variable .)
    UNTIL           reduce using rule 37 (component_variable -> indexed_variable .)
    ELSE            reduce using rule 37 (component_variable -> indexed_variable .)
    RBRACKET        reduce using rule 37 (component_variable -> indexed_variable .)
    TO              reduce using rule 37 (component_variable -> indexed_variable .)
    DOWNTO          reduce using rule 37 (component_variable -> indexed_variable .)


state 75

    (38) component_variable -> field_designator .

    ASSIGN          reduce using rule 38 (component_variable -> field_designator .)
    CIRCUMFLEX      reduce using rule 38 (component_variable -> field_designator .)
    LBRACKET        reduce using rule 38 (component_variable -> field_designator .)
    DOT             reduce using rule 38 (component_variable -> field_designator .)
    COMMA           reduce using rule 38 (component_variable -> field_designator .)
    DO              reduce using rule 38 (component_variable -> field_designator .)
    RPAREN          reduce using rule 38 (component_variable -> field_designator .)
    TIMES           reduce using rule 38 (component_variable -> field_designator .)
    DIVIDE          reduce using rule 38 (component_variable -> field_designator .)
    MODULUS         reduce using rule 38 (component_variable -> field_designator .)
    AND             reduce using rule 38 (component_variable -> field_designator .)
    PLUS            reduce using rule 38 (component_variable -> field_designator .)
    MINUS           reduce using rule 38 (component_variable -> field_designator .)
    OR              reduce using rule 38 (component_variable -> field_designator .)
    EQUAL           reduce using rule 38 (component_variable -> field_designator .)
    DEQUAL          reduce using rule 38 (component_variable -> field_designator .)
    LESS            reduce using rule 38 (component_variable -> field_designator .)
    LESSEQUAL       reduce using rule 38 (component_variable -> field_designator .)
    GREATER         reduce using rule 38 (component_variable -> field_designator .)
    GREATEREQUAL    reduce using rule 38 (component_variable -> field_designator .)
    IN              reduce using rule 38 (component_variable -> field_designator .)
    THEN            reduce using rule 38 (component_variable -> field_designator .)
    OF              reduce using rule 38 (component_variable -> field_designator .)
    SEMICOLON       reduce using rule 38 (component_variable -> field_designator .)
    END             reduce using rule 38 (component_variable -> field_designator .)
    UNTIL           reduce using rule 38 (component_variable -> field_designator .)
    ELSE            reduce using rule 38 (component_variable -> field_designator .)
    RBRACKET        reduce using rule 38 (component_variable -> field_designator .)
    TO              reduce using rule 38 (component_variable -> field_designator .)
    DOWNTO          reduce using rule 38 (component_variable -> field_designator .)


state 76

    (39) component_variable -> file_buffer .

    ASSIGN          reduce using rule 39 (component_variable -> file_buffer .)
    CIRCUMFLEX      reduce using rule 39 (component_variable -> file_buffer .)
    LBRACKET        reduce using rule 39 (component_variable -> file_buffer .)
    DOT             reduce using rule 39 (component_variable -> file_buffer .)
    COMMA           reduce using rule 39 (component_variable -> file_buffer .)
    DO              reduce using rule 39 (component_variable -> file_buffer .)
    RPAREN          reduce using rule 39 (component_variable -> file_buffer .)
    TIMES           reduce using rule 39 (component_variable -> file_buffer .)
    DIVIDE          reduce using rule 39 (component_variable -> file_buffer .)
    MODULUS         reduce using rule 39 (component_variable -> file_buffer .)
    AND             reduce using rule 39 (component_variable -> file_buffer .)
    PLUS            reduce using rule 39 (component_variable -> file_buffer .)
    MINUS           reduce using rule 39 (component_variable -> file_buffer .)
    OR              reduce using rule 39 (component_variable -> file_buffer .)
    EQUAL           reduce using rule 39 (component_variable -> file_buffer .)
    DEQUAL          reduce using rule 39 (component_variable -> file_buffer .)
    LESS            reduce using rule 39 (component_variable -> file_buffer .)
    LESSEQUAL       reduce using rule 39 (component_variable -> file_buffer .)
    GREATER         reduce using rule 39 (component_variable -> file_buffer .)
    GREATEREQUAL    reduce using rule 39 (component_variable -> file_buffer .)
    IN              reduce using rule 39 (component_variable -> file_buffer .)
    THEN            reduce using rule 39 (component_variable -> file_buffer .)
    OF              reduce using rule 39 (component_variable -> file_buffer .)
    SEMICOLON       reduce using rule 39 (component_variable -> file_buffer .)
    END             reduce using rule 39 (component_variable -> file_buffer .)
    UNTIL           reduce using rule 39 (component_variable -> file_buffer .)
    ELSE            reduce using rule 39 (component_variable -> file_buffer .)
    RBRACKET        reduce using rule 39 (component_variable -> file_buffer .)
    TO              reduce using rule 39 (component_variable -> file_buffer .)
    DOWNTO          reduce using rule 39 (component_variable -> file_buffer .)


state 77

    (178) referenced_variable -> pointer_variable . CIRCUMFLEX

    CIRCUMFLEX      shift and go to state 118


state 78

    (132) indexed_variable -> array_variable . LBRACKET expression_list RBRACKET

    LBRACKET        shift and go to state 119


state 79

    (95) file_buffer -> file_variable . CIRCUMFLEX

    CIRCUMFLEX      shift and go to state 120


state 80

    (212) statement_opt_1 -> LABEL COLON .

    ID              reduce using rule 212 (statement_opt_1 -> LABEL COLON .)
    GOTO            reduce using rule 212 (statement_opt_1 -> LABEL COLON .)
    BEGIN           reduce using rule 212 (statement_opt_1 -> LABEL COLON .)
    WITH            reduce using rule 212 (statement_opt_1 -> LABEL COLON .)
    WHILE           reduce using rule 212 (statement_opt_1 -> LABEL COLON .)
    REPEAT          reduce using rule 212 (statement_opt_1 -> LABEL COLON .)
    FOR             reduce using rule 212 (statement_opt_1 -> LABEL COLON .)
    IF              reduce using rule 212 (statement_opt_1 -> LABEL COLON .)
    CASE            reduce using rule 212 (statement_opt_1 -> LABEL COLON .)
    SEMICOLON       reduce using rule 212 (statement_opt_1 -> LABEL COLON .)
    END             reduce using rule 212 (statement_opt_1 -> LABEL COLON .)
    UNTIL           reduce using rule 212 (statement_opt_1 -> LABEL COLON .)
    ELSE            reduce using rule 212 (statement_opt_1 -> LABEL COLON .)


state 81

    (55) declaration_part -> declaration_part_opt_1 declaration_part_opt_2 declaration_part_opt_3 declaration_part_opt_4 .

    BEGIN           reduce using rule 55 (declaration_part -> declaration_part_opt_1 declaration_part_opt_2 declaration_part_opt_3 declaration_part_opt_4 .)


state 82

    (62) declaration_part_opt_4 -> variable_declaration_part .

    BEGIN           reduce using rule 62 (declaration_part_opt_4 -> variable_declaration_part .)


state 83

    (63) declaration_part_opt_4 -> empty .

    BEGIN           reduce using rule 63 (declaration_part_opt_4 -> empty .)


state 84

    (246) variable_declaration_part -> VAR . variable_declaration SEMICOLON variable_declaration_part_1
    (249) variable_declaration -> . identifier_list COLON type
    (125) identifier_list -> . ID identifier_list_1

    ID              shift and go to state 39

    variable_declaration           shift and go to state 121
    identifier_list                shift and go to state 122

state 85

    (227) type_definition_part -> TYPE type_definition . SEMICOLON type_definition_part_1

    SEMICOLON       shift and go to state 123


state 86

    (230) type_definition -> ID . EQUAL type

    EQUAL           shift and go to state 124


state 87

    (45) constant_definition_part -> CONST constant_definition SEMICOLON . constant_definition_part_1
    (46) constant_definition_part_1 -> . constant_definition SEMICOLON constant_definition_part_1
    (47) constant_definition_part_1 -> . empty
    (48) constant_definition -> . ID EQUAL constant
    (262) empty -> .

    ID              shift and go to state 33
    TYPE            reduce using rule 262 (empty -> .)
    VAR             reduce using rule 262 (empty -> .)
    BEGIN           reduce using rule 262 (empty -> .)

    constant_definition            shift and go to state 125
    constant_definition_part_1     shift and go to state 126
    empty                          shift and go to state 127

state 88

    (48) constant_definition -> ID EQUAL . constant
    (49) constant -> . constant_opt_sign ID
    (50) constant -> . constant_opt_sign number
    (51) constant -> . CONSTSTRING
    (52) constant_opt_sign -> . PLUS
    (53) constant_opt_sign -> . MINUS
    (54) constant_opt_sign -> . empty
    (262) empty -> .

    CONSTSTRING     shift and go to state 130
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    ID              reduce using rule 262 (empty -> .)
    NUMBER          reduce using rule 262 (empty -> .)

    constant                       shift and go to state 128
    constant_opt_sign              shift and go to state 129
    empty                          shift and go to state 133

state 89

    (135) label_declaration_part -> LABEL label label_declaration_part_1 SEMICOLON .

    CONST           reduce using rule 135 (label_declaration_part -> LABEL label label_declaration_part_1 SEMICOLON .)
    TYPE            reduce using rule 135 (label_declaration_part -> LABEL label label_declaration_part_1 SEMICOLON .)
    VAR             reduce using rule 135 (label_declaration_part -> LABEL label label_declaration_part_1 SEMICOLON .)
    BEGIN           reduce using rule 135 (label_declaration_part -> LABEL label label_declaration_part_1 SEMICOLON .)


state 90

    (136) label_declaration_part_1 -> SEMICOLON label . label_declaration_part_1
    (136) label_declaration_part_1 -> . SEMICOLON label label_declaration_part_1
    (137) label_declaration_part_1 -> . empty
    (262) empty -> .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 35

  ! SEMICOLON       [ reduce using rule 262 (empty -> .) ]

    label_declaration_part_1       shift and go to state 134
    empty                          shift and go to state 36

state 91

    (3) program_heading_opt_1 -> LPAREN identifier_list RPAREN .

    SEMICOLON       reduce using rule 3 (program_heading_opt_1 -> LPAREN identifier_list RPAREN .)


state 92

    (125) identifier_list -> ID identifier_list_1 .

    RPAREN          reduce using rule 125 (identifier_list -> ID identifier_list_1 .)
    COLON           reduce using rule 125 (identifier_list -> ID identifier_list_1 .)


state 93

    (126) identifier_list_1 -> COMMA . ID identifier_list_1

    ID              shift and go to state 135


state 94

    (127) identifier_list_1 -> empty .

    RPAREN          reduce using rule 127 (identifier_list_1 -> empty .)
    COLON           reduce using rule 127 (identifier_list_1 -> empty .)


state 95

    (207) statement_sequence_1 -> SEMICOLON statement . statement_sequence_1
    (207) statement_sequence_1 -> . SEMICOLON statement statement_sequence_1
    (208) statement_sequence_1 -> . empty
    (262) empty -> .

    SEMICOLON       shift and go to state 42
    END             reduce using rule 262 (empty -> .)
    UNTIL           reduce using rule 262 (empty -> .)

    statement_sequence_1           shift and go to state 136
    empty                          shift and go to state 43

state 96

    (23) assignment_statement -> variable ASSIGN . expression
    (75) expression -> . simple_expression
    (76) expression -> . simple_expression relational_operator simple_expression
    (193) simple_expression -> . simple_expression_opt_1 term simple_expression_1
    (196) simple_expression_opt_1 -> . PLUS
    (197) simple_expression_opt_1 -> . MINUS
    (198) simple_expression_opt_1 -> . empty
    (262) empty -> .

    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NUMBER          reduce using rule 262 (empty -> .)
    CONSTSTRING     reduce using rule 262 (empty -> .)
    NIL             reduce using rule 262 (empty -> .)
    ID              reduce using rule 262 (empty -> .)
    LPAREN          reduce using rule 262 (empty -> .)
    NOT             reduce using rule 262 (empty -> .)
    LBRACKET        reduce using rule 262 (empty -> .)

    expression                     shift and go to state 137
    simple_expression              shift and go to state 109
    simple_expression_opt_1        shift and go to state 110
    empty                          shift and go to state 113

state 97

    (24) assignment_statement -> ID ASSIGN . expression
    (75) expression -> . simple_expression
    (76) expression -> . simple_expression relational_operator simple_expression
    (193) simple_expression -> . simple_expression_opt_1 term simple_expression_1
    (196) simple_expression_opt_1 -> . PLUS
    (197) simple_expression_opt_1 -> . MINUS
    (198) simple_expression_opt_1 -> . empty
    (262) empty -> .

    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NUMBER          reduce using rule 262 (empty -> .)
    CONSTSTRING     reduce using rule 262 (empty -> .)
    NIL             reduce using rule 262 (empty -> .)
    ID              reduce using rule 262 (empty -> .)
    LPAREN          reduce using rule 262 (empty -> .)
    NOT             reduce using rule 262 (empty -> .)
    LBRACKET        reduce using rule 262 (empty -> .)

    expression                     shift and go to state 138
    simple_expression              shift and go to state 109
    simple_expression_opt_1        shift and go to state 110
    empty                          shift and go to state 113

state 98

    (171) procedure_statement -> ID procedure_statement_opt_1 .

    SEMICOLON       reduce using rule 171 (procedure_statement -> ID procedure_statement_opt_1 .)
    END             reduce using rule 171 (procedure_statement -> ID procedure_statement_opt_1 .)
    UNTIL           reduce using rule 171 (procedure_statement -> ID procedure_statement_opt_1 .)
    ELSE            reduce using rule 171 (procedure_statement -> ID procedure_statement_opt_1 .)


state 99

    (172) procedure_statement_opt_1 -> actual_parameter_list .

    SEMICOLON       reduce using rule 172 (procedure_statement_opt_1 -> actual_parameter_list .)
    END             reduce using rule 172 (procedure_statement_opt_1 -> actual_parameter_list .)
    UNTIL           reduce using rule 172 (procedure_statement_opt_1 -> actual_parameter_list .)
    ELSE            reduce using rule 172 (procedure_statement_opt_1 -> actual_parameter_list .)


state 100

    (173) procedure_statement_opt_1 -> empty .

    SEMICOLON       reduce using rule 173 (procedure_statement_opt_1 -> empty .)
    END             reduce using rule 173 (procedure_statement_opt_1 -> empty .)
    UNTIL           reduce using rule 173 (procedure_statement_opt_1 -> empty .)
    ELSE            reduce using rule 173 (procedure_statement_opt_1 -> empty .)


state 101

    (6) actual_parameter_list -> LPAREN . actual_parameter actual_parameter_list_1 RPAREN
    (9) actual_parameter -> . actual_value
    (10) actual_parameter -> . actual_variable
    (11) actual_parameter -> . actual_function
    (12) actual_parameter -> . actual_procedure
    (14) actual_value -> . expression
    (15) actual_variable -> . variable
    (5) actual_function -> . ID
    (13) actual_procedure -> . ID
    (75) expression -> . simple_expression
    (76) expression -> . simple_expression relational_operator simple_expression
    (251) variable -> . entire_variable
    (252) variable -> . component_variable
    (253) variable -> . referenced_variable
    (193) simple_expression -> . simple_expression_opt_1 term simple_expression_1
    (70) entire_variable -> . ID
    (37) component_variable -> . indexed_variable
    (38) component_variable -> . field_designator
    (39) component_variable -> . file_buffer
    (178) referenced_variable -> . pointer_variable CIRCUMFLEX
    (196) simple_expression_opt_1 -> . PLUS
    (197) simple_expression_opt_1 -> . MINUS
    (198) simple_expression_opt_1 -> . empty
    (132) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (86) field_designator -> . record_variable DOT ID
    (95) file_buffer -> . file_variable CIRCUMFLEX
    (159) pointer_variable -> . variable
    (262) empty -> .
    (22) array_variable -> . variable
    (177) record_variable -> . variable
    (98) file_variable -> . variable

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 146
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NUMBER          reduce using rule 262 (empty -> .)
    CONSTSTRING     reduce using rule 262 (empty -> .)
    NIL             reduce using rule 262 (empty -> .)
    LPAREN          reduce using rule 262 (empty -> .)
    NOT             reduce using rule 262 (empty -> .)
    LBRACKET        reduce using rule 262 (empty -> .)

  ! ID              [ reduce using rule 262 (empty -> .) ]

    actual_parameter               shift and go to state 139
    actual_value                   shift and go to state 140
    actual_variable                shift and go to state 141
    actual_function                shift and go to state 142
    actual_procedure               shift and go to state 143
    expression                     shift and go to state 144
    variable                       shift and go to state 145
    simple_expression              shift and go to state 109
    entire_variable                shift and go to state 66
    component_variable             shift and go to state 67
    referenced_variable            shift and go to state 68
    simple_expression_opt_1        shift and go to state 110
    indexed_variable               shift and go to state 74
    field_designator               shift and go to state 75
    file_buffer                    shift and go to state 76
    pointer_variable               shift and go to state 77
    empty                          shift and go to state 113
    array_variable                 shift and go to state 78
    record_variable                shift and go to state 65
    file_variable                  shift and go to state 79

state 102

    (124) goto_statement -> GOTO label .

    SEMICOLON       reduce using rule 124 (goto_statement -> GOTO label .)
    END             reduce using rule 124 (goto_statement -> GOTO label .)
    UNTIL           reduce using rule 124 (goto_statement -> GOTO label .)
    ELSE            reduce using rule 124 (goto_statement -> GOTO label .)


state 103

    (40) compound_statement -> BEGIN statement_sequence . END

    END             shift and go to state 147


state 104

    (259) with_statement -> WITH record_variable . with_statement_1 DO statement
    (86) field_designator -> record_variable . DOT ID
    (260) with_statement_1 -> . COMMA record_variable with_statement_1
    (261) with_statement_1 -> . empty
    (262) empty -> .

    DOT             shift and go to state 107
    COMMA           shift and go to state 149
    DO              reduce using rule 262 (empty -> .)

    with_statement_1               shift and go to state 148
    empty                          shift and go to state 150

state 105

    (177) record_variable -> variable .
    (159) pointer_variable -> variable .
    (22) array_variable -> variable .
    (98) file_variable -> variable .

  ! reduce/reduce conflict for CIRCUMFLEX resolved using rule 98 (file_variable -> variable .)
    DOT             reduce using rule 177 (record_variable -> variable .)
    COMMA           reduce using rule 177 (record_variable -> variable .)
    DO              reduce using rule 177 (record_variable -> variable .)
    LBRACKET        reduce using rule 22 (array_variable -> variable .)
    CIRCUMFLEX      reduce using rule 98 (file_variable -> variable .)

  ! CIRCUMFLEX      [ reduce using rule 159 (pointer_variable -> variable .) ]


state 106

    (70) entire_variable -> ID .

    DOT             reduce using rule 70 (entire_variable -> ID .)
    COMMA           reduce using rule 70 (entire_variable -> ID .)
    DO              reduce using rule 70 (entire_variable -> ID .)
    CIRCUMFLEX      reduce using rule 70 (entire_variable -> ID .)
    LBRACKET        reduce using rule 70 (entire_variable -> ID .)


state 107

    (86) field_designator -> record_variable DOT . ID

    ID              shift and go to state 151


state 108

    (258) while_statement -> WHILE expression . DO statement

    DO              shift and go to state 152


state 109

    (75) expression -> simple_expression .
    (76) expression -> simple_expression . relational_operator simple_expression
    (179) relational_operator -> . EQUAL
    (180) relational_operator -> . DEQUAL
    (181) relational_operator -> . LESS
    (182) relational_operator -> . LESSEQUAL
    (183) relational_operator -> . GREATER
    (184) relational_operator -> . GREATEREQUAL
    (185) relational_operator -> . IN

    DO              reduce using rule 75 (expression -> simple_expression .)
    THEN            reduce using rule 75 (expression -> simple_expression .)
    OF              reduce using rule 75 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 75 (expression -> simple_expression .)
    END             reduce using rule 75 (expression -> simple_expression .)
    UNTIL           reduce using rule 75 (expression -> simple_expression .)
    ELSE            reduce using rule 75 (expression -> simple_expression .)
    COMMA           reduce using rule 75 (expression -> simple_expression .)
    RPAREN          reduce using rule 75 (expression -> simple_expression .)
    RBRACKET        reduce using rule 75 (expression -> simple_expression .)
    TO              reduce using rule 75 (expression -> simple_expression .)
    DOWNTO          reduce using rule 75 (expression -> simple_expression .)
    EQUAL           shift and go to state 154
    DEQUAL          shift and go to state 155
    LESS            shift and go to state 156
    LESSEQUAL       shift and go to state 157
    GREATER         shift and go to state 158
    GREATEREQUAL    shift and go to state 159
    IN              shift and go to state 160

    relational_operator            shift and go to state 153

state 110

    (193) simple_expression -> simple_expression_opt_1 . term simple_expression_1
    (224) term -> . factor term_1
    (77) factor -> . NUMBER
    (78) factor -> . CONSTSTRING
    (79) factor -> . NIL
    (80) factor -> . ID
    (81) factor -> . set
    (82) factor -> . variable
    (83) factor -> . function_designator
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . NOT factor
    (192) set -> . LBRACKET element_list RBRACKET
    (251) variable -> . entire_variable
    (252) variable -> . component_variable
    (253) variable -> . referenced_variable
    (117) function_designator -> . ID function_designator_opt_1
    (70) entire_variable -> . ID
    (37) component_variable -> . indexed_variable
    (38) component_variable -> . field_designator
    (39) component_variable -> . file_buffer
    (178) referenced_variable -> . pointer_variable CIRCUMFLEX
    (132) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (86) field_designator -> . record_variable DOT ID
    (95) file_buffer -> . file_variable CIRCUMFLEX
    (159) pointer_variable -> . variable
    (22) array_variable -> . variable
    (177) record_variable -> . variable
    (98) file_variable -> . variable

    NUMBER          shift and go to state 163
    CONSTSTRING     shift and go to state 164
    NIL             shift and go to state 165
    ID              shift and go to state 166
    LPAREN          shift and go to state 170
    NOT             shift and go to state 171
    LBRACKET        shift and go to state 172

    term                           shift and go to state 161
    factor                         shift and go to state 162
    set                            shift and go to state 167
    variable                       shift and go to state 168
    function_designator            shift and go to state 169
    entire_variable                shift and go to state 66
    component_variable             shift and go to state 67
    referenced_variable            shift and go to state 68
    indexed_variable               shift and go to state 74
    field_designator               shift and go to state 75
    file_buffer                    shift and go to state 76
    pointer_variable               shift and go to state 77
    array_variable                 shift and go to state 78
    record_variable                shift and go to state 65
    file_variable                  shift and go to state 79

state 111

    (196) simple_expression_opt_1 -> PLUS .

    NUMBER          reduce using rule 196 (simple_expression_opt_1 -> PLUS .)
    CONSTSTRING     reduce using rule 196 (simple_expression_opt_1 -> PLUS .)
    NIL             reduce using rule 196 (simple_expression_opt_1 -> PLUS .)
    ID              reduce using rule 196 (simple_expression_opt_1 -> PLUS .)
    LPAREN          reduce using rule 196 (simple_expression_opt_1 -> PLUS .)
    NOT             reduce using rule 196 (simple_expression_opt_1 -> PLUS .)
    LBRACKET        reduce using rule 196 (simple_expression_opt_1 -> PLUS .)


state 112

    (197) simple_expression_opt_1 -> MINUS .

    NUMBER          reduce using rule 197 (simple_expression_opt_1 -> MINUS .)
    CONSTSTRING     reduce using rule 197 (simple_expression_opt_1 -> MINUS .)
    NIL             reduce using rule 197 (simple_expression_opt_1 -> MINUS .)
    ID              reduce using rule 197 (simple_expression_opt_1 -> MINUS .)
    LPAREN          reduce using rule 197 (simple_expression_opt_1 -> MINUS .)
    NOT             reduce using rule 197 (simple_expression_opt_1 -> MINUS .)
    LBRACKET        reduce using rule 197 (simple_expression_opt_1 -> MINUS .)


state 113

    (198) simple_expression_opt_1 -> empty .

    NUMBER          reduce using rule 198 (simple_expression_opt_1 -> empty .)
    CONSTSTRING     reduce using rule 198 (simple_expression_opt_1 -> empty .)
    NIL             reduce using rule 198 (simple_expression_opt_1 -> empty .)
    ID              reduce using rule 198 (simple_expression_opt_1 -> empty .)
    LPAREN          reduce using rule 198 (simple_expression_opt_1 -> empty .)
    NOT             reduce using rule 198 (simple_expression_opt_1 -> empty .)
    LBRACKET        reduce using rule 198 (simple_expression_opt_1 -> empty .)


state 114

    (186) repeat_statement -> REPEAT statement_sequence . UNTIL expression

    UNTIL           shift and go to state 173


state 115

    (103) for_statement -> FOR ID . ASSIGN initial_expression for_statement_opt_1 final_expression DO statement

    ASSIGN          shift and go to state 174


state 116

    (128) if_statement -> IF expression . THEN statement if_statement_opt_1

    THEN            shift and go to state 175


state 117

    (32) case_statement -> CASE expression . OF case_element case_statement_1 case_statement_opt END

    OF              shift and go to state 176


state 118

    (178) referenced_variable -> pointer_variable CIRCUMFLEX .

    ASSIGN          reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    CIRCUMFLEX      reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    LBRACKET        reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    DOT             reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    COMMA           reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    DO              reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    RPAREN          reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    TIMES           reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    DIVIDE          reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    MODULUS         reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    AND             reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    PLUS            reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    MINUS           reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    OR              reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    EQUAL           reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    DEQUAL          reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    LESS            reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    LESSEQUAL       reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    GREATER         reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    GREATEREQUAL    reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    IN              reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    THEN            reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    OF              reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    SEMICOLON       reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    END             reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    UNTIL           reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    ELSE            reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    RBRACKET        reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    TO              reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)
    DOWNTO          reduce using rule 178 (referenced_variable -> pointer_variable CIRCUMFLEX .)


state 119

    (132) indexed_variable -> array_variable LBRACKET . expression_list RBRACKET
    (72) expression_list -> . expression expression_list_1
    (75) expression -> . simple_expression
    (76) expression -> . simple_expression relational_operator simple_expression
    (193) simple_expression -> . simple_expression_opt_1 term simple_expression_1
    (196) simple_expression_opt_1 -> . PLUS
    (197) simple_expression_opt_1 -> . MINUS
    (198) simple_expression_opt_1 -> . empty
    (262) empty -> .

    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NUMBER          reduce using rule 262 (empty -> .)
    CONSTSTRING     reduce using rule 262 (empty -> .)
    NIL             reduce using rule 262 (empty -> .)
    ID              reduce using rule 262 (empty -> .)
    LPAREN          reduce using rule 262 (empty -> .)
    NOT             reduce using rule 262 (empty -> .)
    LBRACKET        reduce using rule 262 (empty -> .)

    expression_list                shift and go to state 177
    expression                     shift and go to state 178
    simple_expression              shift and go to state 109
    simple_expression_opt_1        shift and go to state 110
    empty                          shift and go to state 113

state 120

    (95) file_buffer -> file_variable CIRCUMFLEX .

    ASSIGN          reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    CIRCUMFLEX      reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    LBRACKET        reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    DOT             reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    COMMA           reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    DO              reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    RPAREN          reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    TIMES           reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    DIVIDE          reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    MODULUS         reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    AND             reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    PLUS            reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    MINUS           reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    OR              reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    EQUAL           reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    DEQUAL          reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    LESS            reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    LESSEQUAL       reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    GREATER         reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    GREATEREQUAL    reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    IN              reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    THEN            reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    OF              reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    SEMICOLON       reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    END             reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    UNTIL           reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    ELSE            reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    RBRACKET        reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    TO              reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)
    DOWNTO          reduce using rule 95 (file_buffer -> file_variable CIRCUMFLEX .)


state 121

    (246) variable_declaration_part -> VAR variable_declaration . SEMICOLON variable_declaration_part_1

    SEMICOLON       shift and go to state 179


state 122

    (249) variable_declaration -> identifier_list . COLON type

    COLON           shift and go to state 180


state 123

    (227) type_definition_part -> TYPE type_definition SEMICOLON . type_definition_part_1
    (228) type_definition_part_1 -> . type_definition SEMICOLON type_definition_part_1
    (229) type_definition_part_1 -> . empty
    (230) type_definition -> . ID EQUAL type
    (262) empty -> .

    ID              shift and go to state 86
    VAR             reduce using rule 262 (empty -> .)
    BEGIN           reduce using rule 262 (empty -> .)

    type_definition                shift and go to state 181
    type_definition_part_1         shift and go to state 182
    empty                          shift and go to state 183

state 124

    (230) type_definition -> ID EQUAL . type
    (231) type -> . simple_type
    (232) type -> . structured_type
    (233) type -> . pointer_type
    (234) type -> . ID
    (203) simple_type -> . subrange_type
    (204) simple_type -> . enumerated_type
    (218) structured_type -> . structered_type_opt_1 unpacked_structured_type
    (158) pointer_type -> . CIRCUMFLEX ID
    (221) subrange_type -> . lower_bound DOT DOT upper_bound
    (71) enumerated_type -> . LPAREN identifier_list RPAREN
    (219) structered_type_opt_1 -> . PACKED
    (220) structered_type_opt_1 -> . empty
    (139) lower_bound -> . constant
    (262) empty -> .
    (49) constant -> . constant_opt_sign ID
    (50) constant -> . constant_opt_sign number
    (51) constant -> . CONSTSTRING
    (52) constant_opt_sign -> . PLUS
    (53) constant_opt_sign -> . MINUS
    (54) constant_opt_sign -> . empty

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 184
    CIRCUMFLEX      shift and go to state 192
    LPAREN          shift and go to state 194
    PACKED          shift and go to state 195
    ARRAY           reduce using rule 262 (empty -> .)
    RECORD          reduce using rule 262 (empty -> .)
    SET             reduce using rule 262 (empty -> .)
    FILE            reduce using rule 262 (empty -> .)
    NUMBER          reduce using rule 262 (empty -> .)
    CONSTSTRING     shift and go to state 130
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132

  ! ID              [ reduce using rule 262 (empty -> .) ]

    type                           shift and go to state 185
    simple_type                    shift and go to state 186
    structured_type                shift and go to state 187
    pointer_type                   shift and go to state 188
    subrange_type                  shift and go to state 189
    enumerated_type                shift and go to state 190
    structered_type_opt_1          shift and go to state 191
    lower_bound                    shift and go to state 193
    empty                          shift and go to state 196
    constant                       shift and go to state 197
    constant_opt_sign              shift and go to state 129

state 125

    (46) constant_definition_part_1 -> constant_definition . SEMICOLON constant_definition_part_1

    SEMICOLON       shift and go to state 198


state 126

    (45) constant_definition_part -> CONST constant_definition SEMICOLON constant_definition_part_1 .

    TYPE            reduce using rule 45 (constant_definition_part -> CONST constant_definition SEMICOLON constant_definition_part_1 .)
    VAR             reduce using rule 45 (constant_definition_part -> CONST constant_definition SEMICOLON constant_definition_part_1 .)
    BEGIN           reduce using rule 45 (constant_definition_part -> CONST constant_definition SEMICOLON constant_definition_part_1 .)


state 127

    (47) constant_definition_part_1 -> empty .

    TYPE            reduce using rule 47 (constant_definition_part_1 -> empty .)
    VAR             reduce using rule 47 (constant_definition_part_1 -> empty .)
    BEGIN           reduce using rule 47 (constant_definition_part_1 -> empty .)


state 128

    (48) constant_definition -> ID EQUAL constant .

    SEMICOLON       reduce using rule 48 (constant_definition -> ID EQUAL constant .)


state 129

    (49) constant -> constant_opt_sign . ID
    (50) constant -> constant_opt_sign . number
    (144) number -> . integer
    (145) number -> . real_number
    (134) integer -> . NUMBER
    (174) real_number -> . NUMBER

    ID              shift and go to state 199
    NUMBER          shift and go to state 203

    number                         shift and go to state 200
    integer                        shift and go to state 201
    real_number                    shift and go to state 202

state 130

    (51) constant -> CONSTSTRING .

    SEMICOLON       reduce using rule 51 (constant -> CONSTSTRING .)
    DOT             reduce using rule 51 (constant -> CONSTSTRING .)
    COMMA           reduce using rule 51 (constant -> CONSTSTRING .)
    COLON           reduce using rule 51 (constant -> CONSTSTRING .)
    RBRACKET        reduce using rule 51 (constant -> CONSTSTRING .)
    END             reduce using rule 51 (constant -> CONSTSTRING .)
    RPAREN          reduce using rule 51 (constant -> CONSTSTRING .)


state 131

    (52) constant_opt_sign -> PLUS .

    ID              reduce using rule 52 (constant_opt_sign -> PLUS .)
    NUMBER          reduce using rule 52 (constant_opt_sign -> PLUS .)


state 132

    (53) constant_opt_sign -> MINUS .

    ID              reduce using rule 53 (constant_opt_sign -> MINUS .)
    NUMBER          reduce using rule 53 (constant_opt_sign -> MINUS .)


state 133

    (54) constant_opt_sign -> empty .

    ID              reduce using rule 54 (constant_opt_sign -> empty .)
    NUMBER          reduce using rule 54 (constant_opt_sign -> empty .)


state 134

    (136) label_declaration_part_1 -> SEMICOLON label label_declaration_part_1 .

    SEMICOLON       reduce using rule 136 (label_declaration_part_1 -> SEMICOLON label label_declaration_part_1 .)


state 135

    (126) identifier_list_1 -> COMMA ID . identifier_list_1
    (126) identifier_list_1 -> . COMMA ID identifier_list_1
    (127) identifier_list_1 -> . empty
    (262) empty -> .

    COMMA           shift and go to state 93
    RPAREN          reduce using rule 262 (empty -> .)
    COLON           reduce using rule 262 (empty -> .)

    identifier_list_1              shift and go to state 204
    empty                          shift and go to state 94

state 136

    (207) statement_sequence_1 -> SEMICOLON statement statement_sequence_1 .

    END             reduce using rule 207 (statement_sequence_1 -> SEMICOLON statement statement_sequence_1 .)
    UNTIL           reduce using rule 207 (statement_sequence_1 -> SEMICOLON statement statement_sequence_1 .)


state 137

    (23) assignment_statement -> variable ASSIGN expression .

    SEMICOLON       reduce using rule 23 (assignment_statement -> variable ASSIGN expression .)
    END             reduce using rule 23 (assignment_statement -> variable ASSIGN expression .)
    UNTIL           reduce using rule 23 (assignment_statement -> variable ASSIGN expression .)
    ELSE            reduce using rule 23 (assignment_statement -> variable ASSIGN expression .)


state 138

    (24) assignment_statement -> ID ASSIGN expression .

    SEMICOLON       reduce using rule 24 (assignment_statement -> ID ASSIGN expression .)
    END             reduce using rule 24 (assignment_statement -> ID ASSIGN expression .)
    UNTIL           reduce using rule 24 (assignment_statement -> ID ASSIGN expression .)
    ELSE            reduce using rule 24 (assignment_statement -> ID ASSIGN expression .)


state 139

    (6) actual_parameter_list -> LPAREN actual_parameter . actual_parameter_list_1 RPAREN
    (7) actual_parameter_list_1 -> . COMMA actual_parameter actual_parameter_list_1
    (8) actual_parameter_list_1 -> . empty
    (262) empty -> .

    COMMA           shift and go to state 206
    RPAREN          reduce using rule 262 (empty -> .)

    actual_parameter_list_1        shift and go to state 205
    empty                          shift and go to state 207

state 140

    (9) actual_parameter -> actual_value .

    COMMA           reduce using rule 9 (actual_parameter -> actual_value .)
    RPAREN          reduce using rule 9 (actual_parameter -> actual_value .)


state 141

    (10) actual_parameter -> actual_variable .

    COMMA           reduce using rule 10 (actual_parameter -> actual_variable .)
    RPAREN          reduce using rule 10 (actual_parameter -> actual_variable .)


state 142

    (11) actual_parameter -> actual_function .

    COMMA           reduce using rule 11 (actual_parameter -> actual_function .)
    RPAREN          reduce using rule 11 (actual_parameter -> actual_function .)


state 143

    (12) actual_parameter -> actual_procedure .

    COMMA           reduce using rule 12 (actual_parameter -> actual_procedure .)
    RPAREN          reduce using rule 12 (actual_parameter -> actual_procedure .)


state 144

    (14) actual_value -> expression .

    COMMA           reduce using rule 14 (actual_value -> expression .)
    RPAREN          reduce using rule 14 (actual_value -> expression .)


state 145

    (15) actual_variable -> variable .
    (159) pointer_variable -> variable .
    (22) array_variable -> variable .
    (177) record_variable -> variable .
    (98) file_variable -> variable .

  ! reduce/reduce conflict for CIRCUMFLEX resolved using rule 98 (file_variable -> variable .)
    COMMA           reduce using rule 15 (actual_variable -> variable .)
    RPAREN          reduce using rule 15 (actual_variable -> variable .)
    LBRACKET        reduce using rule 22 (array_variable -> variable .)
    DOT             reduce using rule 177 (record_variable -> variable .)
    CIRCUMFLEX      reduce using rule 98 (file_variable -> variable .)

  ! CIRCUMFLEX      [ reduce using rule 159 (pointer_variable -> variable .) ]


state 146

    (5) actual_function -> ID .
    (13) actual_procedure -> ID .
    (70) entire_variable -> ID .

  ! reduce/reduce conflict for COMMA resolved using rule 5 (actual_function -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 5 (actual_function -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 5 (actual_function -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 5 (actual_function -> ID .)
    COMMA           reduce using rule 5 (actual_function -> ID .)
    RPAREN          reduce using rule 5 (actual_function -> ID .)
    CIRCUMFLEX      reduce using rule 70 (entire_variable -> ID .)
    LBRACKET        reduce using rule 70 (entire_variable -> ID .)
    DOT             reduce using rule 70 (entire_variable -> ID .)

  ! COMMA           [ reduce using rule 13 (actual_procedure -> ID .) ]
  ! RPAREN          [ reduce using rule 13 (actual_procedure -> ID .) ]
  ! COMMA           [ reduce using rule 70 (entire_variable -> ID .) ]
  ! RPAREN          [ reduce using rule 70 (entire_variable -> ID .) ]


state 147

    (40) compound_statement -> BEGIN statement_sequence END .

    SEMICOLON       reduce using rule 40 (compound_statement -> BEGIN statement_sequence END .)
    END             reduce using rule 40 (compound_statement -> BEGIN statement_sequence END .)
    UNTIL           reduce using rule 40 (compound_statement -> BEGIN statement_sequence END .)
    ELSE            reduce using rule 40 (compound_statement -> BEGIN statement_sequence END .)


state 148

    (259) with_statement -> WITH record_variable with_statement_1 . DO statement

    DO              shift and go to state 208


state 149

    (260) with_statement_1 -> COMMA . record_variable with_statement_1
    (177) record_variable -> . variable
    (251) variable -> . entire_variable
    (252) variable -> . component_variable
    (253) variable -> . referenced_variable
    (70) entire_variable -> . ID
    (37) component_variable -> . indexed_variable
    (38) component_variable -> . field_designator
    (39) component_variable -> . file_buffer
    (178) referenced_variable -> . pointer_variable CIRCUMFLEX
    (132) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (86) field_designator -> . record_variable DOT ID
    (95) file_buffer -> . file_variable CIRCUMFLEX
    (159) pointer_variable -> . variable
    (22) array_variable -> . variable
    (98) file_variable -> . variable

    ID              shift and go to state 106

    record_variable                shift and go to state 209
    variable                       shift and go to state 105
    entire_variable                shift and go to state 66
    component_variable             shift and go to state 67
    referenced_variable            shift and go to state 68
    indexed_variable               shift and go to state 74
    field_designator               shift and go to state 75
    file_buffer                    shift and go to state 76
    pointer_variable               shift and go to state 77
    array_variable                 shift and go to state 78
    file_variable                  shift and go to state 79

state 150

    (261) with_statement_1 -> empty .

    DO              reduce using rule 261 (with_statement_1 -> empty .)


state 151

    (86) field_designator -> record_variable DOT ID .

    ASSIGN          reduce using rule 86 (field_designator -> record_variable DOT ID .)
    CIRCUMFLEX      reduce using rule 86 (field_designator -> record_variable DOT ID .)
    LBRACKET        reduce using rule 86 (field_designator -> record_variable DOT ID .)
    DOT             reduce using rule 86 (field_designator -> record_variable DOT ID .)
    COMMA           reduce using rule 86 (field_designator -> record_variable DOT ID .)
    DO              reduce using rule 86 (field_designator -> record_variable DOT ID .)
    RPAREN          reduce using rule 86 (field_designator -> record_variable DOT ID .)
    TIMES           reduce using rule 86 (field_designator -> record_variable DOT ID .)
    DIVIDE          reduce using rule 86 (field_designator -> record_variable DOT ID .)
    MODULUS         reduce using rule 86 (field_designator -> record_variable DOT ID .)
    AND             reduce using rule 86 (field_designator -> record_variable DOT ID .)
    PLUS            reduce using rule 86 (field_designator -> record_variable DOT ID .)
    MINUS           reduce using rule 86 (field_designator -> record_variable DOT ID .)
    OR              reduce using rule 86 (field_designator -> record_variable DOT ID .)
    EQUAL           reduce using rule 86 (field_designator -> record_variable DOT ID .)
    DEQUAL          reduce using rule 86 (field_designator -> record_variable DOT ID .)
    LESS            reduce using rule 86 (field_designator -> record_variable DOT ID .)
    LESSEQUAL       reduce using rule 86 (field_designator -> record_variable DOT ID .)
    GREATER         reduce using rule 86 (field_designator -> record_variable DOT ID .)
    GREATEREQUAL    reduce using rule 86 (field_designator -> record_variable DOT ID .)
    IN              reduce using rule 86 (field_designator -> record_variable DOT ID .)
    THEN            reduce using rule 86 (field_designator -> record_variable DOT ID .)
    OF              reduce using rule 86 (field_designator -> record_variable DOT ID .)
    SEMICOLON       reduce using rule 86 (field_designator -> record_variable DOT ID .)
    END             reduce using rule 86 (field_designator -> record_variable DOT ID .)
    UNTIL           reduce using rule 86 (field_designator -> record_variable DOT ID .)
    ELSE            reduce using rule 86 (field_designator -> record_variable DOT ID .)
    RBRACKET        reduce using rule 86 (field_designator -> record_variable DOT ID .)
    TO              reduce using rule 86 (field_designator -> record_variable DOT ID .)
    DOWNTO          reduce using rule 86 (field_designator -> record_variable DOT ID .)


state 152

    (258) while_statement -> WHILE expression DO . statement
    (209) statement -> . statement_opt_1 statement_1
    (212) statement_opt_1 -> . LABEL COLON
    (213) statement_opt_1 -> . empty
    (262) empty -> .

    LABEL           shift and go to state 26
    ID              reduce using rule 262 (empty -> .)
    GOTO            reduce using rule 262 (empty -> .)
    BEGIN           reduce using rule 262 (empty -> .)
    WITH            reduce using rule 262 (empty -> .)
    WHILE           reduce using rule 262 (empty -> .)
    REPEAT          reduce using rule 262 (empty -> .)
    FOR             reduce using rule 262 (empty -> .)
    IF              reduce using rule 262 (empty -> .)
    CASE            reduce using rule 262 (empty -> .)
    SEMICOLON       reduce using rule 262 (empty -> .)
    END             reduce using rule 262 (empty -> .)
    UNTIL           reduce using rule 262 (empty -> .)
    ELSE            reduce using rule 262 (empty -> .)

    statement                      shift and go to state 210
    statement_opt_1                shift and go to state 25
    empty                          shift and go to state 27

state 153

    (76) expression -> simple_expression relational_operator . simple_expression
    (193) simple_expression -> . simple_expression_opt_1 term simple_expression_1
    (196) simple_expression_opt_1 -> . PLUS
    (197) simple_expression_opt_1 -> . MINUS
    (198) simple_expression_opt_1 -> . empty
    (262) empty -> .

    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NUMBER          reduce using rule 262 (empty -> .)
    CONSTSTRING     reduce using rule 262 (empty -> .)
    NIL             reduce using rule 262 (empty -> .)
    ID              reduce using rule 262 (empty -> .)
    LPAREN          reduce using rule 262 (empty -> .)
    NOT             reduce using rule 262 (empty -> .)
    LBRACKET        reduce using rule 262 (empty -> .)

    simple_expression              shift and go to state 211
    simple_expression_opt_1        shift and go to state 110
    empty                          shift and go to state 113

state 154

    (179) relational_operator -> EQUAL .

    PLUS            reduce using rule 179 (relational_operator -> EQUAL .)
    MINUS           reduce using rule 179 (relational_operator -> EQUAL .)
    NUMBER          reduce using rule 179 (relational_operator -> EQUAL .)
    CONSTSTRING     reduce using rule 179 (relational_operator -> EQUAL .)
    NIL             reduce using rule 179 (relational_operator -> EQUAL .)
    ID              reduce using rule 179 (relational_operator -> EQUAL .)
    LPAREN          reduce using rule 179 (relational_operator -> EQUAL .)
    NOT             reduce using rule 179 (relational_operator -> EQUAL .)
    LBRACKET        reduce using rule 179 (relational_operator -> EQUAL .)


state 155

    (180) relational_operator -> DEQUAL .

    PLUS            reduce using rule 180 (relational_operator -> DEQUAL .)
    MINUS           reduce using rule 180 (relational_operator -> DEQUAL .)
    NUMBER          reduce using rule 180 (relational_operator -> DEQUAL .)
    CONSTSTRING     reduce using rule 180 (relational_operator -> DEQUAL .)
    NIL             reduce using rule 180 (relational_operator -> DEQUAL .)
    ID              reduce using rule 180 (relational_operator -> DEQUAL .)
    LPAREN          reduce using rule 180 (relational_operator -> DEQUAL .)
    NOT             reduce using rule 180 (relational_operator -> DEQUAL .)
    LBRACKET        reduce using rule 180 (relational_operator -> DEQUAL .)


state 156

    (181) relational_operator -> LESS .

    PLUS            reduce using rule 181 (relational_operator -> LESS .)
    MINUS           reduce using rule 181 (relational_operator -> LESS .)
    NUMBER          reduce using rule 181 (relational_operator -> LESS .)
    CONSTSTRING     reduce using rule 181 (relational_operator -> LESS .)
    NIL             reduce using rule 181 (relational_operator -> LESS .)
    ID              reduce using rule 181 (relational_operator -> LESS .)
    LPAREN          reduce using rule 181 (relational_operator -> LESS .)
    NOT             reduce using rule 181 (relational_operator -> LESS .)
    LBRACKET        reduce using rule 181 (relational_operator -> LESS .)


state 157

    (182) relational_operator -> LESSEQUAL .

    PLUS            reduce using rule 182 (relational_operator -> LESSEQUAL .)
    MINUS           reduce using rule 182 (relational_operator -> LESSEQUAL .)
    NUMBER          reduce using rule 182 (relational_operator -> LESSEQUAL .)
    CONSTSTRING     reduce using rule 182 (relational_operator -> LESSEQUAL .)
    NIL             reduce using rule 182 (relational_operator -> LESSEQUAL .)
    ID              reduce using rule 182 (relational_operator -> LESSEQUAL .)
    LPAREN          reduce using rule 182 (relational_operator -> LESSEQUAL .)
    NOT             reduce using rule 182 (relational_operator -> LESSEQUAL .)
    LBRACKET        reduce using rule 182 (relational_operator -> LESSEQUAL .)


state 158

    (183) relational_operator -> GREATER .

    PLUS            reduce using rule 183 (relational_operator -> GREATER .)
    MINUS           reduce using rule 183 (relational_operator -> GREATER .)
    NUMBER          reduce using rule 183 (relational_operator -> GREATER .)
    CONSTSTRING     reduce using rule 183 (relational_operator -> GREATER .)
    NIL             reduce using rule 183 (relational_operator -> GREATER .)
    ID              reduce using rule 183 (relational_operator -> GREATER .)
    LPAREN          reduce using rule 183 (relational_operator -> GREATER .)
    NOT             reduce using rule 183 (relational_operator -> GREATER .)
    LBRACKET        reduce using rule 183 (relational_operator -> GREATER .)


state 159

    (184) relational_operator -> GREATEREQUAL .

    PLUS            reduce using rule 184 (relational_operator -> GREATEREQUAL .)
    MINUS           reduce using rule 184 (relational_operator -> GREATEREQUAL .)
    NUMBER          reduce using rule 184 (relational_operator -> GREATEREQUAL .)
    CONSTSTRING     reduce using rule 184 (relational_operator -> GREATEREQUAL .)
    NIL             reduce using rule 184 (relational_operator -> GREATEREQUAL .)
    ID              reduce using rule 184 (relational_operator -> GREATEREQUAL .)
    LPAREN          reduce using rule 184 (relational_operator -> GREATEREQUAL .)
    NOT             reduce using rule 184 (relational_operator -> GREATEREQUAL .)
    LBRACKET        reduce using rule 184 (relational_operator -> GREATEREQUAL .)


state 160

    (185) relational_operator -> IN .

    PLUS            reduce using rule 185 (relational_operator -> IN .)
    MINUS           reduce using rule 185 (relational_operator -> IN .)
    NUMBER          reduce using rule 185 (relational_operator -> IN .)
    CONSTSTRING     reduce using rule 185 (relational_operator -> IN .)
    NIL             reduce using rule 185 (relational_operator -> IN .)
    ID              reduce using rule 185 (relational_operator -> IN .)
    LPAREN          reduce using rule 185 (relational_operator -> IN .)
    NOT             reduce using rule 185 (relational_operator -> IN .)
    LBRACKET        reduce using rule 185 (relational_operator -> IN .)


state 161

    (193) simple_expression -> simple_expression_opt_1 term . simple_expression_1
    (194) simple_expression_1 -> . addition_operator term simple_expression_1
    (195) simple_expression_1 -> . empty
    (16) addition_operator -> . PLUS
    (17) addition_operator -> . MINUS
    (18) addition_operator -> . OR
    (262) empty -> .

    PLUS            shift and go to state 215
    MINUS           shift and go to state 216
    OR              shift and go to state 217
    EQUAL           reduce using rule 262 (empty -> .)
    DEQUAL          reduce using rule 262 (empty -> .)
    LESS            reduce using rule 262 (empty -> .)
    LESSEQUAL       reduce using rule 262 (empty -> .)
    GREATER         reduce using rule 262 (empty -> .)
    GREATEREQUAL    reduce using rule 262 (empty -> .)
    IN              reduce using rule 262 (empty -> .)
    DO              reduce using rule 262 (empty -> .)
    THEN            reduce using rule 262 (empty -> .)
    OF              reduce using rule 262 (empty -> .)
    SEMICOLON       reduce using rule 262 (empty -> .)
    END             reduce using rule 262 (empty -> .)
    UNTIL           reduce using rule 262 (empty -> .)
    ELSE            reduce using rule 262 (empty -> .)
    COMMA           reduce using rule 262 (empty -> .)
    RPAREN          reduce using rule 262 (empty -> .)
    RBRACKET        reduce using rule 262 (empty -> .)
    TO              reduce using rule 262 (empty -> .)
    DOWNTO          reduce using rule 262 (empty -> .)

    simple_expression_1            shift and go to state 212
    addition_operator              shift and go to state 213
    empty                          shift and go to state 214

state 162

    (224) term -> factor . term_1
    (225) term_1 -> . multiplication_operator factor term_1
    (226) term_1 -> . empty
    (140) multiplication_operator -> . TIMES
    (141) multiplication_operator -> . DIVIDE
    (142) multiplication_operator -> . MODULUS
    (143) multiplication_operator -> . AND
    (262) empty -> .

    TIMES           shift and go to state 221
    DIVIDE          shift and go to state 222
    MODULUS         shift and go to state 223
    AND             shift and go to state 224
    PLUS            reduce using rule 262 (empty -> .)
    MINUS           reduce using rule 262 (empty -> .)
    OR              reduce using rule 262 (empty -> .)
    EQUAL           reduce using rule 262 (empty -> .)
    DEQUAL          reduce using rule 262 (empty -> .)
    LESS            reduce using rule 262 (empty -> .)
    LESSEQUAL       reduce using rule 262 (empty -> .)
    GREATER         reduce using rule 262 (empty -> .)
    GREATEREQUAL    reduce using rule 262 (empty -> .)
    IN              reduce using rule 262 (empty -> .)
    DO              reduce using rule 262 (empty -> .)
    THEN            reduce using rule 262 (empty -> .)
    OF              reduce using rule 262 (empty -> .)
    SEMICOLON       reduce using rule 262 (empty -> .)
    END             reduce using rule 262 (empty -> .)
    UNTIL           reduce using rule 262 (empty -> .)
    ELSE            reduce using rule 262 (empty -> .)
    COMMA           reduce using rule 262 (empty -> .)
    RPAREN          reduce using rule 262 (empty -> .)
    RBRACKET        reduce using rule 262 (empty -> .)
    TO              reduce using rule 262 (empty -> .)
    DOWNTO          reduce using rule 262 (empty -> .)

    term_1                         shift and go to state 218
    multiplication_operator        shift and go to state 219
    empty                          shift and go to state 220

state 163

    (77) factor -> NUMBER .

    TIMES           reduce using rule 77 (factor -> NUMBER .)
    DIVIDE          reduce using rule 77 (factor -> NUMBER .)
    MODULUS         reduce using rule 77 (factor -> NUMBER .)
    AND             reduce using rule 77 (factor -> NUMBER .)
    PLUS            reduce using rule 77 (factor -> NUMBER .)
    MINUS           reduce using rule 77 (factor -> NUMBER .)
    OR              reduce using rule 77 (factor -> NUMBER .)
    EQUAL           reduce using rule 77 (factor -> NUMBER .)
    DEQUAL          reduce using rule 77 (factor -> NUMBER .)
    LESS            reduce using rule 77 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 77 (factor -> NUMBER .)
    GREATER         reduce using rule 77 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 77 (factor -> NUMBER .)
    IN              reduce using rule 77 (factor -> NUMBER .)
    DO              reduce using rule 77 (factor -> NUMBER .)
    THEN            reduce using rule 77 (factor -> NUMBER .)
    OF              reduce using rule 77 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 77 (factor -> NUMBER .)
    END             reduce using rule 77 (factor -> NUMBER .)
    UNTIL           reduce using rule 77 (factor -> NUMBER .)
    ELSE            reduce using rule 77 (factor -> NUMBER .)
    COMMA           reduce using rule 77 (factor -> NUMBER .)
    RPAREN          reduce using rule 77 (factor -> NUMBER .)
    RBRACKET        reduce using rule 77 (factor -> NUMBER .)
    TO              reduce using rule 77 (factor -> NUMBER .)
    DOWNTO          reduce using rule 77 (factor -> NUMBER .)


state 164

    (78) factor -> CONSTSTRING .

    TIMES           reduce using rule 78 (factor -> CONSTSTRING .)
    DIVIDE          reduce using rule 78 (factor -> CONSTSTRING .)
    MODULUS         reduce using rule 78 (factor -> CONSTSTRING .)
    AND             reduce using rule 78 (factor -> CONSTSTRING .)
    PLUS            reduce using rule 78 (factor -> CONSTSTRING .)
    MINUS           reduce using rule 78 (factor -> CONSTSTRING .)
    OR              reduce using rule 78 (factor -> CONSTSTRING .)
    EQUAL           reduce using rule 78 (factor -> CONSTSTRING .)
    DEQUAL          reduce using rule 78 (factor -> CONSTSTRING .)
    LESS            reduce using rule 78 (factor -> CONSTSTRING .)
    LESSEQUAL       reduce using rule 78 (factor -> CONSTSTRING .)
    GREATER         reduce using rule 78 (factor -> CONSTSTRING .)
    GREATEREQUAL    reduce using rule 78 (factor -> CONSTSTRING .)
    IN              reduce using rule 78 (factor -> CONSTSTRING .)
    DO              reduce using rule 78 (factor -> CONSTSTRING .)
    THEN            reduce using rule 78 (factor -> CONSTSTRING .)
    OF              reduce using rule 78 (factor -> CONSTSTRING .)
    SEMICOLON       reduce using rule 78 (factor -> CONSTSTRING .)
    END             reduce using rule 78 (factor -> CONSTSTRING .)
    UNTIL           reduce using rule 78 (factor -> CONSTSTRING .)
    ELSE            reduce using rule 78 (factor -> CONSTSTRING .)
    COMMA           reduce using rule 78 (factor -> CONSTSTRING .)
    RPAREN          reduce using rule 78 (factor -> CONSTSTRING .)
    RBRACKET        reduce using rule 78 (factor -> CONSTSTRING .)
    TO              reduce using rule 78 (factor -> CONSTSTRING .)
    DOWNTO          reduce using rule 78 (factor -> CONSTSTRING .)


state 165

    (79) factor -> NIL .

    TIMES           reduce using rule 79 (factor -> NIL .)
    DIVIDE          reduce using rule 79 (factor -> NIL .)
    MODULUS         reduce using rule 79 (factor -> NIL .)
    AND             reduce using rule 79 (factor -> NIL .)
    PLUS            reduce using rule 79 (factor -> NIL .)
    MINUS           reduce using rule 79 (factor -> NIL .)
    OR              reduce using rule 79 (factor -> NIL .)
    EQUAL           reduce using rule 79 (factor -> NIL .)
    DEQUAL          reduce using rule 79 (factor -> NIL .)
    LESS            reduce using rule 79 (factor -> NIL .)
    LESSEQUAL       reduce using rule 79 (factor -> NIL .)
    GREATER         reduce using rule 79 (factor -> NIL .)
    GREATEREQUAL    reduce using rule 79 (factor -> NIL .)
    IN              reduce using rule 79 (factor -> NIL .)
    DO              reduce using rule 79 (factor -> NIL .)
    THEN            reduce using rule 79 (factor -> NIL .)
    OF              reduce using rule 79 (factor -> NIL .)
    SEMICOLON       reduce using rule 79 (factor -> NIL .)
    END             reduce using rule 79 (factor -> NIL .)
    UNTIL           reduce using rule 79 (factor -> NIL .)
    ELSE            reduce using rule 79 (factor -> NIL .)
    COMMA           reduce using rule 79 (factor -> NIL .)
    RPAREN          reduce using rule 79 (factor -> NIL .)
    RBRACKET        reduce using rule 79 (factor -> NIL .)
    TO              reduce using rule 79 (factor -> NIL .)
    DOWNTO          reduce using rule 79 (factor -> NIL .)


state 166

    (80) factor -> ID .
    (117) function_designator -> ID . function_designator_opt_1
    (70) entire_variable -> ID .
    (118) function_designator_opt_1 -> . actual_parameter_list
    (119) function_designator_opt_1 -> . empty
    (6) actual_parameter_list -> . LPAREN actual_parameter actual_parameter_list_1 RPAREN
    (262) empty -> .

  ! reduce/reduce conflict for TIMES resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for MODULUS resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for EQUAL resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for DEQUAL resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for LESS resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for GREATER resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for IN resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for DO resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for THEN resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for OF resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for END resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for UNTIL resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for TO resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for MODULUS resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for EQUAL resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for DEQUAL resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for LESS resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for GREATER resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for IN resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for DO resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for THEN resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for OF resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for END resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for UNTIL resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for TO resolved using rule 70 (entire_variable -> ID .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 70 (entire_variable -> ID .)
    TIMES           reduce using rule 70 (entire_variable -> ID .)
    DIVIDE          reduce using rule 70 (entire_variable -> ID .)
    MODULUS         reduce using rule 70 (entire_variable -> ID .)
    AND             reduce using rule 70 (entire_variable -> ID .)
    PLUS            reduce using rule 70 (entire_variable -> ID .)
    MINUS           reduce using rule 70 (entire_variable -> ID .)
    OR              reduce using rule 70 (entire_variable -> ID .)
    EQUAL           reduce using rule 70 (entire_variable -> ID .)
    DEQUAL          reduce using rule 70 (entire_variable -> ID .)
    LESS            reduce using rule 70 (entire_variable -> ID .)
    LESSEQUAL       reduce using rule 70 (entire_variable -> ID .)
    GREATER         reduce using rule 70 (entire_variable -> ID .)
    GREATEREQUAL    reduce using rule 70 (entire_variable -> ID .)
    IN              reduce using rule 70 (entire_variable -> ID .)
    DO              reduce using rule 70 (entire_variable -> ID .)
    THEN            reduce using rule 70 (entire_variable -> ID .)
    OF              reduce using rule 70 (entire_variable -> ID .)
    SEMICOLON       reduce using rule 70 (entire_variable -> ID .)
    END             reduce using rule 70 (entire_variable -> ID .)
    UNTIL           reduce using rule 70 (entire_variable -> ID .)
    ELSE            reduce using rule 70 (entire_variable -> ID .)
    COMMA           reduce using rule 70 (entire_variable -> ID .)
    RPAREN          reduce using rule 70 (entire_variable -> ID .)
    RBRACKET        reduce using rule 70 (entire_variable -> ID .)
    TO              reduce using rule 70 (entire_variable -> ID .)
    DOWNTO          reduce using rule 70 (entire_variable -> ID .)
    CIRCUMFLEX      reduce using rule 70 (entire_variable -> ID .)
    LBRACKET        reduce using rule 70 (entire_variable -> ID .)
    DOT             reduce using rule 70 (entire_variable -> ID .)
    LPAREN          shift and go to state 101

  ! TIMES           [ reduce using rule 80 (factor -> ID .) ]
  ! DIVIDE          [ reduce using rule 80 (factor -> ID .) ]
  ! MODULUS         [ reduce using rule 80 (factor -> ID .) ]
  ! AND             [ reduce using rule 80 (factor -> ID .) ]
  ! PLUS            [ reduce using rule 80 (factor -> ID .) ]
  ! MINUS           [ reduce using rule 80 (factor -> ID .) ]
  ! OR              [ reduce using rule 80 (factor -> ID .) ]
  ! EQUAL           [ reduce using rule 80 (factor -> ID .) ]
  ! DEQUAL          [ reduce using rule 80 (factor -> ID .) ]
  ! LESS            [ reduce using rule 80 (factor -> ID .) ]
  ! LESSEQUAL       [ reduce using rule 80 (factor -> ID .) ]
  ! GREATER         [ reduce using rule 80 (factor -> ID .) ]
  ! GREATEREQUAL    [ reduce using rule 80 (factor -> ID .) ]
  ! IN              [ reduce using rule 80 (factor -> ID .) ]
  ! DO              [ reduce using rule 80 (factor -> ID .) ]
  ! THEN            [ reduce using rule 80 (factor -> ID .) ]
  ! OF              [ reduce using rule 80 (factor -> ID .) ]
  ! SEMICOLON       [ reduce using rule 80 (factor -> ID .) ]
  ! END             [ reduce using rule 80 (factor -> ID .) ]
  ! UNTIL           [ reduce using rule 80 (factor -> ID .) ]
  ! ELSE            [ reduce using rule 80 (factor -> ID .) ]
  ! COMMA           [ reduce using rule 80 (factor -> ID .) ]
  ! RPAREN          [ reduce using rule 80 (factor -> ID .) ]
  ! RBRACKET        [ reduce using rule 80 (factor -> ID .) ]
  ! TO              [ reduce using rule 80 (factor -> ID .) ]
  ! DOWNTO          [ reduce using rule 80 (factor -> ID .) ]
  ! TIMES           [ reduce using rule 262 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 262 (empty -> .) ]
  ! MODULUS         [ reduce using rule 262 (empty -> .) ]
  ! AND             [ reduce using rule 262 (empty -> .) ]
  ! PLUS            [ reduce using rule 262 (empty -> .) ]
  ! MINUS           [ reduce using rule 262 (empty -> .) ]
  ! OR              [ reduce using rule 262 (empty -> .) ]
  ! EQUAL           [ reduce using rule 262 (empty -> .) ]
  ! DEQUAL          [ reduce using rule 262 (empty -> .) ]
  ! LESS            [ reduce using rule 262 (empty -> .) ]
  ! LESSEQUAL       [ reduce using rule 262 (empty -> .) ]
  ! GREATER         [ reduce using rule 262 (empty -> .) ]
  ! GREATEREQUAL    [ reduce using rule 262 (empty -> .) ]
  ! IN              [ reduce using rule 262 (empty -> .) ]
  ! DO              [ reduce using rule 262 (empty -> .) ]
  ! THEN            [ reduce using rule 262 (empty -> .) ]
  ! OF              [ reduce using rule 262 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 262 (empty -> .) ]
  ! END             [ reduce using rule 262 (empty -> .) ]
  ! UNTIL           [ reduce using rule 262 (empty -> .) ]
  ! ELSE            [ reduce using rule 262 (empty -> .) ]
  ! COMMA           [ reduce using rule 262 (empty -> .) ]
  ! RPAREN          [ reduce using rule 262 (empty -> .) ]
  ! RBRACKET        [ reduce using rule 262 (empty -> .) ]
  ! TO              [ reduce using rule 262 (empty -> .) ]
  ! DOWNTO          [ reduce using rule 262 (empty -> .) ]

    function_designator_opt_1      shift and go to state 225
    actual_parameter_list          shift and go to state 226
    empty                          shift and go to state 227

state 167

    (81) factor -> set .

    TIMES           reduce using rule 81 (factor -> set .)
    DIVIDE          reduce using rule 81 (factor -> set .)
    MODULUS         reduce using rule 81 (factor -> set .)
    AND             reduce using rule 81 (factor -> set .)
    PLUS            reduce using rule 81 (factor -> set .)
    MINUS           reduce using rule 81 (factor -> set .)
    OR              reduce using rule 81 (factor -> set .)
    EQUAL           reduce using rule 81 (factor -> set .)
    DEQUAL          reduce using rule 81 (factor -> set .)
    LESS            reduce using rule 81 (factor -> set .)
    LESSEQUAL       reduce using rule 81 (factor -> set .)
    GREATER         reduce using rule 81 (factor -> set .)
    GREATEREQUAL    reduce using rule 81 (factor -> set .)
    IN              reduce using rule 81 (factor -> set .)
    DO              reduce using rule 81 (factor -> set .)
    THEN            reduce using rule 81 (factor -> set .)
    OF              reduce using rule 81 (factor -> set .)
    SEMICOLON       reduce using rule 81 (factor -> set .)
    END             reduce using rule 81 (factor -> set .)
    UNTIL           reduce using rule 81 (factor -> set .)
    ELSE            reduce using rule 81 (factor -> set .)
    COMMA           reduce using rule 81 (factor -> set .)
    RPAREN          reduce using rule 81 (factor -> set .)
    RBRACKET        reduce using rule 81 (factor -> set .)
    TO              reduce using rule 81 (factor -> set .)
    DOWNTO          reduce using rule 81 (factor -> set .)


state 168

    (82) factor -> variable .
    (159) pointer_variable -> variable .
    (22) array_variable -> variable .
    (177) record_variable -> variable .
    (98) file_variable -> variable .

  ! reduce/reduce conflict for CIRCUMFLEX resolved using rule 98 (file_variable -> variable .)
    TIMES           reduce using rule 82 (factor -> variable .)
    DIVIDE          reduce using rule 82 (factor -> variable .)
    MODULUS         reduce using rule 82 (factor -> variable .)
    AND             reduce using rule 82 (factor -> variable .)
    PLUS            reduce using rule 82 (factor -> variable .)
    MINUS           reduce using rule 82 (factor -> variable .)
    OR              reduce using rule 82 (factor -> variable .)
    EQUAL           reduce using rule 82 (factor -> variable .)
    DEQUAL          reduce using rule 82 (factor -> variable .)
    LESS            reduce using rule 82 (factor -> variable .)
    LESSEQUAL       reduce using rule 82 (factor -> variable .)
    GREATER         reduce using rule 82 (factor -> variable .)
    GREATEREQUAL    reduce using rule 82 (factor -> variable .)
    IN              reduce using rule 82 (factor -> variable .)
    DO              reduce using rule 82 (factor -> variable .)
    THEN            reduce using rule 82 (factor -> variable .)
    OF              reduce using rule 82 (factor -> variable .)
    SEMICOLON       reduce using rule 82 (factor -> variable .)
    END             reduce using rule 82 (factor -> variable .)
    UNTIL           reduce using rule 82 (factor -> variable .)
    ELSE            reduce using rule 82 (factor -> variable .)
    COMMA           reduce using rule 82 (factor -> variable .)
    RPAREN          reduce using rule 82 (factor -> variable .)
    RBRACKET        reduce using rule 82 (factor -> variable .)
    TO              reduce using rule 82 (factor -> variable .)
    DOWNTO          reduce using rule 82 (factor -> variable .)
    LBRACKET        reduce using rule 22 (array_variable -> variable .)
    DOT             reduce using rule 177 (record_variable -> variable .)
    CIRCUMFLEX      reduce using rule 98 (file_variable -> variable .)

  ! CIRCUMFLEX      [ reduce using rule 159 (pointer_variable -> variable .) ]


state 169

    (83) factor -> function_designator .

    TIMES           reduce using rule 83 (factor -> function_designator .)
    DIVIDE          reduce using rule 83 (factor -> function_designator .)
    MODULUS         reduce using rule 83 (factor -> function_designator .)
    AND             reduce using rule 83 (factor -> function_designator .)
    PLUS            reduce using rule 83 (factor -> function_designator .)
    MINUS           reduce using rule 83 (factor -> function_designator .)
    OR              reduce using rule 83 (factor -> function_designator .)
    EQUAL           reduce using rule 83 (factor -> function_designator .)
    DEQUAL          reduce using rule 83 (factor -> function_designator .)
    LESS            reduce using rule 83 (factor -> function_designator .)
    LESSEQUAL       reduce using rule 83 (factor -> function_designator .)
    GREATER         reduce using rule 83 (factor -> function_designator .)
    GREATEREQUAL    reduce using rule 83 (factor -> function_designator .)
    IN              reduce using rule 83 (factor -> function_designator .)
    DO              reduce using rule 83 (factor -> function_designator .)
    THEN            reduce using rule 83 (factor -> function_designator .)
    OF              reduce using rule 83 (factor -> function_designator .)
    SEMICOLON       reduce using rule 83 (factor -> function_designator .)
    END             reduce using rule 83 (factor -> function_designator .)
    UNTIL           reduce using rule 83 (factor -> function_designator .)
    ELSE            reduce using rule 83 (factor -> function_designator .)
    COMMA           reduce using rule 83 (factor -> function_designator .)
    RPAREN          reduce using rule 83 (factor -> function_designator .)
    RBRACKET        reduce using rule 83 (factor -> function_designator .)
    TO              reduce using rule 83 (factor -> function_designator .)
    DOWNTO          reduce using rule 83 (factor -> function_designator .)


state 170

    (84) factor -> LPAREN . expression RPAREN
    (75) expression -> . simple_expression
    (76) expression -> . simple_expression relational_operator simple_expression
    (193) simple_expression -> . simple_expression_opt_1 term simple_expression_1
    (196) simple_expression_opt_1 -> . PLUS
    (197) simple_expression_opt_1 -> . MINUS
    (198) simple_expression_opt_1 -> . empty
    (262) empty -> .

    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NUMBER          reduce using rule 262 (empty -> .)
    CONSTSTRING     reduce using rule 262 (empty -> .)
    NIL             reduce using rule 262 (empty -> .)
    ID              reduce using rule 262 (empty -> .)
    LPAREN          reduce using rule 262 (empty -> .)
    NOT             reduce using rule 262 (empty -> .)
    LBRACKET        reduce using rule 262 (empty -> .)

    expression                     shift and go to state 228
    simple_expression              shift and go to state 109
    simple_expression_opt_1        shift and go to state 110
    empty                          shift and go to state 113

state 171

    (85) factor -> NOT . factor
    (77) factor -> . NUMBER
    (78) factor -> . CONSTSTRING
    (79) factor -> . NIL
    (80) factor -> . ID
    (81) factor -> . set
    (82) factor -> . variable
    (83) factor -> . function_designator
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . NOT factor
    (192) set -> . LBRACKET element_list RBRACKET
    (251) variable -> . entire_variable
    (252) variable -> . component_variable
    (253) variable -> . referenced_variable
    (117) function_designator -> . ID function_designator_opt_1
    (70) entire_variable -> . ID
    (37) component_variable -> . indexed_variable
    (38) component_variable -> . field_designator
    (39) component_variable -> . file_buffer
    (178) referenced_variable -> . pointer_variable CIRCUMFLEX
    (132) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (86) field_designator -> . record_variable DOT ID
    (95) file_buffer -> . file_variable CIRCUMFLEX
    (159) pointer_variable -> . variable
    (22) array_variable -> . variable
    (177) record_variable -> . variable
    (98) file_variable -> . variable

    NUMBER          shift and go to state 163
    CONSTSTRING     shift and go to state 164
    NIL             shift and go to state 165
    ID              shift and go to state 166
    LPAREN          shift and go to state 170
    NOT             shift and go to state 171
    LBRACKET        shift and go to state 172

    factor                         shift and go to state 229
    set                            shift and go to state 167
    variable                       shift and go to state 168
    function_designator            shift and go to state 169
    entire_variable                shift and go to state 66
    component_variable             shift and go to state 67
    referenced_variable            shift and go to state 68
    indexed_variable               shift and go to state 74
    field_designator               shift and go to state 75
    file_buffer                    shift and go to state 76
    pointer_variable               shift and go to state 77
    array_variable                 shift and go to state 78
    record_variable                shift and go to state 65
    file_variable                  shift and go to state 79

state 172

    (192) set -> LBRACKET . element_list RBRACKET
    (65) element_list -> . expression element_list_1
    (66) element_list -> . empty
    (75) expression -> . simple_expression
    (76) expression -> . simple_expression relational_operator simple_expression
    (262) empty -> .
    (193) simple_expression -> . simple_expression_opt_1 term simple_expression_1
    (196) simple_expression_opt_1 -> . PLUS
    (197) simple_expression_opt_1 -> . MINUS
    (198) simple_expression_opt_1 -> . empty

    RBRACKET        reduce using rule 262 (empty -> .)
    NUMBER          reduce using rule 262 (empty -> .)
    CONSTSTRING     reduce using rule 262 (empty -> .)
    NIL             reduce using rule 262 (empty -> .)
    ID              reduce using rule 262 (empty -> .)
    LPAREN          reduce using rule 262 (empty -> .)
    NOT             reduce using rule 262 (empty -> .)
    LBRACKET        reduce using rule 262 (empty -> .)
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112

    element_list                   shift and go to state 230
    expression                     shift and go to state 231
    empty                          shift and go to state 232
    simple_expression              shift and go to state 109
    simple_expression_opt_1        shift and go to state 110

state 173

    (186) repeat_statement -> REPEAT statement_sequence UNTIL . expression
    (75) expression -> . simple_expression
    (76) expression -> . simple_expression relational_operator simple_expression
    (193) simple_expression -> . simple_expression_opt_1 term simple_expression_1
    (196) simple_expression_opt_1 -> . PLUS
    (197) simple_expression_opt_1 -> . MINUS
    (198) simple_expression_opt_1 -> . empty
    (262) empty -> .

    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NUMBER          reduce using rule 262 (empty -> .)
    CONSTSTRING     reduce using rule 262 (empty -> .)
    NIL             reduce using rule 262 (empty -> .)
    ID              reduce using rule 262 (empty -> .)
    LPAREN          reduce using rule 262 (empty -> .)
    NOT             reduce using rule 262 (empty -> .)
    LBRACKET        reduce using rule 262 (empty -> .)

    expression                     shift and go to state 233
    simple_expression              shift and go to state 109
    simple_expression_opt_1        shift and go to state 110
    empty                          shift and go to state 113

state 174

    (103) for_statement -> FOR ID ASSIGN . initial_expression for_statement_opt_1 final_expression DO statement
    (133) initial_expression -> . expression
    (75) expression -> . simple_expression
    (76) expression -> . simple_expression relational_operator simple_expression
    (193) simple_expression -> . simple_expression_opt_1 term simple_expression_1
    (196) simple_expression_opt_1 -> . PLUS
    (197) simple_expression_opt_1 -> . MINUS
    (198) simple_expression_opt_1 -> . empty
    (262) empty -> .

    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NUMBER          reduce using rule 262 (empty -> .)
    CONSTSTRING     reduce using rule 262 (empty -> .)
    NIL             reduce using rule 262 (empty -> .)
    ID              reduce using rule 262 (empty -> .)
    LPAREN          reduce using rule 262 (empty -> .)
    NOT             reduce using rule 262 (empty -> .)
    LBRACKET        reduce using rule 262 (empty -> .)

    initial_expression             shift and go to state 234
    expression                     shift and go to state 235
    simple_expression              shift and go to state 109
    simple_expression_opt_1        shift and go to state 110
    empty                          shift and go to state 113

state 175

    (128) if_statement -> IF expression THEN . statement if_statement_opt_1
    (209) statement -> . statement_opt_1 statement_1
    (212) statement_opt_1 -> . LABEL COLON
    (213) statement_opt_1 -> . empty
    (262) empty -> .

    LABEL           shift and go to state 26
    ID              reduce using rule 262 (empty -> .)
    GOTO            reduce using rule 262 (empty -> .)
    BEGIN           reduce using rule 262 (empty -> .)
    WITH            reduce using rule 262 (empty -> .)
    WHILE           reduce using rule 262 (empty -> .)
    REPEAT          reduce using rule 262 (empty -> .)
    FOR             reduce using rule 262 (empty -> .)
    IF              reduce using rule 262 (empty -> .)
    CASE            reduce using rule 262 (empty -> .)
    SEMICOLON       reduce using rule 262 (empty -> .)
    END             reduce using rule 262 (empty -> .)
    UNTIL           reduce using rule 262 (empty -> .)
    ELSE            reduce using rule 262 (empty -> .)

    statement                      shift and go to state 236
    statement_opt_1                shift and go to state 25
    empty                          shift and go to state 27

state 176

    (32) case_statement -> CASE expression OF . case_element case_statement_1 case_statement_opt END
    (28) case_element -> . case_label_list COLON statement
    (29) case_label_list -> . constant case_label_list_1
    (49) constant -> . constant_opt_sign ID
    (50) constant -> . constant_opt_sign number
    (51) constant -> . CONSTSTRING
    (52) constant_opt_sign -> . PLUS
    (53) constant_opt_sign -> . MINUS
    (54) constant_opt_sign -> . empty
    (262) empty -> .

    CONSTSTRING     shift and go to state 130
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    ID              reduce using rule 262 (empty -> .)
    NUMBER          reduce using rule 262 (empty -> .)

    case_element                   shift and go to state 237
    case_label_list                shift and go to state 238
    constant                       shift and go to state 239
    constant_opt_sign              shift and go to state 129
    empty                          shift and go to state 133

state 177

    (132) indexed_variable -> array_variable LBRACKET expression_list . RBRACKET

    RBRACKET        shift and go to state 240


state 178

    (72) expression_list -> expression . expression_list_1
    (73) expression_list_1 -> . COMMA expression expression_list_1
    (74) expression_list_1 -> . empty
    (262) empty -> .

    COMMA           shift and go to state 242
    RBRACKET        reduce using rule 262 (empty -> .)

    expression_list_1              shift and go to state 241
    empty                          shift and go to state 243

state 179

    (246) variable_declaration_part -> VAR variable_declaration SEMICOLON . variable_declaration_part_1
    (247) variable_declaration_part_1 -> . variable_declaration SEMICOLON variable_declaration_part_1
    (248) variable_declaration_part_1 -> . empty
    (249) variable_declaration -> . identifier_list COLON type
    (262) empty -> .
    (125) identifier_list -> . ID identifier_list_1

    BEGIN           reduce using rule 262 (empty -> .)
    ID              shift and go to state 39

    variable_declaration           shift and go to state 244
    variable_declaration_part_1    shift and go to state 245
    empty                          shift and go to state 246
    identifier_list                shift and go to state 122

state 180

    (249) variable_declaration -> identifier_list COLON . type
    (231) type -> . simple_type
    (232) type -> . structured_type
    (233) type -> . pointer_type
    (234) type -> . ID
    (203) simple_type -> . subrange_type
    (204) simple_type -> . enumerated_type
    (218) structured_type -> . structered_type_opt_1 unpacked_structured_type
    (158) pointer_type -> . CIRCUMFLEX ID
    (221) subrange_type -> . lower_bound DOT DOT upper_bound
    (71) enumerated_type -> . LPAREN identifier_list RPAREN
    (219) structered_type_opt_1 -> . PACKED
    (220) structered_type_opt_1 -> . empty
    (139) lower_bound -> . constant
    (262) empty -> .
    (49) constant -> . constant_opt_sign ID
    (50) constant -> . constant_opt_sign number
    (51) constant -> . CONSTSTRING
    (52) constant_opt_sign -> . PLUS
    (53) constant_opt_sign -> . MINUS
    (54) constant_opt_sign -> . empty

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 184
    CIRCUMFLEX      shift and go to state 192
    LPAREN          shift and go to state 194
    PACKED          shift and go to state 195
    ARRAY           reduce using rule 262 (empty -> .)
    RECORD          reduce using rule 262 (empty -> .)
    SET             reduce using rule 262 (empty -> .)
    FILE            reduce using rule 262 (empty -> .)
    NUMBER          reduce using rule 262 (empty -> .)
    CONSTSTRING     shift and go to state 130
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132

  ! ID              [ reduce using rule 262 (empty -> .) ]

    type                           shift and go to state 247
    simple_type                    shift and go to state 186
    structured_type                shift and go to state 187
    pointer_type                   shift and go to state 188
    subrange_type                  shift and go to state 189
    enumerated_type                shift and go to state 190
    structered_type_opt_1          shift and go to state 191
    lower_bound                    shift and go to state 193
    empty                          shift and go to state 196
    constant                       shift and go to state 197
    constant_opt_sign              shift and go to state 129

state 181

    (228) type_definition_part_1 -> type_definition . SEMICOLON type_definition_part_1

    SEMICOLON       shift and go to state 248


state 182

    (227) type_definition_part -> TYPE type_definition SEMICOLON type_definition_part_1 .

    VAR             reduce using rule 227 (type_definition_part -> TYPE type_definition SEMICOLON type_definition_part_1 .)
    BEGIN           reduce using rule 227 (type_definition_part -> TYPE type_definition SEMICOLON type_definition_part_1 .)


state 183

    (229) type_definition_part_1 -> empty .

    VAR             reduce using rule 229 (type_definition_part_1 -> empty .)
    BEGIN           reduce using rule 229 (type_definition_part_1 -> empty .)


state 184

    (234) type -> ID .

    SEMICOLON       reduce using rule 234 (type -> ID .)
    END             reduce using rule 234 (type -> ID .)
    RPAREN          reduce using rule 234 (type -> ID .)


state 185

    (230) type_definition -> ID EQUAL type .

    SEMICOLON       reduce using rule 230 (type_definition -> ID EQUAL type .)


state 186

    (231) type -> simple_type .

    SEMICOLON       reduce using rule 231 (type -> simple_type .)
    END             reduce using rule 231 (type -> simple_type .)
    RPAREN          reduce using rule 231 (type -> simple_type .)


state 187

    (232) type -> structured_type .

    SEMICOLON       reduce using rule 232 (type -> structured_type .)
    END             reduce using rule 232 (type -> structured_type .)
    RPAREN          reduce using rule 232 (type -> structured_type .)


state 188

    (233) type -> pointer_type .

    SEMICOLON       reduce using rule 233 (type -> pointer_type .)
    END             reduce using rule 233 (type -> pointer_type .)
    RPAREN          reduce using rule 233 (type -> pointer_type .)


state 189

    (203) simple_type -> subrange_type .

    SEMICOLON       reduce using rule 203 (simple_type -> subrange_type .)
    COMMA           reduce using rule 203 (simple_type -> subrange_type .)
    RBRACKET        reduce using rule 203 (simple_type -> subrange_type .)
    END             reduce using rule 203 (simple_type -> subrange_type .)
    RPAREN          reduce using rule 203 (simple_type -> subrange_type .)


state 190

    (204) simple_type -> enumerated_type .

    SEMICOLON       reduce using rule 204 (simple_type -> enumerated_type .)
    COMMA           reduce using rule 204 (simple_type -> enumerated_type .)
    RBRACKET        reduce using rule 204 (simple_type -> enumerated_type .)
    END             reduce using rule 204 (simple_type -> enumerated_type .)
    RPAREN          reduce using rule 204 (simple_type -> enumerated_type .)


state 191

    (218) structured_type -> structered_type_opt_1 . unpacked_structured_type
    (240) unpacked_structured_type -> . array_type
    (241) unpacked_structured_type -> . record_type
    (242) unpacked_structured_type -> . set_type
    (243) unpacked_structured_type -> . file_type
    (19) array_type -> . ARRAY LBRACKET index_type array_type_1 RBRACKET OF element_type
    (176) record_type -> . RECORD field_list END
    (191) set_type -> . SET OF base_type
    (97) file_type -> . FILE OF file_component_type

    ARRAY           shift and go to state 254
    RECORD          shift and go to state 255
    SET             shift and go to state 256
    FILE            shift and go to state 257

    unpacked_structured_type       shift and go to state 249
    array_type                     shift and go to state 250
    record_type                    shift and go to state 251
    set_type                       shift and go to state 252
    file_type                      shift and go to state 253

state 192

    (158) pointer_type -> CIRCUMFLEX . ID

    ID              shift and go to state 258


state 193

    (221) subrange_type -> lower_bound . DOT DOT upper_bound

    DOT             shift and go to state 259


state 194

    (71) enumerated_type -> LPAREN . identifier_list RPAREN
    (125) identifier_list -> . ID identifier_list_1

    ID              shift and go to state 39

    identifier_list                shift and go to state 260

state 195

    (219) structered_type_opt_1 -> PACKED .

    ARRAY           reduce using rule 219 (structered_type_opt_1 -> PACKED .)
    RECORD          reduce using rule 219 (structered_type_opt_1 -> PACKED .)
    SET             reduce using rule 219 (structered_type_opt_1 -> PACKED .)
    FILE            reduce using rule 219 (structered_type_opt_1 -> PACKED .)


state 196

    (220) structered_type_opt_1 -> empty .
    (54) constant_opt_sign -> empty .

    ARRAY           reduce using rule 220 (structered_type_opt_1 -> empty .)
    RECORD          reduce using rule 220 (structered_type_opt_1 -> empty .)
    SET             reduce using rule 220 (structered_type_opt_1 -> empty .)
    FILE            reduce using rule 220 (structered_type_opt_1 -> empty .)
    ID              reduce using rule 54 (constant_opt_sign -> empty .)
    NUMBER          reduce using rule 54 (constant_opt_sign -> empty .)


state 197

    (139) lower_bound -> constant .

    DOT             reduce using rule 139 (lower_bound -> constant .)


state 198

    (46) constant_definition_part_1 -> constant_definition SEMICOLON . constant_definition_part_1
    (46) constant_definition_part_1 -> . constant_definition SEMICOLON constant_definition_part_1
    (47) constant_definition_part_1 -> . empty
    (48) constant_definition -> . ID EQUAL constant
    (262) empty -> .

    ID              shift and go to state 33
    TYPE            reduce using rule 262 (empty -> .)
    VAR             reduce using rule 262 (empty -> .)
    BEGIN           reduce using rule 262 (empty -> .)

    constant_definition            shift and go to state 125
    constant_definition_part_1     shift and go to state 261
    empty                          shift and go to state 127

state 199

    (49) constant -> constant_opt_sign ID .

    SEMICOLON       reduce using rule 49 (constant -> constant_opt_sign ID .)
    DOT             reduce using rule 49 (constant -> constant_opt_sign ID .)
    COMMA           reduce using rule 49 (constant -> constant_opt_sign ID .)
    COLON           reduce using rule 49 (constant -> constant_opt_sign ID .)
    RBRACKET        reduce using rule 49 (constant -> constant_opt_sign ID .)
    END             reduce using rule 49 (constant -> constant_opt_sign ID .)
    RPAREN          reduce using rule 49 (constant -> constant_opt_sign ID .)


state 200

    (50) constant -> constant_opt_sign number .

    SEMICOLON       reduce using rule 50 (constant -> constant_opt_sign number .)
    DOT             reduce using rule 50 (constant -> constant_opt_sign number .)
    COMMA           reduce using rule 50 (constant -> constant_opt_sign number .)
    COLON           reduce using rule 50 (constant -> constant_opt_sign number .)
    RBRACKET        reduce using rule 50 (constant -> constant_opt_sign number .)
    END             reduce using rule 50 (constant -> constant_opt_sign number .)
    RPAREN          reduce using rule 50 (constant -> constant_opt_sign number .)


state 201

    (144) number -> integer .

    SEMICOLON       reduce using rule 144 (number -> integer .)
    DOT             reduce using rule 144 (number -> integer .)
    COMMA           reduce using rule 144 (number -> integer .)
    COLON           reduce using rule 144 (number -> integer .)
    RBRACKET        reduce using rule 144 (number -> integer .)
    END             reduce using rule 144 (number -> integer .)
    RPAREN          reduce using rule 144 (number -> integer .)


state 202

    (145) number -> real_number .

    SEMICOLON       reduce using rule 145 (number -> real_number .)
    DOT             reduce using rule 145 (number -> real_number .)
    COMMA           reduce using rule 145 (number -> real_number .)
    COLON           reduce using rule 145 (number -> real_number .)
    RBRACKET        reduce using rule 145 (number -> real_number .)
    END             reduce using rule 145 (number -> real_number .)
    RPAREN          reduce using rule 145 (number -> real_number .)


state 203

    (134) integer -> NUMBER .
    (174) real_number -> NUMBER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 134 (integer -> NUMBER .)
  ! reduce/reduce conflict for DOT resolved using rule 134 (integer -> NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 134 (integer -> NUMBER .)
  ! reduce/reduce conflict for COLON resolved using rule 134 (integer -> NUMBER .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 134 (integer -> NUMBER .)
  ! reduce/reduce conflict for END resolved using rule 134 (integer -> NUMBER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 134 (integer -> NUMBER .)
    SEMICOLON       reduce using rule 134 (integer -> NUMBER .)
    DOT             reduce using rule 134 (integer -> NUMBER .)
    COMMA           reduce using rule 134 (integer -> NUMBER .)
    COLON           reduce using rule 134 (integer -> NUMBER .)
    RBRACKET        reduce using rule 134 (integer -> NUMBER .)
    END             reduce using rule 134 (integer -> NUMBER .)
    RPAREN          reduce using rule 134 (integer -> NUMBER .)

  ! SEMICOLON       [ reduce using rule 174 (real_number -> NUMBER .) ]
  ! DOT             [ reduce using rule 174 (real_number -> NUMBER .) ]
  ! COMMA           [ reduce using rule 174 (real_number -> NUMBER .) ]
  ! COLON           [ reduce using rule 174 (real_number -> NUMBER .) ]
  ! RBRACKET        [ reduce using rule 174 (real_number -> NUMBER .) ]
  ! END             [ reduce using rule 174 (real_number -> NUMBER .) ]
  ! RPAREN          [ reduce using rule 174 (real_number -> NUMBER .) ]


state 204

    (126) identifier_list_1 -> COMMA ID identifier_list_1 .

    RPAREN          reduce using rule 126 (identifier_list_1 -> COMMA ID identifier_list_1 .)
    COLON           reduce using rule 126 (identifier_list_1 -> COMMA ID identifier_list_1 .)


state 205

    (6) actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 . RPAREN

    RPAREN          shift and go to state 262


state 206

    (7) actual_parameter_list_1 -> COMMA . actual_parameter actual_parameter_list_1
    (9) actual_parameter -> . actual_value
    (10) actual_parameter -> . actual_variable
    (11) actual_parameter -> . actual_function
    (12) actual_parameter -> . actual_procedure
    (14) actual_value -> . expression
    (15) actual_variable -> . variable
    (5) actual_function -> . ID
    (13) actual_procedure -> . ID
    (75) expression -> . simple_expression
    (76) expression -> . simple_expression relational_operator simple_expression
    (251) variable -> . entire_variable
    (252) variable -> . component_variable
    (253) variable -> . referenced_variable
    (193) simple_expression -> . simple_expression_opt_1 term simple_expression_1
    (70) entire_variable -> . ID
    (37) component_variable -> . indexed_variable
    (38) component_variable -> . field_designator
    (39) component_variable -> . file_buffer
    (178) referenced_variable -> . pointer_variable CIRCUMFLEX
    (196) simple_expression_opt_1 -> . PLUS
    (197) simple_expression_opt_1 -> . MINUS
    (198) simple_expression_opt_1 -> . empty
    (132) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (86) field_designator -> . record_variable DOT ID
    (95) file_buffer -> . file_variable CIRCUMFLEX
    (159) pointer_variable -> . variable
    (262) empty -> .
    (22) array_variable -> . variable
    (177) record_variable -> . variable
    (98) file_variable -> . variable

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 146
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NUMBER          reduce using rule 262 (empty -> .)
    CONSTSTRING     reduce using rule 262 (empty -> .)
    NIL             reduce using rule 262 (empty -> .)
    LPAREN          reduce using rule 262 (empty -> .)
    NOT             reduce using rule 262 (empty -> .)
    LBRACKET        reduce using rule 262 (empty -> .)

  ! ID              [ reduce using rule 262 (empty -> .) ]

    actual_parameter               shift and go to state 263
    actual_value                   shift and go to state 140
    actual_variable                shift and go to state 141
    actual_function                shift and go to state 142
    actual_procedure               shift and go to state 143
    expression                     shift and go to state 144
    variable                       shift and go to state 145
    simple_expression              shift and go to state 109
    entire_variable                shift and go to state 66
    component_variable             shift and go to state 67
    referenced_variable            shift and go to state 68
    simple_expression_opt_1        shift and go to state 110
    indexed_variable               shift and go to state 74
    field_designator               shift and go to state 75
    file_buffer                    shift and go to state 76
    pointer_variable               shift and go to state 77
    empty                          shift and go to state 113
    array_variable                 shift and go to state 78
    record_variable                shift and go to state 65
    file_variable                  shift and go to state 79

state 207

    (8) actual_parameter_list_1 -> empty .

    RPAREN          reduce using rule 8 (actual_parameter_list_1 -> empty .)


state 208

    (259) with_statement -> WITH record_variable with_statement_1 DO . statement
    (209) statement -> . statement_opt_1 statement_1
    (212) statement_opt_1 -> . LABEL COLON
    (213) statement_opt_1 -> . empty
    (262) empty -> .

    LABEL           shift and go to state 26
    ID              reduce using rule 262 (empty -> .)
    GOTO            reduce using rule 262 (empty -> .)
    BEGIN           reduce using rule 262 (empty -> .)
    WITH            reduce using rule 262 (empty -> .)
    WHILE           reduce using rule 262 (empty -> .)
    REPEAT          reduce using rule 262 (empty -> .)
    FOR             reduce using rule 262 (empty -> .)
    IF              reduce using rule 262 (empty -> .)
    CASE            reduce using rule 262 (empty -> .)
    SEMICOLON       reduce using rule 262 (empty -> .)
    END             reduce using rule 262 (empty -> .)
    UNTIL           reduce using rule 262 (empty -> .)
    ELSE            reduce using rule 262 (empty -> .)

    statement                      shift and go to state 264
    statement_opt_1                shift and go to state 25
    empty                          shift and go to state 27

state 209

    (260) with_statement_1 -> COMMA record_variable . with_statement_1
    (86) field_designator -> record_variable . DOT ID
    (260) with_statement_1 -> . COMMA record_variable with_statement_1
    (261) with_statement_1 -> . empty
    (262) empty -> .

    DOT             shift and go to state 107
    COMMA           shift and go to state 149
    DO              reduce using rule 262 (empty -> .)

    with_statement_1               shift and go to state 265
    empty                          shift and go to state 150

state 210

    (258) while_statement -> WHILE expression DO statement .

    SEMICOLON       reduce using rule 258 (while_statement -> WHILE expression DO statement .)
    END             reduce using rule 258 (while_statement -> WHILE expression DO statement .)
    UNTIL           reduce using rule 258 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 258 (while_statement -> WHILE expression DO statement .)


state 211

    (76) expression -> simple_expression relational_operator simple_expression .

    DO              reduce using rule 76 (expression -> simple_expression relational_operator simple_expression .)
    THEN            reduce using rule 76 (expression -> simple_expression relational_operator simple_expression .)
    OF              reduce using rule 76 (expression -> simple_expression relational_operator simple_expression .)
    SEMICOLON       reduce using rule 76 (expression -> simple_expression relational_operator simple_expression .)
    END             reduce using rule 76 (expression -> simple_expression relational_operator simple_expression .)
    UNTIL           reduce using rule 76 (expression -> simple_expression relational_operator simple_expression .)
    ELSE            reduce using rule 76 (expression -> simple_expression relational_operator simple_expression .)
    COMMA           reduce using rule 76 (expression -> simple_expression relational_operator simple_expression .)
    RPAREN          reduce using rule 76 (expression -> simple_expression relational_operator simple_expression .)
    RBRACKET        reduce using rule 76 (expression -> simple_expression relational_operator simple_expression .)
    TO              reduce using rule 76 (expression -> simple_expression relational_operator simple_expression .)
    DOWNTO          reduce using rule 76 (expression -> simple_expression relational_operator simple_expression .)


state 212

    (193) simple_expression -> simple_expression_opt_1 term simple_expression_1 .

    EQUAL           reduce using rule 193 (simple_expression -> simple_expression_opt_1 term simple_expression_1 .)
    DEQUAL          reduce using rule 193 (simple_expression -> simple_expression_opt_1 term simple_expression_1 .)
    LESS            reduce using rule 193 (simple_expression -> simple_expression_opt_1 term simple_expression_1 .)
    LESSEQUAL       reduce using rule 193 (simple_expression -> simple_expression_opt_1 term simple_expression_1 .)
    GREATER         reduce using rule 193 (simple_expression -> simple_expression_opt_1 term simple_expression_1 .)
    GREATEREQUAL    reduce using rule 193 (simple_expression -> simple_expression_opt_1 term simple_expression_1 .)
    IN              reduce using rule 193 (simple_expression -> simple_expression_opt_1 term simple_expression_1 .)
    DO              reduce using rule 193 (simple_expression -> simple_expression_opt_1 term simple_expression_1 .)
    THEN            reduce using rule 193 (simple_expression -> simple_expression_opt_1 term simple_expression_1 .)
    OF              reduce using rule 193 (simple_expression -> simple_expression_opt_1 term simple_expression_1 .)
    SEMICOLON       reduce using rule 193 (simple_expression -> simple_expression_opt_1 term simple_expression_1 .)
    END             reduce using rule 193 (simple_expression -> simple_expression_opt_1 term simple_expression_1 .)
    UNTIL           reduce using rule 193 (simple_expression -> simple_expression_opt_1 term simple_expression_1 .)
    ELSE            reduce using rule 193 (simple_expression -> simple_expression_opt_1 term simple_expression_1 .)
    COMMA           reduce using rule 193 (simple_expression -> simple_expression_opt_1 term simple_expression_1 .)
    RPAREN          reduce using rule 193 (simple_expression -> simple_expression_opt_1 term simple_expression_1 .)
    RBRACKET        reduce using rule 193 (simple_expression -> simple_expression_opt_1 term simple_expression_1 .)
    TO              reduce using rule 193 (simple_expression -> simple_expression_opt_1 term simple_expression_1 .)
    DOWNTO          reduce using rule 193 (simple_expression -> simple_expression_opt_1 term simple_expression_1 .)


state 213

    (194) simple_expression_1 -> addition_operator . term simple_expression_1
    (224) term -> . factor term_1
    (77) factor -> . NUMBER
    (78) factor -> . CONSTSTRING
    (79) factor -> . NIL
    (80) factor -> . ID
    (81) factor -> . set
    (82) factor -> . variable
    (83) factor -> . function_designator
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . NOT factor
    (192) set -> . LBRACKET element_list RBRACKET
    (251) variable -> . entire_variable
    (252) variable -> . component_variable
    (253) variable -> . referenced_variable
    (117) function_designator -> . ID function_designator_opt_1
    (70) entire_variable -> . ID
    (37) component_variable -> . indexed_variable
    (38) component_variable -> . field_designator
    (39) component_variable -> . file_buffer
    (178) referenced_variable -> . pointer_variable CIRCUMFLEX
    (132) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (86) field_designator -> . record_variable DOT ID
    (95) file_buffer -> . file_variable CIRCUMFLEX
    (159) pointer_variable -> . variable
    (22) array_variable -> . variable
    (177) record_variable -> . variable
    (98) file_variable -> . variable

    NUMBER          shift and go to state 163
    CONSTSTRING     shift and go to state 164
    NIL             shift and go to state 165
    ID              shift and go to state 166
    LPAREN          shift and go to state 170
    NOT             shift and go to state 171
    LBRACKET        shift and go to state 172

    term                           shift and go to state 266
    factor                         shift and go to state 162
    set                            shift and go to state 167
    variable                       shift and go to state 168
    function_designator            shift and go to state 169
    entire_variable                shift and go to state 66
    component_variable             shift and go to state 67
    referenced_variable            shift and go to state 68
    indexed_variable               shift and go to state 74
    field_designator               shift and go to state 75
    file_buffer                    shift and go to state 76
    pointer_variable               shift and go to state 77
    array_variable                 shift and go to state 78
    record_variable                shift and go to state 65
    file_variable                  shift and go to state 79

state 214

    (195) simple_expression_1 -> empty .

    EQUAL           reduce using rule 195 (simple_expression_1 -> empty .)
    DEQUAL          reduce using rule 195 (simple_expression_1 -> empty .)
    LESS            reduce using rule 195 (simple_expression_1 -> empty .)
    LESSEQUAL       reduce using rule 195 (simple_expression_1 -> empty .)
    GREATER         reduce using rule 195 (simple_expression_1 -> empty .)
    GREATEREQUAL    reduce using rule 195 (simple_expression_1 -> empty .)
    IN              reduce using rule 195 (simple_expression_1 -> empty .)
    DO              reduce using rule 195 (simple_expression_1 -> empty .)
    THEN            reduce using rule 195 (simple_expression_1 -> empty .)
    OF              reduce using rule 195 (simple_expression_1 -> empty .)
    SEMICOLON       reduce using rule 195 (simple_expression_1 -> empty .)
    END             reduce using rule 195 (simple_expression_1 -> empty .)
    UNTIL           reduce using rule 195 (simple_expression_1 -> empty .)
    ELSE            reduce using rule 195 (simple_expression_1 -> empty .)
    COMMA           reduce using rule 195 (simple_expression_1 -> empty .)
    RPAREN          reduce using rule 195 (simple_expression_1 -> empty .)
    RBRACKET        reduce using rule 195 (simple_expression_1 -> empty .)
    TO              reduce using rule 195 (simple_expression_1 -> empty .)
    DOWNTO          reduce using rule 195 (simple_expression_1 -> empty .)


state 215

    (16) addition_operator -> PLUS .

    NUMBER          reduce using rule 16 (addition_operator -> PLUS .)
    CONSTSTRING     reduce using rule 16 (addition_operator -> PLUS .)
    NIL             reduce using rule 16 (addition_operator -> PLUS .)
    ID              reduce using rule 16 (addition_operator -> PLUS .)
    LPAREN          reduce using rule 16 (addition_operator -> PLUS .)
    NOT             reduce using rule 16 (addition_operator -> PLUS .)
    LBRACKET        reduce using rule 16 (addition_operator -> PLUS .)


state 216

    (17) addition_operator -> MINUS .

    NUMBER          reduce using rule 17 (addition_operator -> MINUS .)
    CONSTSTRING     reduce using rule 17 (addition_operator -> MINUS .)
    NIL             reduce using rule 17 (addition_operator -> MINUS .)
    ID              reduce using rule 17 (addition_operator -> MINUS .)
    LPAREN          reduce using rule 17 (addition_operator -> MINUS .)
    NOT             reduce using rule 17 (addition_operator -> MINUS .)
    LBRACKET        reduce using rule 17 (addition_operator -> MINUS .)


state 217

    (18) addition_operator -> OR .

    NUMBER          reduce using rule 18 (addition_operator -> OR .)
    CONSTSTRING     reduce using rule 18 (addition_operator -> OR .)
    NIL             reduce using rule 18 (addition_operator -> OR .)
    ID              reduce using rule 18 (addition_operator -> OR .)
    LPAREN          reduce using rule 18 (addition_operator -> OR .)
    NOT             reduce using rule 18 (addition_operator -> OR .)
    LBRACKET        reduce using rule 18 (addition_operator -> OR .)


state 218

    (224) term -> factor term_1 .

    PLUS            reduce using rule 224 (term -> factor term_1 .)
    MINUS           reduce using rule 224 (term -> factor term_1 .)
    OR              reduce using rule 224 (term -> factor term_1 .)
    EQUAL           reduce using rule 224 (term -> factor term_1 .)
    DEQUAL          reduce using rule 224 (term -> factor term_1 .)
    LESS            reduce using rule 224 (term -> factor term_1 .)
    LESSEQUAL       reduce using rule 224 (term -> factor term_1 .)
    GREATER         reduce using rule 224 (term -> factor term_1 .)
    GREATEREQUAL    reduce using rule 224 (term -> factor term_1 .)
    IN              reduce using rule 224 (term -> factor term_1 .)
    DO              reduce using rule 224 (term -> factor term_1 .)
    THEN            reduce using rule 224 (term -> factor term_1 .)
    OF              reduce using rule 224 (term -> factor term_1 .)
    SEMICOLON       reduce using rule 224 (term -> factor term_1 .)
    END             reduce using rule 224 (term -> factor term_1 .)
    UNTIL           reduce using rule 224 (term -> factor term_1 .)
    ELSE            reduce using rule 224 (term -> factor term_1 .)
    COMMA           reduce using rule 224 (term -> factor term_1 .)
    RPAREN          reduce using rule 224 (term -> factor term_1 .)
    RBRACKET        reduce using rule 224 (term -> factor term_1 .)
    TO              reduce using rule 224 (term -> factor term_1 .)
    DOWNTO          reduce using rule 224 (term -> factor term_1 .)


state 219

    (225) term_1 -> multiplication_operator . factor term_1
    (77) factor -> . NUMBER
    (78) factor -> . CONSTSTRING
    (79) factor -> . NIL
    (80) factor -> . ID
    (81) factor -> . set
    (82) factor -> . variable
    (83) factor -> . function_designator
    (84) factor -> . LPAREN expression RPAREN
    (85) factor -> . NOT factor
    (192) set -> . LBRACKET element_list RBRACKET
    (251) variable -> . entire_variable
    (252) variable -> . component_variable
    (253) variable -> . referenced_variable
    (117) function_designator -> . ID function_designator_opt_1
    (70) entire_variable -> . ID
    (37) component_variable -> . indexed_variable
    (38) component_variable -> . field_designator
    (39) component_variable -> . file_buffer
    (178) referenced_variable -> . pointer_variable CIRCUMFLEX
    (132) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (86) field_designator -> . record_variable DOT ID
    (95) file_buffer -> . file_variable CIRCUMFLEX
    (159) pointer_variable -> . variable
    (22) array_variable -> . variable
    (177) record_variable -> . variable
    (98) file_variable -> . variable

    NUMBER          shift and go to state 163
    CONSTSTRING     shift and go to state 164
    NIL             shift and go to state 165
    ID              shift and go to state 166
    LPAREN          shift and go to state 170
    NOT             shift and go to state 171
    LBRACKET        shift and go to state 172

    factor                         shift and go to state 267
    set                            shift and go to state 167
    variable                       shift and go to state 168
    function_designator            shift and go to state 169
    entire_variable                shift and go to state 66
    component_variable             shift and go to state 67
    referenced_variable            shift and go to state 68
    indexed_variable               shift and go to state 74
    field_designator               shift and go to state 75
    file_buffer                    shift and go to state 76
    pointer_variable               shift and go to state 77
    array_variable                 shift and go to state 78
    record_variable                shift and go to state 65
    file_variable                  shift and go to state 79

state 220

    (226) term_1 -> empty .

    PLUS            reduce using rule 226 (term_1 -> empty .)
    MINUS           reduce using rule 226 (term_1 -> empty .)
    OR              reduce using rule 226 (term_1 -> empty .)
    EQUAL           reduce using rule 226 (term_1 -> empty .)
    DEQUAL          reduce using rule 226 (term_1 -> empty .)
    LESS            reduce using rule 226 (term_1 -> empty .)
    LESSEQUAL       reduce using rule 226 (term_1 -> empty .)
    GREATER         reduce using rule 226 (term_1 -> empty .)
    GREATEREQUAL    reduce using rule 226 (term_1 -> empty .)
    IN              reduce using rule 226 (term_1 -> empty .)
    DO              reduce using rule 226 (term_1 -> empty .)
    THEN            reduce using rule 226 (term_1 -> empty .)
    OF              reduce using rule 226 (term_1 -> empty .)
    SEMICOLON       reduce using rule 226 (term_1 -> empty .)
    END             reduce using rule 226 (term_1 -> empty .)
    UNTIL           reduce using rule 226 (term_1 -> empty .)
    ELSE            reduce using rule 226 (term_1 -> empty .)
    COMMA           reduce using rule 226 (term_1 -> empty .)
    RPAREN          reduce using rule 226 (term_1 -> empty .)
    RBRACKET        reduce using rule 226 (term_1 -> empty .)
    TO              reduce using rule 226 (term_1 -> empty .)
    DOWNTO          reduce using rule 226 (term_1 -> empty .)


state 221

    (140) multiplication_operator -> TIMES .

    NUMBER          reduce using rule 140 (multiplication_operator -> TIMES .)
    CONSTSTRING     reduce using rule 140 (multiplication_operator -> TIMES .)
    NIL             reduce using rule 140 (multiplication_operator -> TIMES .)
    ID              reduce using rule 140 (multiplication_operator -> TIMES .)
    LPAREN          reduce using rule 140 (multiplication_operator -> TIMES .)
    NOT             reduce using rule 140 (multiplication_operator -> TIMES .)
    LBRACKET        reduce using rule 140 (multiplication_operator -> TIMES .)


state 222

    (141) multiplication_operator -> DIVIDE .

    NUMBER          reduce using rule 141 (multiplication_operator -> DIVIDE .)
    CONSTSTRING     reduce using rule 141 (multiplication_operator -> DIVIDE .)
    NIL             reduce using rule 141 (multiplication_operator -> DIVIDE .)
    ID              reduce using rule 141 (multiplication_operator -> DIVIDE .)
    LPAREN          reduce using rule 141 (multiplication_operator -> DIVIDE .)
    NOT             reduce using rule 141 (multiplication_operator -> DIVIDE .)
    LBRACKET        reduce using rule 141 (multiplication_operator -> DIVIDE .)


state 223

    (142) multiplication_operator -> MODULUS .

    NUMBER          reduce using rule 142 (multiplication_operator -> MODULUS .)
    CONSTSTRING     reduce using rule 142 (multiplication_operator -> MODULUS .)
    NIL             reduce using rule 142 (multiplication_operator -> MODULUS .)
    ID              reduce using rule 142 (multiplication_operator -> MODULUS .)
    LPAREN          reduce using rule 142 (multiplication_operator -> MODULUS .)
    NOT             reduce using rule 142 (multiplication_operator -> MODULUS .)
    LBRACKET        reduce using rule 142 (multiplication_operator -> MODULUS .)


state 224

    (143) multiplication_operator -> AND .

    NUMBER          reduce using rule 143 (multiplication_operator -> AND .)
    CONSTSTRING     reduce using rule 143 (multiplication_operator -> AND .)
    NIL             reduce using rule 143 (multiplication_operator -> AND .)
    ID              reduce using rule 143 (multiplication_operator -> AND .)
    LPAREN          reduce using rule 143 (multiplication_operator -> AND .)
    NOT             reduce using rule 143 (multiplication_operator -> AND .)
    LBRACKET        reduce using rule 143 (multiplication_operator -> AND .)


state 225

    (117) function_designator -> ID function_designator_opt_1 .

    TIMES           reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    DIVIDE          reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    MODULUS         reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    AND             reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    PLUS            reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    MINUS           reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    OR              reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    EQUAL           reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    DEQUAL          reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    LESS            reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    LESSEQUAL       reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    GREATER         reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    GREATEREQUAL    reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    IN              reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    DO              reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    THEN            reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    OF              reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    SEMICOLON       reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    END             reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    UNTIL           reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    ELSE            reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    COMMA           reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    RPAREN          reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    RBRACKET        reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    TO              reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)
    DOWNTO          reduce using rule 117 (function_designator -> ID function_designator_opt_1 .)


state 226

    (118) function_designator_opt_1 -> actual_parameter_list .

    TIMES           reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    DIVIDE          reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    MODULUS         reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    AND             reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    PLUS            reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    MINUS           reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    OR              reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    EQUAL           reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    DEQUAL          reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    LESS            reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    LESSEQUAL       reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    GREATER         reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    GREATEREQUAL    reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    IN              reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    DO              reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    THEN            reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    OF              reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    SEMICOLON       reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    END             reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    UNTIL           reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    ELSE            reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    COMMA           reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    RPAREN          reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    RBRACKET        reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    TO              reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)
    DOWNTO          reduce using rule 118 (function_designator_opt_1 -> actual_parameter_list .)


state 227

    (119) function_designator_opt_1 -> empty .

    TIMES           reduce using rule 119 (function_designator_opt_1 -> empty .)
    DIVIDE          reduce using rule 119 (function_designator_opt_1 -> empty .)
    MODULUS         reduce using rule 119 (function_designator_opt_1 -> empty .)
    AND             reduce using rule 119 (function_designator_opt_1 -> empty .)
    PLUS            reduce using rule 119 (function_designator_opt_1 -> empty .)
    MINUS           reduce using rule 119 (function_designator_opt_1 -> empty .)
    OR              reduce using rule 119 (function_designator_opt_1 -> empty .)
    EQUAL           reduce using rule 119 (function_designator_opt_1 -> empty .)
    DEQUAL          reduce using rule 119 (function_designator_opt_1 -> empty .)
    LESS            reduce using rule 119 (function_designator_opt_1 -> empty .)
    LESSEQUAL       reduce using rule 119 (function_designator_opt_1 -> empty .)
    GREATER         reduce using rule 119 (function_designator_opt_1 -> empty .)
    GREATEREQUAL    reduce using rule 119 (function_designator_opt_1 -> empty .)
    IN              reduce using rule 119 (function_designator_opt_1 -> empty .)
    DO              reduce using rule 119 (function_designator_opt_1 -> empty .)
    THEN            reduce using rule 119 (function_designator_opt_1 -> empty .)
    OF              reduce using rule 119 (function_designator_opt_1 -> empty .)
    SEMICOLON       reduce using rule 119 (function_designator_opt_1 -> empty .)
    END             reduce using rule 119 (function_designator_opt_1 -> empty .)
    UNTIL           reduce using rule 119 (function_designator_opt_1 -> empty .)
    ELSE            reduce using rule 119 (function_designator_opt_1 -> empty .)
    COMMA           reduce using rule 119 (function_designator_opt_1 -> empty .)
    RPAREN          reduce using rule 119 (function_designator_opt_1 -> empty .)
    RBRACKET        reduce using rule 119 (function_designator_opt_1 -> empty .)
    TO              reduce using rule 119 (function_designator_opt_1 -> empty .)
    DOWNTO          reduce using rule 119 (function_designator_opt_1 -> empty .)


state 228

    (84) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 268


state 229

    (85) factor -> NOT factor .

    TIMES           reduce using rule 85 (factor -> NOT factor .)
    DIVIDE          reduce using rule 85 (factor -> NOT factor .)
    MODULUS         reduce using rule 85 (factor -> NOT factor .)
    AND             reduce using rule 85 (factor -> NOT factor .)
    PLUS            reduce using rule 85 (factor -> NOT factor .)
    MINUS           reduce using rule 85 (factor -> NOT factor .)
    OR              reduce using rule 85 (factor -> NOT factor .)
    EQUAL           reduce using rule 85 (factor -> NOT factor .)
    DEQUAL          reduce using rule 85 (factor -> NOT factor .)
    LESS            reduce using rule 85 (factor -> NOT factor .)
    LESSEQUAL       reduce using rule 85 (factor -> NOT factor .)
    GREATER         reduce using rule 85 (factor -> NOT factor .)
    GREATEREQUAL    reduce using rule 85 (factor -> NOT factor .)
    IN              reduce using rule 85 (factor -> NOT factor .)
    DO              reduce using rule 85 (factor -> NOT factor .)
    THEN            reduce using rule 85 (factor -> NOT factor .)
    OF              reduce using rule 85 (factor -> NOT factor .)
    SEMICOLON       reduce using rule 85 (factor -> NOT factor .)
    END             reduce using rule 85 (factor -> NOT factor .)
    UNTIL           reduce using rule 85 (factor -> NOT factor .)
    ELSE            reduce using rule 85 (factor -> NOT factor .)
    COMMA           reduce using rule 85 (factor -> NOT factor .)
    RPAREN          reduce using rule 85 (factor -> NOT factor .)
    RBRACKET        reduce using rule 85 (factor -> NOT factor .)
    TO              reduce using rule 85 (factor -> NOT factor .)
    DOWNTO          reduce using rule 85 (factor -> NOT factor .)


state 230

    (192) set -> LBRACKET element_list . RBRACKET

    RBRACKET        shift and go to state 269


state 231

    (65) element_list -> expression . element_list_1
    (67) element_list_1 -> . COMMA expression element_list_1
    (68) element_list_1 -> . empty
    (262) empty -> .

    COMMA           shift and go to state 271
    RBRACKET        reduce using rule 262 (empty -> .)

    element_list_1                 shift and go to state 270
    empty                          shift and go to state 272

state 232

    (66) element_list -> empty .
    (198) simple_expression_opt_1 -> empty .

    RBRACKET        reduce using rule 66 (element_list -> empty .)
    NUMBER          reduce using rule 198 (simple_expression_opt_1 -> empty .)
    CONSTSTRING     reduce using rule 198 (simple_expression_opt_1 -> empty .)
    NIL             reduce using rule 198 (simple_expression_opt_1 -> empty .)
    ID              reduce using rule 198 (simple_expression_opt_1 -> empty .)
    LPAREN          reduce using rule 198 (simple_expression_opt_1 -> empty .)
    NOT             reduce using rule 198 (simple_expression_opt_1 -> empty .)
    LBRACKET        reduce using rule 198 (simple_expression_opt_1 -> empty .)


state 233

    (186) repeat_statement -> REPEAT statement_sequence UNTIL expression .

    SEMICOLON       reduce using rule 186 (repeat_statement -> REPEAT statement_sequence UNTIL expression .)
    END             reduce using rule 186 (repeat_statement -> REPEAT statement_sequence UNTIL expression .)
    UNTIL           reduce using rule 186 (repeat_statement -> REPEAT statement_sequence UNTIL expression .)
    ELSE            reduce using rule 186 (repeat_statement -> REPEAT statement_sequence UNTIL expression .)


state 234

    (103) for_statement -> FOR ID ASSIGN initial_expression . for_statement_opt_1 final_expression DO statement
    (104) for_statement_opt_1 -> . TO
    (105) for_statement_opt_1 -> . DOWNTO

    TO              shift and go to state 274
    DOWNTO          shift and go to state 275

    for_statement_opt_1            shift and go to state 273

state 235

    (133) initial_expression -> expression .

    TO              reduce using rule 133 (initial_expression -> expression .)
    DOWNTO          reduce using rule 133 (initial_expression -> expression .)


state 236

    (128) if_statement -> IF expression THEN statement . if_statement_opt_1
    (129) if_statement_opt_1 -> . ELSE statement
    (130) if_statement_opt_1 -> . empty
    (262) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 277
    SEMICOLON       reduce using rule 262 (empty -> .)
    END             reduce using rule 262 (empty -> .)
    UNTIL           reduce using rule 262 (empty -> .)

  ! ELSE            [ reduce using rule 262 (empty -> .) ]

    if_statement_opt_1             shift and go to state 276
    empty                          shift and go to state 278

state 237

    (32) case_statement -> CASE expression OF case_element . case_statement_1 case_statement_opt END
    (33) case_statement_1 -> . SEMICOLON case_element case_statement_1
    (34) case_statement_1 -> . empty
    (262) empty -> .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 280
    END             reduce using rule 262 (empty -> .)

  ! SEMICOLON       [ reduce using rule 262 (empty -> .) ]

    case_statement_1               shift and go to state 279
    empty                          shift and go to state 281

state 238

    (28) case_element -> case_label_list . COLON statement

    COLON           shift and go to state 282


state 239

    (29) case_label_list -> constant . case_label_list_1
    (30) case_label_list_1 -> . COMMA constant case_label_list_1
    (31) case_label_list_1 -> . empty
    (262) empty -> .

    COMMA           shift and go to state 284
    COLON           reduce using rule 262 (empty -> .)

    case_label_list_1              shift and go to state 283
    empty                          shift and go to state 285

state 240

    (132) indexed_variable -> array_variable LBRACKET expression_list RBRACKET .

    ASSIGN          reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    CIRCUMFLEX      reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    DOT             reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    DO              reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    MODULUS         reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    DEQUAL          reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    LESS            reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    LESSEQUAL       reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    GREATER         reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    GREATEREQUAL    reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    OF              reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    SEMICOLON       reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    END             reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    UNTIL           reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    DOWNTO          reduce using rule 132 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)


state 241

    (72) expression_list -> expression expression_list_1 .

    RBRACKET        reduce using rule 72 (expression_list -> expression expression_list_1 .)


state 242

    (73) expression_list_1 -> COMMA . expression expression_list_1
    (75) expression -> . simple_expression
    (76) expression -> . simple_expression relational_operator simple_expression
    (193) simple_expression -> . simple_expression_opt_1 term simple_expression_1
    (196) simple_expression_opt_1 -> . PLUS
    (197) simple_expression_opt_1 -> . MINUS
    (198) simple_expression_opt_1 -> . empty
    (262) empty -> .

    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NUMBER          reduce using rule 262 (empty -> .)
    CONSTSTRING     reduce using rule 262 (empty -> .)
    NIL             reduce using rule 262 (empty -> .)
    ID              reduce using rule 262 (empty -> .)
    LPAREN          reduce using rule 262 (empty -> .)
    NOT             reduce using rule 262 (empty -> .)
    LBRACKET        reduce using rule 262 (empty -> .)

    expression                     shift and go to state 286
    simple_expression              shift and go to state 109
    simple_expression_opt_1        shift and go to state 110
    empty                          shift and go to state 113

state 243

    (74) expression_list_1 -> empty .

    RBRACKET        reduce using rule 74 (expression_list_1 -> empty .)


state 244

    (247) variable_declaration_part_1 -> variable_declaration . SEMICOLON variable_declaration_part_1

    SEMICOLON       shift and go to state 287


state 245

    (246) variable_declaration_part -> VAR variable_declaration SEMICOLON variable_declaration_part_1 .

    BEGIN           reduce using rule 246 (variable_declaration_part -> VAR variable_declaration SEMICOLON variable_declaration_part_1 .)


state 246

    (248) variable_declaration_part_1 -> empty .

    BEGIN           reduce using rule 248 (variable_declaration_part_1 -> empty .)


state 247

    (249) variable_declaration -> identifier_list COLON type .

    SEMICOLON       reduce using rule 249 (variable_declaration -> identifier_list COLON type .)


state 248

    (228) type_definition_part_1 -> type_definition SEMICOLON . type_definition_part_1
    (228) type_definition_part_1 -> . type_definition SEMICOLON type_definition_part_1
    (229) type_definition_part_1 -> . empty
    (230) type_definition -> . ID EQUAL type
    (262) empty -> .

    ID              shift and go to state 86
    VAR             reduce using rule 262 (empty -> .)
    BEGIN           reduce using rule 262 (empty -> .)

    type_definition                shift and go to state 181
    type_definition_part_1         shift and go to state 288
    empty                          shift and go to state 183

state 249

    (218) structured_type -> structered_type_opt_1 unpacked_structured_type .

    SEMICOLON       reduce using rule 218 (structured_type -> structered_type_opt_1 unpacked_structured_type .)
    END             reduce using rule 218 (structured_type -> structered_type_opt_1 unpacked_structured_type .)
    RPAREN          reduce using rule 218 (structured_type -> structered_type_opt_1 unpacked_structured_type .)


state 250

    (240) unpacked_structured_type -> array_type .

    SEMICOLON       reduce using rule 240 (unpacked_structured_type -> array_type .)
    END             reduce using rule 240 (unpacked_structured_type -> array_type .)
    RPAREN          reduce using rule 240 (unpacked_structured_type -> array_type .)


state 251

    (241) unpacked_structured_type -> record_type .

    SEMICOLON       reduce using rule 241 (unpacked_structured_type -> record_type .)
    END             reduce using rule 241 (unpacked_structured_type -> record_type .)
    RPAREN          reduce using rule 241 (unpacked_structured_type -> record_type .)


state 252

    (242) unpacked_structured_type -> set_type .

    SEMICOLON       reduce using rule 242 (unpacked_structured_type -> set_type .)
    END             reduce using rule 242 (unpacked_structured_type -> set_type .)
    RPAREN          reduce using rule 242 (unpacked_structured_type -> set_type .)


state 253

    (243) unpacked_structured_type -> file_type .

    SEMICOLON       reduce using rule 243 (unpacked_structured_type -> file_type .)
    END             reduce using rule 243 (unpacked_structured_type -> file_type .)
    RPAREN          reduce using rule 243 (unpacked_structured_type -> file_type .)


state 254

    (19) array_type -> ARRAY . LBRACKET index_type array_type_1 RBRACKET OF element_type

    LBRACKET        shift and go to state 289


state 255

    (176) record_type -> RECORD . field_list END
    (87) field_list -> . fixed_part field_list_opt_1 field_list_opt_2
    (88) field_list -> . variant_part field_list_opt_2
    (89) field_list -> . empty
    (100) fixed_part -> . record_section fixed_part_1
    (254) variant_part -> . CASE tag_field ID OF variant variant_part_1
    (262) empty -> .
    (175) record_section -> . identifier_list COLON type
    (125) identifier_list -> . ID identifier_list_1

    CASE            shift and go to state 295
    END             reduce using rule 262 (empty -> .)
    ID              shift and go to state 39

    field_list                     shift and go to state 290
    fixed_part                     shift and go to state 291
    variant_part                   shift and go to state 292
    empty                          shift and go to state 293
    record_section                 shift and go to state 294
    identifier_list                shift and go to state 296

state 256

    (191) set_type -> SET . OF base_type

    OF              shift and go to state 297


state 257

    (97) file_type -> FILE . OF file_component_type

    OF              shift and go to state 298


state 258

    (158) pointer_type -> CIRCUMFLEX ID .

    SEMICOLON       reduce using rule 158 (pointer_type -> CIRCUMFLEX ID .)
    END             reduce using rule 158 (pointer_type -> CIRCUMFLEX ID .)
    RPAREN          reduce using rule 158 (pointer_type -> CIRCUMFLEX ID .)


state 259

    (221) subrange_type -> lower_bound DOT . DOT upper_bound

    DOT             shift and go to state 299


state 260

    (71) enumerated_type -> LPAREN identifier_list . RPAREN

    RPAREN          shift and go to state 300


state 261

    (46) constant_definition_part_1 -> constant_definition SEMICOLON constant_definition_part_1 .

    TYPE            reduce using rule 46 (constant_definition_part_1 -> constant_definition SEMICOLON constant_definition_part_1 .)
    VAR             reduce using rule 46 (constant_definition_part_1 -> constant_definition SEMICOLON constant_definition_part_1 .)
    BEGIN           reduce using rule 46 (constant_definition_part_1 -> constant_definition SEMICOLON constant_definition_part_1 .)


state 262

    (6) actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .

    SEMICOLON       reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    END             reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    UNTIL           reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    ELSE            reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    TIMES           reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    DIVIDE          reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    MODULUS         reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    AND             reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    PLUS            reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    MINUS           reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    OR              reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    EQUAL           reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    DEQUAL          reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    LESS            reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    LESSEQUAL       reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    GREATER         reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    GREATEREQUAL    reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    IN              reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    DO              reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    THEN            reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    OF              reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    COMMA           reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    RPAREN          reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    RBRACKET        reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    TO              reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)
    DOWNTO          reduce using rule 6 (actual_parameter_list -> LPAREN actual_parameter actual_parameter_list_1 RPAREN .)


state 263

    (7) actual_parameter_list_1 -> COMMA actual_parameter . actual_parameter_list_1
    (7) actual_parameter_list_1 -> . COMMA actual_parameter actual_parameter_list_1
    (8) actual_parameter_list_1 -> . empty
    (262) empty -> .

    COMMA           shift and go to state 206
    RPAREN          reduce using rule 262 (empty -> .)

    actual_parameter_list_1        shift and go to state 301
    empty                          shift and go to state 207

state 264

    (259) with_statement -> WITH record_variable with_statement_1 DO statement .

    SEMICOLON       reduce using rule 259 (with_statement -> WITH record_variable with_statement_1 DO statement .)
    END             reduce using rule 259 (with_statement -> WITH record_variable with_statement_1 DO statement .)
    UNTIL           reduce using rule 259 (with_statement -> WITH record_variable with_statement_1 DO statement .)
    ELSE            reduce using rule 259 (with_statement -> WITH record_variable with_statement_1 DO statement .)


state 265

    (260) with_statement_1 -> COMMA record_variable with_statement_1 .

    DO              reduce using rule 260 (with_statement_1 -> COMMA record_variable with_statement_1 .)


state 266

    (194) simple_expression_1 -> addition_operator term . simple_expression_1
    (194) simple_expression_1 -> . addition_operator term simple_expression_1
    (195) simple_expression_1 -> . empty
    (16) addition_operator -> . PLUS
    (17) addition_operator -> . MINUS
    (18) addition_operator -> . OR
    (262) empty -> .

    PLUS            shift and go to state 215
    MINUS           shift and go to state 216
    OR              shift and go to state 217
    EQUAL           reduce using rule 262 (empty -> .)
    DEQUAL          reduce using rule 262 (empty -> .)
    LESS            reduce using rule 262 (empty -> .)
    LESSEQUAL       reduce using rule 262 (empty -> .)
    GREATER         reduce using rule 262 (empty -> .)
    GREATEREQUAL    reduce using rule 262 (empty -> .)
    IN              reduce using rule 262 (empty -> .)
    DO              reduce using rule 262 (empty -> .)
    THEN            reduce using rule 262 (empty -> .)
    OF              reduce using rule 262 (empty -> .)
    SEMICOLON       reduce using rule 262 (empty -> .)
    END             reduce using rule 262 (empty -> .)
    UNTIL           reduce using rule 262 (empty -> .)
    ELSE            reduce using rule 262 (empty -> .)
    COMMA           reduce using rule 262 (empty -> .)
    RPAREN          reduce using rule 262 (empty -> .)
    RBRACKET        reduce using rule 262 (empty -> .)
    TO              reduce using rule 262 (empty -> .)
    DOWNTO          reduce using rule 262 (empty -> .)

    addition_operator              shift and go to state 213
    simple_expression_1            shift and go to state 302
    empty                          shift and go to state 214

state 267

    (225) term_1 -> multiplication_operator factor . term_1
    (225) term_1 -> . multiplication_operator factor term_1
    (226) term_1 -> . empty
    (140) multiplication_operator -> . TIMES
    (141) multiplication_operator -> . DIVIDE
    (142) multiplication_operator -> . MODULUS
    (143) multiplication_operator -> . AND
    (262) empty -> .

    TIMES           shift and go to state 221
    DIVIDE          shift and go to state 222
    MODULUS         shift and go to state 223
    AND             shift and go to state 224
    PLUS            reduce using rule 262 (empty -> .)
    MINUS           reduce using rule 262 (empty -> .)
    OR              reduce using rule 262 (empty -> .)
    EQUAL           reduce using rule 262 (empty -> .)
    DEQUAL          reduce using rule 262 (empty -> .)
    LESS            reduce using rule 262 (empty -> .)
    LESSEQUAL       reduce using rule 262 (empty -> .)
    GREATER         reduce using rule 262 (empty -> .)
    GREATEREQUAL    reduce using rule 262 (empty -> .)
    IN              reduce using rule 262 (empty -> .)
    DO              reduce using rule 262 (empty -> .)
    THEN            reduce using rule 262 (empty -> .)
    OF              reduce using rule 262 (empty -> .)
    SEMICOLON       reduce using rule 262 (empty -> .)
    END             reduce using rule 262 (empty -> .)
    UNTIL           reduce using rule 262 (empty -> .)
    ELSE            reduce using rule 262 (empty -> .)
    COMMA           reduce using rule 262 (empty -> .)
    RPAREN          reduce using rule 262 (empty -> .)
    RBRACKET        reduce using rule 262 (empty -> .)
    TO              reduce using rule 262 (empty -> .)
    DOWNTO          reduce using rule 262 (empty -> .)

    multiplication_operator        shift and go to state 219
    term_1                         shift and go to state 303
    empty                          shift and go to state 220

state 268

    (84) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    MODULUS         reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    IN              reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    OF              reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 84 (factor -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 84 (factor -> LPAREN expression RPAREN .)


state 269

    (192) set -> LBRACKET element_list RBRACKET .

    TIMES           reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    DIVIDE          reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    MODULUS         reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    AND             reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    PLUS            reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    MINUS           reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    OR              reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    EQUAL           reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    DEQUAL          reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    LESS            reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    LESSEQUAL       reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    GREATER         reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    GREATEREQUAL    reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    IN              reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    DO              reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    THEN            reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    OF              reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    SEMICOLON       reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    END             reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    UNTIL           reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    ELSE            reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    COMMA           reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    RPAREN          reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    RBRACKET        reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    TO              reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)
    DOWNTO          reduce using rule 192 (set -> LBRACKET element_list RBRACKET .)


state 270

    (65) element_list -> expression element_list_1 .

    RBRACKET        reduce using rule 65 (element_list -> expression element_list_1 .)


state 271

    (67) element_list_1 -> COMMA . expression element_list_1
    (75) expression -> . simple_expression
    (76) expression -> . simple_expression relational_operator simple_expression
    (193) simple_expression -> . simple_expression_opt_1 term simple_expression_1
    (196) simple_expression_opt_1 -> . PLUS
    (197) simple_expression_opt_1 -> . MINUS
    (198) simple_expression_opt_1 -> . empty
    (262) empty -> .

    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NUMBER          reduce using rule 262 (empty -> .)
    CONSTSTRING     reduce using rule 262 (empty -> .)
    NIL             reduce using rule 262 (empty -> .)
    ID              reduce using rule 262 (empty -> .)
    LPAREN          reduce using rule 262 (empty -> .)
    NOT             reduce using rule 262 (empty -> .)
    LBRACKET        reduce using rule 262 (empty -> .)

    expression                     shift and go to state 304
    simple_expression              shift and go to state 109
    simple_expression_opt_1        shift and go to state 110
    empty                          shift and go to state 113

state 272

    (68) element_list_1 -> empty .

    RBRACKET        reduce using rule 68 (element_list_1 -> empty .)


state 273

    (103) for_statement -> FOR ID ASSIGN initial_expression for_statement_opt_1 . final_expression DO statement
    (99) final_expression -> . expression
    (75) expression -> . simple_expression
    (76) expression -> . simple_expression relational_operator simple_expression
    (193) simple_expression -> . simple_expression_opt_1 term simple_expression_1
    (196) simple_expression_opt_1 -> . PLUS
    (197) simple_expression_opt_1 -> . MINUS
    (198) simple_expression_opt_1 -> . empty
    (262) empty -> .

    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    NUMBER          reduce using rule 262 (empty -> .)
    CONSTSTRING     reduce using rule 262 (empty -> .)
    NIL             reduce using rule 262 (empty -> .)
    ID              reduce using rule 262 (empty -> .)
    LPAREN          reduce using rule 262 (empty -> .)
    NOT             reduce using rule 262 (empty -> .)
    LBRACKET        reduce using rule 262 (empty -> .)

    final_expression               shift and go to state 305
    expression                     shift and go to state 306
    simple_expression              shift and go to state 109
    simple_expression_opt_1        shift and go to state 110
    empty                          shift and go to state 113

state 274

    (104) for_statement_opt_1 -> TO .

    PLUS            reduce using rule 104 (for_statement_opt_1 -> TO .)
    MINUS           reduce using rule 104 (for_statement_opt_1 -> TO .)
    NUMBER          reduce using rule 104 (for_statement_opt_1 -> TO .)
    CONSTSTRING     reduce using rule 104 (for_statement_opt_1 -> TO .)
    NIL             reduce using rule 104 (for_statement_opt_1 -> TO .)
    ID              reduce using rule 104 (for_statement_opt_1 -> TO .)
    LPAREN          reduce using rule 104 (for_statement_opt_1 -> TO .)
    NOT             reduce using rule 104 (for_statement_opt_1 -> TO .)
    LBRACKET        reduce using rule 104 (for_statement_opt_1 -> TO .)


state 275

    (105) for_statement_opt_1 -> DOWNTO .

    PLUS            reduce using rule 105 (for_statement_opt_1 -> DOWNTO .)
    MINUS           reduce using rule 105 (for_statement_opt_1 -> DOWNTO .)
    NUMBER          reduce using rule 105 (for_statement_opt_1 -> DOWNTO .)
    CONSTSTRING     reduce using rule 105 (for_statement_opt_1 -> DOWNTO .)
    NIL             reduce using rule 105 (for_statement_opt_1 -> DOWNTO .)
    ID              reduce using rule 105 (for_statement_opt_1 -> DOWNTO .)
    LPAREN          reduce using rule 105 (for_statement_opt_1 -> DOWNTO .)
    NOT             reduce using rule 105 (for_statement_opt_1 -> DOWNTO .)
    LBRACKET        reduce using rule 105 (for_statement_opt_1 -> DOWNTO .)


state 276

    (128) if_statement -> IF expression THEN statement if_statement_opt_1 .

    SEMICOLON       reduce using rule 128 (if_statement -> IF expression THEN statement if_statement_opt_1 .)
    END             reduce using rule 128 (if_statement -> IF expression THEN statement if_statement_opt_1 .)
    UNTIL           reduce using rule 128 (if_statement -> IF expression THEN statement if_statement_opt_1 .)
    ELSE            reduce using rule 128 (if_statement -> IF expression THEN statement if_statement_opt_1 .)


state 277

    (129) if_statement_opt_1 -> ELSE . statement
    (209) statement -> . statement_opt_1 statement_1
    (212) statement_opt_1 -> . LABEL COLON
    (213) statement_opt_1 -> . empty
    (262) empty -> .

    LABEL           shift and go to state 26
    ID              reduce using rule 262 (empty -> .)
    GOTO            reduce using rule 262 (empty -> .)
    BEGIN           reduce using rule 262 (empty -> .)
    WITH            reduce using rule 262 (empty -> .)
    WHILE           reduce using rule 262 (empty -> .)
    REPEAT          reduce using rule 262 (empty -> .)
    FOR             reduce using rule 262 (empty -> .)
    IF              reduce using rule 262 (empty -> .)
    CASE            reduce using rule 262 (empty -> .)
    SEMICOLON       reduce using rule 262 (empty -> .)
    END             reduce using rule 262 (empty -> .)
    UNTIL           reduce using rule 262 (empty -> .)
    ELSE            reduce using rule 262 (empty -> .)

    statement                      shift and go to state 307
    statement_opt_1                shift and go to state 25
    empty                          shift and go to state 27

state 278

    (130) if_statement_opt_1 -> empty .

    SEMICOLON       reduce using rule 130 (if_statement_opt_1 -> empty .)
    END             reduce using rule 130 (if_statement_opt_1 -> empty .)
    UNTIL           reduce using rule 130 (if_statement_opt_1 -> empty .)
    ELSE            reduce using rule 130 (if_statement_opt_1 -> empty .)


state 279

    (32) case_statement -> CASE expression OF case_element case_statement_1 . case_statement_opt END
    (35) case_statement_opt -> . SEMICOLON
    (36) case_statement_opt -> . empty
    (262) empty -> .

    SEMICOLON       shift and go to state 309
    END             reduce using rule 262 (empty -> .)

    case_statement_opt             shift and go to state 308
    empty                          shift and go to state 310

state 280

    (33) case_statement_1 -> SEMICOLON . case_element case_statement_1
    (28) case_element -> . case_label_list COLON statement
    (29) case_label_list -> . constant case_label_list_1
    (49) constant -> . constant_opt_sign ID
    (50) constant -> . constant_opt_sign number
    (51) constant -> . CONSTSTRING
    (52) constant_opt_sign -> . PLUS
    (53) constant_opt_sign -> . MINUS
    (54) constant_opt_sign -> . empty
    (262) empty -> .

    CONSTSTRING     shift and go to state 130
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    ID              reduce using rule 262 (empty -> .)
    NUMBER          reduce using rule 262 (empty -> .)

    case_element                   shift and go to state 311
    case_label_list                shift and go to state 238
    constant                       shift and go to state 239
    constant_opt_sign              shift and go to state 129
    empty                          shift and go to state 133

state 281

    (34) case_statement_1 -> empty .

    SEMICOLON       reduce using rule 34 (case_statement_1 -> empty .)
    END             reduce using rule 34 (case_statement_1 -> empty .)


state 282

    (28) case_element -> case_label_list COLON . statement
    (209) statement -> . statement_opt_1 statement_1
    (212) statement_opt_1 -> . LABEL COLON
    (213) statement_opt_1 -> . empty
    (262) empty -> .

    LABEL           shift and go to state 26
    ID              reduce using rule 262 (empty -> .)
    GOTO            reduce using rule 262 (empty -> .)
    BEGIN           reduce using rule 262 (empty -> .)
    WITH            reduce using rule 262 (empty -> .)
    WHILE           reduce using rule 262 (empty -> .)
    REPEAT          reduce using rule 262 (empty -> .)
    FOR             reduce using rule 262 (empty -> .)
    IF              reduce using rule 262 (empty -> .)
    CASE            reduce using rule 262 (empty -> .)
    SEMICOLON       reduce using rule 262 (empty -> .)
    END             reduce using rule 262 (empty -> .)

    statement                      shift and go to state 312
    statement_opt_1                shift and go to state 25
    empty                          shift and go to state 27

state 283

    (29) case_label_list -> constant case_label_list_1 .

    COLON           reduce using rule 29 (case_label_list -> constant case_label_list_1 .)


state 284

    (30) case_label_list_1 -> COMMA . constant case_label_list_1
    (49) constant -> . constant_opt_sign ID
    (50) constant -> . constant_opt_sign number
    (51) constant -> . CONSTSTRING
    (52) constant_opt_sign -> . PLUS
    (53) constant_opt_sign -> . MINUS
    (54) constant_opt_sign -> . empty
    (262) empty -> .

    CONSTSTRING     shift and go to state 130
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    ID              reduce using rule 262 (empty -> .)
    NUMBER          reduce using rule 262 (empty -> .)

    constant                       shift and go to state 313
    constant_opt_sign              shift and go to state 129
    empty                          shift and go to state 133

state 285

    (31) case_label_list_1 -> empty .

    COLON           reduce using rule 31 (case_label_list_1 -> empty .)


state 286

    (73) expression_list_1 -> COMMA expression . expression_list_1
    (73) expression_list_1 -> . COMMA expression expression_list_1
    (74) expression_list_1 -> . empty
    (262) empty -> .

    COMMA           shift and go to state 242
    RBRACKET        reduce using rule 262 (empty -> .)

    expression_list_1              shift and go to state 314
    empty                          shift and go to state 243

state 287

    (247) variable_declaration_part_1 -> variable_declaration SEMICOLON . variable_declaration_part_1
    (247) variable_declaration_part_1 -> . variable_declaration SEMICOLON variable_declaration_part_1
    (248) variable_declaration_part_1 -> . empty
    (249) variable_declaration -> . identifier_list COLON type
    (262) empty -> .
    (125) identifier_list -> . ID identifier_list_1

    BEGIN           reduce using rule 262 (empty -> .)
    ID              shift and go to state 39

    variable_declaration           shift and go to state 244
    variable_declaration_part_1    shift and go to state 315
    empty                          shift and go to state 246
    identifier_list                shift and go to state 122

state 288

    (228) type_definition_part_1 -> type_definition SEMICOLON type_definition_part_1 .

    VAR             reduce using rule 228 (type_definition_part_1 -> type_definition SEMICOLON type_definition_part_1 .)
    BEGIN           reduce using rule 228 (type_definition_part_1 -> type_definition SEMICOLON type_definition_part_1 .)


state 289

    (19) array_type -> ARRAY LBRACKET . index_type array_type_1 RBRACKET OF element_type
    (131) index_type -> . simple_type
    (203) simple_type -> . subrange_type
    (204) simple_type -> . enumerated_type
    (221) subrange_type -> . lower_bound DOT DOT upper_bound
    (71) enumerated_type -> . LPAREN identifier_list RPAREN
    (139) lower_bound -> . constant
    (49) constant -> . constant_opt_sign ID
    (50) constant -> . constant_opt_sign number
    (51) constant -> . CONSTSTRING
    (52) constant_opt_sign -> . PLUS
    (53) constant_opt_sign -> . MINUS
    (54) constant_opt_sign -> . empty
    (262) empty -> .

    LPAREN          shift and go to state 194
    CONSTSTRING     shift and go to state 130
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    ID              reduce using rule 262 (empty -> .)
    NUMBER          reduce using rule 262 (empty -> .)

    index_type                     shift and go to state 316
    simple_type                    shift and go to state 317
    subrange_type                  shift and go to state 189
    enumerated_type                shift and go to state 190
    lower_bound                    shift and go to state 193
    constant                       shift and go to state 197
    constant_opt_sign              shift and go to state 129
    empty                          shift and go to state 133

state 290

    (176) record_type -> RECORD field_list . END

    END             shift and go to state 318


state 291

    (87) field_list -> fixed_part . field_list_opt_1 field_list_opt_2
    (90) field_list_opt_1 -> . SEMICOLON variant_part
    (91) field_list_opt_1 -> . empty
    (262) empty -> .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 320
    END             reduce using rule 262 (empty -> .)
    RPAREN          reduce using rule 262 (empty -> .)

  ! SEMICOLON       [ reduce using rule 262 (empty -> .) ]

    field_list_opt_1               shift and go to state 319
    empty                          shift and go to state 321

state 292

    (88) field_list -> variant_part . field_list_opt_2
    (92) field_list_opt_2 -> . SEMICOLON
    (93) field_list_opt_2 -> . empty
    (262) empty -> .

    SEMICOLON       shift and go to state 323
    END             reduce using rule 262 (empty -> .)
    RPAREN          reduce using rule 262 (empty -> .)

    field_list_opt_2               shift and go to state 322
    empty                          shift and go to state 324

state 293

    (89) field_list -> empty .

    END             reduce using rule 89 (field_list -> empty .)
    RPAREN          reduce using rule 89 (field_list -> empty .)


state 294

    (100) fixed_part -> record_section . fixed_part_1
    (101) fixed_part_1 -> . SEMICOLON record_section fixed_part_1
    (102) fixed_part_1 -> . empty
    (262) empty -> .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 326
    END             reduce using rule 262 (empty -> .)
    RPAREN          reduce using rule 262 (empty -> .)

  ! SEMICOLON       [ reduce using rule 262 (empty -> .) ]

    fixed_part_1                   shift and go to state 325
    empty                          shift and go to state 327

state 295

    (254) variant_part -> CASE . tag_field ID OF variant variant_part_1
    (222) tag_field -> . ID COLON
    (223) tag_field -> . empty
    (262) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 329

  ! ID              [ reduce using rule 262 (empty -> .) ]

    tag_field                      shift and go to state 328
    empty                          shift and go to state 330

state 296

    (175) record_section -> identifier_list . COLON type

    COLON           shift and go to state 331


state 297

    (191) set_type -> SET OF . base_type
    (25) base_type -> . type
    (231) type -> . simple_type
    (232) type -> . structured_type
    (233) type -> . pointer_type
    (234) type -> . ID
    (203) simple_type -> . subrange_type
    (204) simple_type -> . enumerated_type
    (218) structured_type -> . structered_type_opt_1 unpacked_structured_type
    (158) pointer_type -> . CIRCUMFLEX ID
    (221) subrange_type -> . lower_bound DOT DOT upper_bound
    (71) enumerated_type -> . LPAREN identifier_list RPAREN
    (219) structered_type_opt_1 -> . PACKED
    (220) structered_type_opt_1 -> . empty
    (139) lower_bound -> . constant
    (262) empty -> .
    (49) constant -> . constant_opt_sign ID
    (50) constant -> . constant_opt_sign number
    (51) constant -> . CONSTSTRING
    (52) constant_opt_sign -> . PLUS
    (53) constant_opt_sign -> . MINUS
    (54) constant_opt_sign -> . empty

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 184
    CIRCUMFLEX      shift and go to state 192
    LPAREN          shift and go to state 194
    PACKED          shift and go to state 195
    ARRAY           reduce using rule 262 (empty -> .)
    RECORD          reduce using rule 262 (empty -> .)
    SET             reduce using rule 262 (empty -> .)
    FILE            reduce using rule 262 (empty -> .)
    NUMBER          reduce using rule 262 (empty -> .)
    CONSTSTRING     shift and go to state 130
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132

  ! ID              [ reduce using rule 262 (empty -> .) ]

    base_type                      shift and go to state 332
    type                           shift and go to state 333
    simple_type                    shift and go to state 186
    structured_type                shift and go to state 187
    pointer_type                   shift and go to state 188
    subrange_type                  shift and go to state 189
    enumerated_type                shift and go to state 190
    structered_type_opt_1          shift and go to state 191
    lower_bound                    shift and go to state 193
    empty                          shift and go to state 196
    constant                       shift and go to state 197
    constant_opt_sign              shift and go to state 129

state 298

    (97) file_type -> FILE OF . file_component_type
    (96) file_component_type -> . type
    (231) type -> . simple_type
    (232) type -> . structured_type
    (233) type -> . pointer_type
    (234) type -> . ID
    (203) simple_type -> . subrange_type
    (204) simple_type -> . enumerated_type
    (218) structured_type -> . structered_type_opt_1 unpacked_structured_type
    (158) pointer_type -> . CIRCUMFLEX ID
    (221) subrange_type -> . lower_bound DOT DOT upper_bound
    (71) enumerated_type -> . LPAREN identifier_list RPAREN
    (219) structered_type_opt_1 -> . PACKED
    (220) structered_type_opt_1 -> . empty
    (139) lower_bound -> . constant
    (262) empty -> .
    (49) constant -> . constant_opt_sign ID
    (50) constant -> . constant_opt_sign number
    (51) constant -> . CONSTSTRING
    (52) constant_opt_sign -> . PLUS
    (53) constant_opt_sign -> . MINUS
    (54) constant_opt_sign -> . empty

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 184
    CIRCUMFLEX      shift and go to state 192
    LPAREN          shift and go to state 194
    PACKED          shift and go to state 195
    ARRAY           reduce using rule 262 (empty -> .)
    RECORD          reduce using rule 262 (empty -> .)
    SET             reduce using rule 262 (empty -> .)
    FILE            reduce using rule 262 (empty -> .)
    NUMBER          reduce using rule 262 (empty -> .)
    CONSTSTRING     shift and go to state 130
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132

  ! ID              [ reduce using rule 262 (empty -> .) ]

    file_component_type            shift and go to state 334
    type                           shift and go to state 335
    simple_type                    shift and go to state 186
    structured_type                shift and go to state 187
    pointer_type                   shift and go to state 188
    subrange_type                  shift and go to state 189
    enumerated_type                shift and go to state 190
    structered_type_opt_1          shift and go to state 191
    lower_bound                    shift and go to state 193
    empty                          shift and go to state 196
    constant                       shift and go to state 197
    constant_opt_sign              shift and go to state 129

state 299

    (221) subrange_type -> lower_bound DOT DOT . upper_bound
    (244) upper_bound -> . constant
    (49) constant -> . constant_opt_sign ID
    (50) constant -> . constant_opt_sign number
    (51) constant -> . CONSTSTRING
    (52) constant_opt_sign -> . PLUS
    (53) constant_opt_sign -> . MINUS
    (54) constant_opt_sign -> . empty
    (262) empty -> .

    CONSTSTRING     shift and go to state 130
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    ID              reduce using rule 262 (empty -> .)
    NUMBER          reduce using rule 262 (empty -> .)

    upper_bound                    shift and go to state 336
    constant                       shift and go to state 337
    constant_opt_sign              shift and go to state 129
    empty                          shift and go to state 133

state 300

    (71) enumerated_type -> LPAREN identifier_list RPAREN .

    SEMICOLON       reduce using rule 71 (enumerated_type -> LPAREN identifier_list RPAREN .)
    COMMA           reduce using rule 71 (enumerated_type -> LPAREN identifier_list RPAREN .)
    RBRACKET        reduce using rule 71 (enumerated_type -> LPAREN identifier_list RPAREN .)
    END             reduce using rule 71 (enumerated_type -> LPAREN identifier_list RPAREN .)
    RPAREN          reduce using rule 71 (enumerated_type -> LPAREN identifier_list RPAREN .)


state 301

    (7) actual_parameter_list_1 -> COMMA actual_parameter actual_parameter_list_1 .

    RPAREN          reduce using rule 7 (actual_parameter_list_1 -> COMMA actual_parameter actual_parameter_list_1 .)


state 302

    (194) simple_expression_1 -> addition_operator term simple_expression_1 .

    EQUAL           reduce using rule 194 (simple_expression_1 -> addition_operator term simple_expression_1 .)
    DEQUAL          reduce using rule 194 (simple_expression_1 -> addition_operator term simple_expression_1 .)
    LESS            reduce using rule 194 (simple_expression_1 -> addition_operator term simple_expression_1 .)
    LESSEQUAL       reduce using rule 194 (simple_expression_1 -> addition_operator term simple_expression_1 .)
    GREATER         reduce using rule 194 (simple_expression_1 -> addition_operator term simple_expression_1 .)
    GREATEREQUAL    reduce using rule 194 (simple_expression_1 -> addition_operator term simple_expression_1 .)
    IN              reduce using rule 194 (simple_expression_1 -> addition_operator term simple_expression_1 .)
    DO              reduce using rule 194 (simple_expression_1 -> addition_operator term simple_expression_1 .)
    THEN            reduce using rule 194 (simple_expression_1 -> addition_operator term simple_expression_1 .)
    OF              reduce using rule 194 (simple_expression_1 -> addition_operator term simple_expression_1 .)
    SEMICOLON       reduce using rule 194 (simple_expression_1 -> addition_operator term simple_expression_1 .)
    END             reduce using rule 194 (simple_expression_1 -> addition_operator term simple_expression_1 .)
    UNTIL           reduce using rule 194 (simple_expression_1 -> addition_operator term simple_expression_1 .)
    ELSE            reduce using rule 194 (simple_expression_1 -> addition_operator term simple_expression_1 .)
    COMMA           reduce using rule 194 (simple_expression_1 -> addition_operator term simple_expression_1 .)
    RPAREN          reduce using rule 194 (simple_expression_1 -> addition_operator term simple_expression_1 .)
    RBRACKET        reduce using rule 194 (simple_expression_1 -> addition_operator term simple_expression_1 .)
    TO              reduce using rule 194 (simple_expression_1 -> addition_operator term simple_expression_1 .)
    DOWNTO          reduce using rule 194 (simple_expression_1 -> addition_operator term simple_expression_1 .)


state 303

    (225) term_1 -> multiplication_operator factor term_1 .

    PLUS            reduce using rule 225 (term_1 -> multiplication_operator factor term_1 .)
    MINUS           reduce using rule 225 (term_1 -> multiplication_operator factor term_1 .)
    OR              reduce using rule 225 (term_1 -> multiplication_operator factor term_1 .)
    EQUAL           reduce using rule 225 (term_1 -> multiplication_operator factor term_1 .)
    DEQUAL          reduce using rule 225 (term_1 -> multiplication_operator factor term_1 .)
    LESS            reduce using rule 225 (term_1 -> multiplication_operator factor term_1 .)
    LESSEQUAL       reduce using rule 225 (term_1 -> multiplication_operator factor term_1 .)
    GREATER         reduce using rule 225 (term_1 -> multiplication_operator factor term_1 .)
    GREATEREQUAL    reduce using rule 225 (term_1 -> multiplication_operator factor term_1 .)
    IN              reduce using rule 225 (term_1 -> multiplication_operator factor term_1 .)
    DO              reduce using rule 225 (term_1 -> multiplication_operator factor term_1 .)
    THEN            reduce using rule 225 (term_1 -> multiplication_operator factor term_1 .)
    OF              reduce using rule 225 (term_1 -> multiplication_operator factor term_1 .)
    SEMICOLON       reduce using rule 225 (term_1 -> multiplication_operator factor term_1 .)
    END             reduce using rule 225 (term_1 -> multiplication_operator factor term_1 .)
    UNTIL           reduce using rule 225 (term_1 -> multiplication_operator factor term_1 .)
    ELSE            reduce using rule 225 (term_1 -> multiplication_operator factor term_1 .)
    COMMA           reduce using rule 225 (term_1 -> multiplication_operator factor term_1 .)
    RPAREN          reduce using rule 225 (term_1 -> multiplication_operator factor term_1 .)
    RBRACKET        reduce using rule 225 (term_1 -> multiplication_operator factor term_1 .)
    TO              reduce using rule 225 (term_1 -> multiplication_operator factor term_1 .)
    DOWNTO          reduce using rule 225 (term_1 -> multiplication_operator factor term_1 .)


state 304

    (67) element_list_1 -> COMMA expression . element_list_1
    (67) element_list_1 -> . COMMA expression element_list_1
    (68) element_list_1 -> . empty
    (262) empty -> .

    COMMA           shift and go to state 271
    RBRACKET        reduce using rule 262 (empty -> .)

    element_list_1                 shift and go to state 338
    empty                          shift and go to state 272

state 305

    (103) for_statement -> FOR ID ASSIGN initial_expression for_statement_opt_1 final_expression . DO statement

    DO              shift and go to state 339


state 306

    (99) final_expression -> expression .

    DO              reduce using rule 99 (final_expression -> expression .)


state 307

    (129) if_statement_opt_1 -> ELSE statement .

    SEMICOLON       reduce using rule 129 (if_statement_opt_1 -> ELSE statement .)
    END             reduce using rule 129 (if_statement_opt_1 -> ELSE statement .)
    UNTIL           reduce using rule 129 (if_statement_opt_1 -> ELSE statement .)
    ELSE            reduce using rule 129 (if_statement_opt_1 -> ELSE statement .)


state 308

    (32) case_statement -> CASE expression OF case_element case_statement_1 case_statement_opt . END

    END             shift and go to state 340


state 309

    (35) case_statement_opt -> SEMICOLON .

    END             reduce using rule 35 (case_statement_opt -> SEMICOLON .)


state 310

    (36) case_statement_opt -> empty .

    END             reduce using rule 36 (case_statement_opt -> empty .)


state 311

    (33) case_statement_1 -> SEMICOLON case_element . case_statement_1
    (33) case_statement_1 -> . SEMICOLON case_element case_statement_1
    (34) case_statement_1 -> . empty
    (262) empty -> .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 280
    END             reduce using rule 262 (empty -> .)

  ! SEMICOLON       [ reduce using rule 262 (empty -> .) ]

    case_statement_1               shift and go to state 341
    empty                          shift and go to state 281

state 312

    (28) case_element -> case_label_list COLON statement .

    SEMICOLON       reduce using rule 28 (case_element -> case_label_list COLON statement .)
    END             reduce using rule 28 (case_element -> case_label_list COLON statement .)


state 313

    (30) case_label_list_1 -> COMMA constant . case_label_list_1
    (30) case_label_list_1 -> . COMMA constant case_label_list_1
    (31) case_label_list_1 -> . empty
    (262) empty -> .

    COMMA           shift and go to state 284
    COLON           reduce using rule 262 (empty -> .)

    case_label_list_1              shift and go to state 342
    empty                          shift and go to state 285

state 314

    (73) expression_list_1 -> COMMA expression expression_list_1 .

    RBRACKET        reduce using rule 73 (expression_list_1 -> COMMA expression expression_list_1 .)


state 315

    (247) variable_declaration_part_1 -> variable_declaration SEMICOLON variable_declaration_part_1 .

    BEGIN           reduce using rule 247 (variable_declaration_part_1 -> variable_declaration SEMICOLON variable_declaration_part_1 .)


state 316

    (19) array_type -> ARRAY LBRACKET index_type . array_type_1 RBRACKET OF element_type
    (20) array_type_1 -> . COMMA index_type array_type_1
    (21) array_type_1 -> . empty
    (262) empty -> .

    COMMA           shift and go to state 344
    RBRACKET        reduce using rule 262 (empty -> .)

    array_type_1                   shift and go to state 343
    empty                          shift and go to state 345

state 317

    (131) index_type -> simple_type .

    COMMA           reduce using rule 131 (index_type -> simple_type .)
    RBRACKET        reduce using rule 131 (index_type -> simple_type .)


state 318

    (176) record_type -> RECORD field_list END .

    SEMICOLON       reduce using rule 176 (record_type -> RECORD field_list END .)
    END             reduce using rule 176 (record_type -> RECORD field_list END .)
    RPAREN          reduce using rule 176 (record_type -> RECORD field_list END .)


state 319

    (87) field_list -> fixed_part field_list_opt_1 . field_list_opt_2
    (92) field_list_opt_2 -> . SEMICOLON
    (93) field_list_opt_2 -> . empty
    (262) empty -> .

    SEMICOLON       shift and go to state 323
    END             reduce using rule 262 (empty -> .)
    RPAREN          reduce using rule 262 (empty -> .)

    field_list_opt_2               shift and go to state 346
    empty                          shift and go to state 324

state 320

    (90) field_list_opt_1 -> SEMICOLON . variant_part
    (254) variant_part -> . CASE tag_field ID OF variant variant_part_1

    CASE            shift and go to state 295

    variant_part                   shift and go to state 347

state 321

    (91) field_list_opt_1 -> empty .

    SEMICOLON       reduce using rule 91 (field_list_opt_1 -> empty .)
    END             reduce using rule 91 (field_list_opt_1 -> empty .)
    RPAREN          reduce using rule 91 (field_list_opt_1 -> empty .)


state 322

    (88) field_list -> variant_part field_list_opt_2 .

    END             reduce using rule 88 (field_list -> variant_part field_list_opt_2 .)
    RPAREN          reduce using rule 88 (field_list -> variant_part field_list_opt_2 .)


state 323

    (92) field_list_opt_2 -> SEMICOLON .

    END             reduce using rule 92 (field_list_opt_2 -> SEMICOLON .)
    RPAREN          reduce using rule 92 (field_list_opt_2 -> SEMICOLON .)


state 324

    (93) field_list_opt_2 -> empty .

    END             reduce using rule 93 (field_list_opt_2 -> empty .)
    RPAREN          reduce using rule 93 (field_list_opt_2 -> empty .)


state 325

    (100) fixed_part -> record_section fixed_part_1 .

    SEMICOLON       reduce using rule 100 (fixed_part -> record_section fixed_part_1 .)
    END             reduce using rule 100 (fixed_part -> record_section fixed_part_1 .)
    RPAREN          reduce using rule 100 (fixed_part -> record_section fixed_part_1 .)


state 326

    (101) fixed_part_1 -> SEMICOLON . record_section fixed_part_1
    (175) record_section -> . identifier_list COLON type
    (125) identifier_list -> . ID identifier_list_1

    ID              shift and go to state 39

    record_section                 shift and go to state 348
    identifier_list                shift and go to state 296

state 327

    (102) fixed_part_1 -> empty .

    SEMICOLON       reduce using rule 102 (fixed_part_1 -> empty .)
    END             reduce using rule 102 (fixed_part_1 -> empty .)
    RPAREN          reduce using rule 102 (fixed_part_1 -> empty .)


state 328

    (254) variant_part -> CASE tag_field . ID OF variant variant_part_1

    ID              shift and go to state 349


state 329

    (222) tag_field -> ID . COLON

    COLON           shift and go to state 350


state 330

    (223) tag_field -> empty .

    ID              reduce using rule 223 (tag_field -> empty .)


state 331

    (175) record_section -> identifier_list COLON . type
    (231) type -> . simple_type
    (232) type -> . structured_type
    (233) type -> . pointer_type
    (234) type -> . ID
    (203) simple_type -> . subrange_type
    (204) simple_type -> . enumerated_type
    (218) structured_type -> . structered_type_opt_1 unpacked_structured_type
    (158) pointer_type -> . CIRCUMFLEX ID
    (221) subrange_type -> . lower_bound DOT DOT upper_bound
    (71) enumerated_type -> . LPAREN identifier_list RPAREN
    (219) structered_type_opt_1 -> . PACKED
    (220) structered_type_opt_1 -> . empty
    (139) lower_bound -> . constant
    (262) empty -> .
    (49) constant -> . constant_opt_sign ID
    (50) constant -> . constant_opt_sign number
    (51) constant -> . CONSTSTRING
    (52) constant_opt_sign -> . PLUS
    (53) constant_opt_sign -> . MINUS
    (54) constant_opt_sign -> . empty

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 184
    CIRCUMFLEX      shift and go to state 192
    LPAREN          shift and go to state 194
    PACKED          shift and go to state 195
    ARRAY           reduce using rule 262 (empty -> .)
    RECORD          reduce using rule 262 (empty -> .)
    SET             reduce using rule 262 (empty -> .)
    FILE            reduce using rule 262 (empty -> .)
    NUMBER          reduce using rule 262 (empty -> .)
    CONSTSTRING     shift and go to state 130
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132

  ! ID              [ reduce using rule 262 (empty -> .) ]

    type                           shift and go to state 351
    simple_type                    shift and go to state 186
    structured_type                shift and go to state 187
    pointer_type                   shift and go to state 188
    subrange_type                  shift and go to state 189
    enumerated_type                shift and go to state 190
    structered_type_opt_1          shift and go to state 191
    lower_bound                    shift and go to state 193
    empty                          shift and go to state 196
    constant                       shift and go to state 197
    constant_opt_sign              shift and go to state 129

state 332

    (191) set_type -> SET OF base_type .

    SEMICOLON       reduce using rule 191 (set_type -> SET OF base_type .)
    END             reduce using rule 191 (set_type -> SET OF base_type .)
    RPAREN          reduce using rule 191 (set_type -> SET OF base_type .)


state 333

    (25) base_type -> type .

    SEMICOLON       reduce using rule 25 (base_type -> type .)
    END             reduce using rule 25 (base_type -> type .)
    RPAREN          reduce using rule 25 (base_type -> type .)


state 334

    (97) file_type -> FILE OF file_component_type .

    SEMICOLON       reduce using rule 97 (file_type -> FILE OF file_component_type .)
    END             reduce using rule 97 (file_type -> FILE OF file_component_type .)
    RPAREN          reduce using rule 97 (file_type -> FILE OF file_component_type .)


state 335

    (96) file_component_type -> type .

    SEMICOLON       reduce using rule 96 (file_component_type -> type .)
    END             reduce using rule 96 (file_component_type -> type .)
    RPAREN          reduce using rule 96 (file_component_type -> type .)


state 336

    (221) subrange_type -> lower_bound DOT DOT upper_bound .

    SEMICOLON       reduce using rule 221 (subrange_type -> lower_bound DOT DOT upper_bound .)
    COMMA           reduce using rule 221 (subrange_type -> lower_bound DOT DOT upper_bound .)
    RBRACKET        reduce using rule 221 (subrange_type -> lower_bound DOT DOT upper_bound .)
    END             reduce using rule 221 (subrange_type -> lower_bound DOT DOT upper_bound .)
    RPAREN          reduce using rule 221 (subrange_type -> lower_bound DOT DOT upper_bound .)


state 337

    (244) upper_bound -> constant .

    SEMICOLON       reduce using rule 244 (upper_bound -> constant .)
    COMMA           reduce using rule 244 (upper_bound -> constant .)
    RBRACKET        reduce using rule 244 (upper_bound -> constant .)
    END             reduce using rule 244 (upper_bound -> constant .)
    RPAREN          reduce using rule 244 (upper_bound -> constant .)


state 338

    (67) element_list_1 -> COMMA expression element_list_1 .

    RBRACKET        reduce using rule 67 (element_list_1 -> COMMA expression element_list_1 .)


state 339

    (103) for_statement -> FOR ID ASSIGN initial_expression for_statement_opt_1 final_expression DO . statement
    (209) statement -> . statement_opt_1 statement_1
    (212) statement_opt_1 -> . LABEL COLON
    (213) statement_opt_1 -> . empty
    (262) empty -> .

    LABEL           shift and go to state 26
    ID              reduce using rule 262 (empty -> .)
    GOTO            reduce using rule 262 (empty -> .)
    BEGIN           reduce using rule 262 (empty -> .)
    WITH            reduce using rule 262 (empty -> .)
    WHILE           reduce using rule 262 (empty -> .)
    REPEAT          reduce using rule 262 (empty -> .)
    FOR             reduce using rule 262 (empty -> .)
    IF              reduce using rule 262 (empty -> .)
    CASE            reduce using rule 262 (empty -> .)
    SEMICOLON       reduce using rule 262 (empty -> .)
    END             reduce using rule 262 (empty -> .)
    UNTIL           reduce using rule 262 (empty -> .)
    ELSE            reduce using rule 262 (empty -> .)

    statement                      shift and go to state 352
    statement_opt_1                shift and go to state 25
    empty                          shift and go to state 27

state 340

    (32) case_statement -> CASE expression OF case_element case_statement_1 case_statement_opt END .

    SEMICOLON       reduce using rule 32 (case_statement -> CASE expression OF case_element case_statement_1 case_statement_opt END .)
    END             reduce using rule 32 (case_statement -> CASE expression OF case_element case_statement_1 case_statement_opt END .)
    UNTIL           reduce using rule 32 (case_statement -> CASE expression OF case_element case_statement_1 case_statement_opt END .)
    ELSE            reduce using rule 32 (case_statement -> CASE expression OF case_element case_statement_1 case_statement_opt END .)


state 341

    (33) case_statement_1 -> SEMICOLON case_element case_statement_1 .

    SEMICOLON       reduce using rule 33 (case_statement_1 -> SEMICOLON case_element case_statement_1 .)
    END             reduce using rule 33 (case_statement_1 -> SEMICOLON case_element case_statement_1 .)


state 342

    (30) case_label_list_1 -> COMMA constant case_label_list_1 .

    COLON           reduce using rule 30 (case_label_list_1 -> COMMA constant case_label_list_1 .)


state 343

    (19) array_type -> ARRAY LBRACKET index_type array_type_1 . RBRACKET OF element_type

    RBRACKET        shift and go to state 353


state 344

    (20) array_type_1 -> COMMA . index_type array_type_1
    (131) index_type -> . simple_type
    (203) simple_type -> . subrange_type
    (204) simple_type -> . enumerated_type
    (221) subrange_type -> . lower_bound DOT DOT upper_bound
    (71) enumerated_type -> . LPAREN identifier_list RPAREN
    (139) lower_bound -> . constant
    (49) constant -> . constant_opt_sign ID
    (50) constant -> . constant_opt_sign number
    (51) constant -> . CONSTSTRING
    (52) constant_opt_sign -> . PLUS
    (53) constant_opt_sign -> . MINUS
    (54) constant_opt_sign -> . empty
    (262) empty -> .

    LPAREN          shift and go to state 194
    CONSTSTRING     shift and go to state 130
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    ID              reduce using rule 262 (empty -> .)
    NUMBER          reduce using rule 262 (empty -> .)

    index_type                     shift and go to state 354
    simple_type                    shift and go to state 317
    subrange_type                  shift and go to state 189
    enumerated_type                shift and go to state 190
    lower_bound                    shift and go to state 193
    constant                       shift and go to state 197
    constant_opt_sign              shift and go to state 129
    empty                          shift and go to state 133

state 345

    (21) array_type_1 -> empty .

    RBRACKET        reduce using rule 21 (array_type_1 -> empty .)


state 346

    (87) field_list -> fixed_part field_list_opt_1 field_list_opt_2 .

    END             reduce using rule 87 (field_list -> fixed_part field_list_opt_1 field_list_opt_2 .)
    RPAREN          reduce using rule 87 (field_list -> fixed_part field_list_opt_1 field_list_opt_2 .)


state 347

    (90) field_list_opt_1 -> SEMICOLON variant_part .

    SEMICOLON       reduce using rule 90 (field_list_opt_1 -> SEMICOLON variant_part .)
    END             reduce using rule 90 (field_list_opt_1 -> SEMICOLON variant_part .)
    RPAREN          reduce using rule 90 (field_list_opt_1 -> SEMICOLON variant_part .)


state 348

    (101) fixed_part_1 -> SEMICOLON record_section . fixed_part_1
    (101) fixed_part_1 -> . SEMICOLON record_section fixed_part_1
    (102) fixed_part_1 -> . empty
    (262) empty -> .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 326
    END             reduce using rule 262 (empty -> .)
    RPAREN          reduce using rule 262 (empty -> .)

  ! SEMICOLON       [ reduce using rule 262 (empty -> .) ]

    fixed_part_1                   shift and go to state 355
    empty                          shift and go to state 327

state 349

    (254) variant_part -> CASE tag_field ID . OF variant variant_part_1

    OF              shift and go to state 356


state 350

    (222) tag_field -> ID COLON .

    ID              reduce using rule 222 (tag_field -> ID COLON .)


state 351

    (175) record_section -> identifier_list COLON type .

    SEMICOLON       reduce using rule 175 (record_section -> identifier_list COLON type .)
    END             reduce using rule 175 (record_section -> identifier_list COLON type .)
    RPAREN          reduce using rule 175 (record_section -> identifier_list COLON type .)


state 352

    (103) for_statement -> FOR ID ASSIGN initial_expression for_statement_opt_1 final_expression DO statement .

    SEMICOLON       reduce using rule 103 (for_statement -> FOR ID ASSIGN initial_expression for_statement_opt_1 final_expression DO statement .)
    END             reduce using rule 103 (for_statement -> FOR ID ASSIGN initial_expression for_statement_opt_1 final_expression DO statement .)
    UNTIL           reduce using rule 103 (for_statement -> FOR ID ASSIGN initial_expression for_statement_opt_1 final_expression DO statement .)
    ELSE            reduce using rule 103 (for_statement -> FOR ID ASSIGN initial_expression for_statement_opt_1 final_expression DO statement .)


state 353

    (19) array_type -> ARRAY LBRACKET index_type array_type_1 RBRACKET . OF element_type

    OF              shift and go to state 357


state 354

    (20) array_type_1 -> COMMA index_type . array_type_1
    (20) array_type_1 -> . COMMA index_type array_type_1
    (21) array_type_1 -> . empty
    (262) empty -> .

    COMMA           shift and go to state 344
    RBRACKET        reduce using rule 262 (empty -> .)

    array_type_1                   shift and go to state 358
    empty                          shift and go to state 345

state 355

    (101) fixed_part_1 -> SEMICOLON record_section fixed_part_1 .

    SEMICOLON       reduce using rule 101 (fixed_part_1 -> SEMICOLON record_section fixed_part_1 .)
    END             reduce using rule 101 (fixed_part_1 -> SEMICOLON record_section fixed_part_1 .)
    RPAREN          reduce using rule 101 (fixed_part_1 -> SEMICOLON record_section fixed_part_1 .)


state 356

    (254) variant_part -> CASE tag_field ID OF . variant variant_part_1
    (257) variant -> . case_label_list COLON LPAREN field_list RPAREN
    (29) case_label_list -> . constant case_label_list_1
    (49) constant -> . constant_opt_sign ID
    (50) constant -> . constant_opt_sign number
    (51) constant -> . CONSTSTRING
    (52) constant_opt_sign -> . PLUS
    (53) constant_opt_sign -> . MINUS
    (54) constant_opt_sign -> . empty
    (262) empty -> .

    CONSTSTRING     shift and go to state 130
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    ID              reduce using rule 262 (empty -> .)
    NUMBER          reduce using rule 262 (empty -> .)

    variant                        shift and go to state 359
    case_label_list                shift and go to state 360
    constant                       shift and go to state 239
    constant_opt_sign              shift and go to state 129
    empty                          shift and go to state 133

state 357

    (19) array_type -> ARRAY LBRACKET index_type array_type_1 RBRACKET OF . element_type
    (69) element_type -> . type
    (231) type -> . simple_type
    (232) type -> . structured_type
    (233) type -> . pointer_type
    (234) type -> . ID
    (203) simple_type -> . subrange_type
    (204) simple_type -> . enumerated_type
    (218) structured_type -> . structered_type_opt_1 unpacked_structured_type
    (158) pointer_type -> . CIRCUMFLEX ID
    (221) subrange_type -> . lower_bound DOT DOT upper_bound
    (71) enumerated_type -> . LPAREN identifier_list RPAREN
    (219) structered_type_opt_1 -> . PACKED
    (220) structered_type_opt_1 -> . empty
    (139) lower_bound -> . constant
    (262) empty -> .
    (49) constant -> . constant_opt_sign ID
    (50) constant -> . constant_opt_sign number
    (51) constant -> . CONSTSTRING
    (52) constant_opt_sign -> . PLUS
    (53) constant_opt_sign -> . MINUS
    (54) constant_opt_sign -> . empty

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 184
    CIRCUMFLEX      shift and go to state 192
    LPAREN          shift and go to state 194
    PACKED          shift and go to state 195
    ARRAY           reduce using rule 262 (empty -> .)
    RECORD          reduce using rule 262 (empty -> .)
    SET             reduce using rule 262 (empty -> .)
    FILE            reduce using rule 262 (empty -> .)
    NUMBER          reduce using rule 262 (empty -> .)
    CONSTSTRING     shift and go to state 130
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132

  ! ID              [ reduce using rule 262 (empty -> .) ]

    element_type                   shift and go to state 361
    type                           shift and go to state 362
    simple_type                    shift and go to state 186
    structured_type                shift and go to state 187
    pointer_type                   shift and go to state 188
    subrange_type                  shift and go to state 189
    enumerated_type                shift and go to state 190
    structered_type_opt_1          shift and go to state 191
    lower_bound                    shift and go to state 193
    empty                          shift and go to state 196
    constant                       shift and go to state 197
    constant_opt_sign              shift and go to state 129

state 358

    (20) array_type_1 -> COMMA index_type array_type_1 .

    RBRACKET        reduce using rule 20 (array_type_1 -> COMMA index_type array_type_1 .)


state 359

    (254) variant_part -> CASE tag_field ID OF variant . variant_part_1
    (255) variant_part_1 -> . SEMICOLON variant variant_part_1
    (256) variant_part_1 -> . empty
    (262) empty -> .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 364
    END             reduce using rule 262 (empty -> .)
    RPAREN          reduce using rule 262 (empty -> .)

  ! SEMICOLON       [ reduce using rule 262 (empty -> .) ]

    variant_part_1                 shift and go to state 363
    empty                          shift and go to state 365

state 360

    (257) variant -> case_label_list . COLON LPAREN field_list RPAREN

    COLON           shift and go to state 366


state 361

    (19) array_type -> ARRAY LBRACKET index_type array_type_1 RBRACKET OF element_type .

    SEMICOLON       reduce using rule 19 (array_type -> ARRAY LBRACKET index_type array_type_1 RBRACKET OF element_type .)
    END             reduce using rule 19 (array_type -> ARRAY LBRACKET index_type array_type_1 RBRACKET OF element_type .)
    RPAREN          reduce using rule 19 (array_type -> ARRAY LBRACKET index_type array_type_1 RBRACKET OF element_type .)


state 362

    (69) element_type -> type .

    SEMICOLON       reduce using rule 69 (element_type -> type .)
    END             reduce using rule 69 (element_type -> type .)
    RPAREN          reduce using rule 69 (element_type -> type .)


state 363

    (254) variant_part -> CASE tag_field ID OF variant variant_part_1 .

    SEMICOLON       reduce using rule 254 (variant_part -> CASE tag_field ID OF variant variant_part_1 .)
    END             reduce using rule 254 (variant_part -> CASE tag_field ID OF variant variant_part_1 .)
    RPAREN          reduce using rule 254 (variant_part -> CASE tag_field ID OF variant variant_part_1 .)


state 364

    (255) variant_part_1 -> SEMICOLON . variant variant_part_1
    (257) variant -> . case_label_list COLON LPAREN field_list RPAREN
    (29) case_label_list -> . constant case_label_list_1
    (49) constant -> . constant_opt_sign ID
    (50) constant -> . constant_opt_sign number
    (51) constant -> . CONSTSTRING
    (52) constant_opt_sign -> . PLUS
    (53) constant_opt_sign -> . MINUS
    (54) constant_opt_sign -> . empty
    (262) empty -> .

    CONSTSTRING     shift and go to state 130
    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    ID              reduce using rule 262 (empty -> .)
    NUMBER          reduce using rule 262 (empty -> .)

    variant                        shift and go to state 367
    case_label_list                shift and go to state 360
    constant                       shift and go to state 239
    constant_opt_sign              shift and go to state 129
    empty                          shift and go to state 133

state 365

    (256) variant_part_1 -> empty .

    SEMICOLON       reduce using rule 256 (variant_part_1 -> empty .)
    END             reduce using rule 256 (variant_part_1 -> empty .)
    RPAREN          reduce using rule 256 (variant_part_1 -> empty .)


state 366

    (257) variant -> case_label_list COLON . LPAREN field_list RPAREN

    LPAREN          shift and go to state 368


state 367

    (255) variant_part_1 -> SEMICOLON variant . variant_part_1
    (255) variant_part_1 -> . SEMICOLON variant variant_part_1
    (256) variant_part_1 -> . empty
    (262) empty -> .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 364
    END             reduce using rule 262 (empty -> .)
    RPAREN          reduce using rule 262 (empty -> .)

  ! SEMICOLON       [ reduce using rule 262 (empty -> .) ]

    variant_part_1                 shift and go to state 369
    empty                          shift and go to state 365

state 368

    (257) variant -> case_label_list COLON LPAREN . field_list RPAREN
    (87) field_list -> . fixed_part field_list_opt_1 field_list_opt_2
    (88) field_list -> . variant_part field_list_opt_2
    (89) field_list -> . empty
    (100) fixed_part -> . record_section fixed_part_1
    (254) variant_part -> . CASE tag_field ID OF variant variant_part_1
    (262) empty -> .
    (175) record_section -> . identifier_list COLON type
    (125) identifier_list -> . ID identifier_list_1

    CASE            shift and go to state 295
    RPAREN          reduce using rule 262 (empty -> .)
    ID              shift and go to state 39

    field_list                     shift and go to state 370
    fixed_part                     shift and go to state 291
    variant_part                   shift and go to state 292
    empty                          shift and go to state 293
    record_section                 shift and go to state 294
    identifier_list                shift and go to state 296

state 369

    (255) variant_part_1 -> SEMICOLON variant variant_part_1 .

    SEMICOLON       reduce using rule 255 (variant_part_1 -> SEMICOLON variant variant_part_1 .)
    END             reduce using rule 255 (variant_part_1 -> SEMICOLON variant variant_part_1 .)
    RPAREN          reduce using rule 255 (variant_part_1 -> SEMICOLON variant variant_part_1 .)


state 370

    (257) variant -> case_label_list COLON LPAREN field_list . RPAREN

    RPAREN          shift and go to state 371


state 371

    (257) variant -> case_label_list COLON LPAREN field_list RPAREN .

    SEMICOLON       reduce using rule 257 (variant -> case_label_list COLON LPAREN field_list RPAREN .)
    END             reduce using rule 257 (variant -> case_label_list COLON LPAREN field_list RPAREN .)
    RPAREN          reduce using rule 257 (variant -> case_label_list COLON LPAREN field_list RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 18 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 56 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 90 resolved as shift
WARNING: shift/reduce conflict for ID in state 101 resolved as shift
WARNING: shift/reduce conflict for ID in state 124 resolved as shift
WARNING: shift/reduce conflict for ID in state 180 resolved as shift
WARNING: shift/reduce conflict for ID in state 206 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 236 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 237 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 291 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 294 resolved as shift
WARNING: shift/reduce conflict for ID in state 295 resolved as shift
WARNING: shift/reduce conflict for ID in state 297 resolved as shift
WARNING: shift/reduce conflict for ID in state 298 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 311 resolved as shift
WARNING: shift/reduce conflict for ID in state 331 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 348 resolved as shift
WARNING: shift/reduce conflict for ID in state 357 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 359 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 367 resolved as shift
WARNING: reduce/reduce conflict in state 55 resolved using rule (file_variable -> variable)
WARNING: rejected rule (pointer_variable -> variable) in state 55
WARNING: reduce/reduce conflict in state 105 resolved using rule (file_variable -> variable)
WARNING: rejected rule (pointer_variable -> variable) in state 105
WARNING: reduce/reduce conflict in state 145 resolved using rule (file_variable -> variable)
WARNING: rejected rule (pointer_variable -> variable) in state 145
WARNING: reduce/reduce conflict in state 146 resolved using rule (actual_function -> ID)
WARNING: rejected rule (actual_procedure -> ID) in state 146
WARNING: reduce/reduce conflict in state 146 resolved using rule (actual_function -> ID)
WARNING: rejected rule (entire_variable -> ID) in state 146
WARNING: reduce/reduce conflict in state 166 resolved using rule (entire_variable -> ID)
WARNING: rejected rule (factor -> ID) in state 166
WARNING: reduce/reduce conflict in state 166 resolved using rule (entire_variable -> ID)
WARNING: rejected rule (empty -> <empty>) in state 166
WARNING: reduce/reduce conflict in state 168 resolved using rule (file_variable -> variable)
WARNING: rejected rule (pointer_variable -> variable) in state 168
WARNING: reduce/reduce conflict in state 203 resolved using rule (integer -> NUMBER)
WARNING: rejected rule (real_number -> NUMBER) in state 203
WARNING: Rule (pointer_variable -> variable) is never reduced
WARNING: Rule (actual_procedure -> ID) is never reduced
WARNING: Rule (factor -> ID) is never reduced
WARNING: Rule (real_number -> NUMBER) is never reduced
